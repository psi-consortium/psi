{
  "openapi": "3.0.1",
  "info": {
    "title": "GeographicAddress",
    "description": "The Geographic Address API offers a standardized interface for client interaction with an Address Management System. This API facilitates the management and validation of address data.\n### Resources\n- GeographicAddress\n- GeographicSubAddress\n- GeographicAddressValidation\n- Hub\n### Operations\nGeographic Address Management API performs the following operations :\n- Retrieve a geographic address or a collection of geographic addresses\n- Create a geographic address\n- Update a geographic address\n- Retrieve a geographic sub-address\n- Create a geographic address validation\n- Retrieve, update and delete an existing  geographic address validation\n- Notify events on these resources",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "{apiRoot}/tmf-api/geographicAddressManagement/v5/",
      "variables": {
        "apiRoot": {
          "default": "https://serverRoot",
          "enum": [
            "https://serverRoot"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "geographicAddressValidation",
      "description": "Operations for GeographicAddressValidation Resource"
    },
    {
      "name": "geographicAddress",
      "description": "Operations for GeographicAddress Resource"
    },
    {
      "name": "geographicSubAddress",
      "description": "Operations for GeographicSubAddress Resource"
    },
    {
      "name": "notification listener",
      "description": "Notifications for Resource Lifecycle and event notifications"
    },
    {
      "name": "events subscription",
      "description": "Endpoints to register and terminate an Event Listener"
    }
  ],
  "paths": {
    "/geographicAddress": {
      "get": {
        "tags": [
          "geographicAddress"
        ],
        "summary": "List or find GeographicAddress objects",
        "description": "List or find GeographicAddress objects",
        "operationId": "listGeographicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddressArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "geographicAddress"
        ],
        "summary": "Creates a GeographicAddress",
        "description": "This operation creates a GeographicAddress entity.",
        "operationId": "createGeographicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddress_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201GeographicAddress"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/geographicAddress/{geographicAddressId}/geographicSubAddress": {
      "get": {
        "tags": [
          "geographicSubAddress",
          "geographicAddress"
        ],
        "summary": "List or find GeographicSubAddress objects",
        "description": "List or find GeographicSubAddress objects",
        "operationId": "listGeographicAddressGeographicSubAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/GeographicAddressId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicSubAddressArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/geographicAddress/{geographicAddressId}/geographicSubAddress/{id}": {
      "get": {
        "tags": [
          "geographicSubAddress",
          "geographicAddress"
        ],
        "summary": "Retrieves a GeographicSubAddress by ID",
        "description": "This operation retrieves a GeographicSubAddress entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddressGeographicSubAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/GeographicAddressId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicSubAddress_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/geographicAddress/{id}": {
      "get": {
        "tags": [
          "geographicAddress"
        ],
        "summary": "Retrieves a GeographicAddress by ID",
        "description": "This operation retrieves a GeographicAddress entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddress_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "geographicAddress"
        ],
        "summary": "Updates partially a GeographicAddress",
        "description": "This operation updates partially a GeographicAddress entity.",
        "operationId": "patchGeographicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddress_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddress_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "geographicAddress"
        ],
        "summary": "Deletes a GeographicAddress",
        "description": "This operation deletes a GeographicAddress entity.",
        "operationId": "deleteGeographicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/geographicAddressValidation": {
      "get": {
        "tags": [
          "geographicAddressValidation"
        ],
        "summary": "List or find GeographicAddressValidation objects",
        "description": "List or find GeographicAddressValidation objects",
        "operationId": "listGeographicAddressValidation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddressValidationArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "geographicAddressValidation"
        ],
        "summary": "Creates a GeographicAddressValidation",
        "description": "This operation creates a GeographicAddressValidation entity.",
        "operationId": "createGeographicAddressValidation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddressValidation_FVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddressValidation_Task"
          },
          "201": {
            "$ref": "#/components/responses/201GeographicAddressValidation"
          },
          "202": {
            "description": "Accepted"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/geographicAddressValidation/{id}": {
      "get": {
        "tags": [
          "geographicAddressValidation"
        ],
        "summary": "Retrieves a GeographicAddressValidation by ID",
        "description": "This operation retrieves a GeographicAddressValidation entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddressValidation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GeographicAddressValidation_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "createHub",
        "summary": "Create a subscription (hub) to receive Events",
        "description": "Sets the communication endpoint to receive Events.",
        "tags": [
          "events subscription"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Hub_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Hub"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/hub/{id}": {
      "get": {
        "operationId": "hubGet",
        "summary": "Retrieve a subscription (hub)",
        "description": "",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Hub"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "operationId": "hubDelete",
        "summary": "Remove a subscription (hub) to receive Events",
        "description": "",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/geographicAddressAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity GeographicAddressAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification GeographicAddressAttributeValueChangeEvent",
        "operationId": "geographicAddressAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddressAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/geographicAddressCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity GeographicAddressCreateEvent",
        "description": "Example of a client listener for receiving the notification GeographicAddressCreateEvent",
        "operationId": "geographicAddressCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddressCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/geographicAddressDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity GeographicAddressDeleteEvent",
        "description": "Example of a client listener for receiving the notification GeographicAddressDeleteEvent",
        "operationId": "geographicAddressDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddressDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/geographicAddressValidationStateChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity GeographicAddressValidationStateChangeEvent",
        "description": "Example of a client listener for receiving the notification GeographicAddressValidationStateChangeEvent",
        "operationId": "geographicAddressValidationStateChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/GeographicAddressValidationStateChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Addressable": {
        "type": "object",
        "description": "Base schema for addressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        }
      },
      "Addressable_MVO": {
        "type": "object",
        "description": "Base schema for addressable entities"
      },
      "AlternateGeographicAddressValidation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicAddress"
          },
          {
            "type": "object",
            "description": "An alternate geographic address can signify an alternative address that shares a certain degree of similarity with the original geographic address, matched using different algormiths (e.g. fuzzy) by the address management system. This alternative may encompass variations in spelling or represent a different rendition of the primary address",
            "properties": {
              "similarityScore": {
                "type": "number",
                "description": "Represents the similarity score between the search query and the target item. This score quantifies the degree of similarity or match between the two."
              },
              "matchinRule": {
                "type": "string",
                "description": "Indicates the matching rule that was applied to determine the matching degree for the target item. This attribute provides insight into the reasoning behind the assigned matching degree."
              },
              "matchingDegree": {
                "type": "string",
                "description": "Represents the matching degree between the search query and the target item, classified based on linguistic variables and matching rules. This attribute categorizes the degree of similarity into linguistic terms such as HighSimilarity, Medium Similarity, or LowSimilarity.",
                "enum": [
                  "high",
                  "medium",
                  "low"
                ]
              }
            }
          }
        ]
      },
      "AlternateGeographicAddressValidation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicAddress_FVO"
          },
          {
            "type": "object",
            "description": "An alternate geographic address can signify an alternative address that shares a certain degree of similarity with the original geographic address, matched using different algormiths (e.g. fuzzy) by the address management system. This alternative may encompass variations in spelling or represent a different rendition of the primary address",
            "properties": {
              "similarityScore": {
                "type": "number",
                "description": "Represents the similarity score between the search query and the target item. This score quantifies the degree of similarity or match between the two."
              },
              "matchinRule": {
                "type": "string",
                "description": "Indicates the matching rule that was applied to determine the matching degree for the target item. This attribute provides insight into the reasoning behind the assigned matching degree."
              },
              "matchingDegree": {
                "type": "string",
                "description": "Represents the matching degree between the search query and the target item, classified based on linguistic variables and matching rules. This attribute categorizes the degree of similarity into linguistic terms such as HighSimilarity, Medium Similarity, or LowSimilarity.",
                "enum": [
                  "high",
                  "medium",
                  "low"
                ]
              }
            }
          }
        ]
      },
      "AlternateGeographicAddressValidation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicAddress_MVO"
          },
          {
            "type": "object",
            "description": "An alternate geographic address can signify an alternative address that shares a certain degree of similarity with the original geographic address, matched using different algormiths (e.g. fuzzy) by the address management system. This alternative may encompass variations in spelling or represent a different rendition of the primary address",
            "properties": {
              "similarityScore": {
                "type": "number",
                "description": "Represents the similarity score between the search query and the target item. This score quantifies the degree of similarity or match between the two."
              },
              "matchinRule": {
                "type": "string",
                "description": "Indicates the matching rule that was applied to determine the matching degree for the target item. This attribute provides insight into the reasoning behind the assigned matching degree."
              },
              "matchingDegree": {
                "type": "string",
                "description": "Represents the matching degree between the search query and the target item, classified based on linguistic variables and matching rules. This attribute categorizes the degree of similarity into linguistic terms such as HighSimilarity, Medium Similarity, or LowSimilarity.",
                "enum": [
                  "high",
                  "medium",
                  "low"
                ]
              }
            }
          }
        ]
      },
      "Attachment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment"
          }
        }
      },
      "AttachmentRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AttachmentRef": "#/components/schemas/AttachmentRef"
          }
        }
      },
      "AttachmentRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment",
            "AttachmentRef": "#/components/schemas/AttachmentRef"
          }
        }
      },
      "AttachmentRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_FVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_FVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef"
          }
        }
      },
      "AttachmentRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_MVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_MVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef_MVO"
          }
        }
      },
      "AttachmentRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AttachmentRef": "#/components/schemas/AttachmentRef_MVO"
          }
        }
      },
      "Attachment_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            },
            "required": [
              "attachmentType",
              "mimeType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_FVO"
          }
        }
      },
      "Attachment_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_MVO"
          }
        }
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object",
                "description": "The event linked to the involved resource object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "BaseEvent": "#/components/schemas/BaseEvent"
          }
        }
      },
      "CalendarPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "The CalendarPeriod schema represents a period of time within a calendar, defining various attributes such as the applicable day, timezone, hour period, and status. It is designed to capture information about the availability or status of a calendar period, which can be used in scheduling, booking, or resource allocation applications.",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CalendarPeriod": "#/components/schemas/CalendarPeriod"
          }
        }
      },
      "CalendarPeriod_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "The CalendarPeriod schema represents a period of time within a calendar, defining various attributes such as the applicable day, timezone, hour period, and status. It is designed to capture information about the availability or status of a calendar period, which can be used in scheduling, booking, or resource allocation applications.",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CalendarPeriod": "#/components/schemas/CalendarPeriod_FVO"
          }
        }
      },
      "CalendarPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "The CalendarPeriod schema represents a period of time within a calendar, defining various attributes such as the applicable day, timezone, hour period, and status. It is designed to capture information about the availability or status of a calendar period, which can be used in scheduling, booking, or resource allocation applications.",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CalendarPeriod": "#/components/schemas/CalendarPeriod_MVO"
          }
        }
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic"
          }
        }
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
          }
        }
      },
      "CharacteristicRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_FVO"
          }
        }
      },
      "CharacteristicRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_MVO"
          }
        }
      },
      "Characteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_FVO"
          }
        }
      },
      "Characteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_MVO"
          }
        }
      },
      "ContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : EmailContactMedium, FaxContactMedium, PhoneContactMedium, GeographicAddressContactMedium, SocialMediaContactMedium...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualify it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium"
          }
        }
      },
      "ContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : EmailContactMedium, FaxContactMedium, PhoneContactMedium, GeographicAddressContactMedium, SocialMediaContactMedium...",
            "properties": {
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualify it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium_MVO"
          }
        }
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "EntityRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanation of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "description": "Collection of analytic characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              }
            }
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier"
          }
        }
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_FVO"
          }
        }
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_MVO"
          }
        }
      },
      "Feature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Feature": "#/components/schemas/Feature",
            "GeographicSiteFeature": "#/components/schemas/GeographicSiteFeature"
          }
        }
      },
      "FeatureRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "FeatureRelationship": "#/components/schemas/FeatureRelationship"
          }
        }
      },
      "FeatureRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "FeatureRelationship": "#/components/schemas/FeatureRelationship_FVO"
          }
        }
      },
      "FeatureRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "FeatureRelationship": "#/components/schemas/FeatureRelationship_MVO"
          }
        }
      },
      "Feature_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_FVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_FVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Feature": "#/components/schemas/Feature_FVO",
            "GeographicSiteFeature": "#/components/schemas/GeographicSiteFeature_FVO"
          }
        }
      },
      "Feature_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_MVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_MVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Feature": "#/components/schemas/Feature_MVO",
            "GeographicSiteFeature": "#/components/schemas/GeographicSiteFeature_MVO"
          }
        }
      },
      "GeoJsonLineString": {
        "type": "object",
        "description": "GeoJson LineString is a collection of points forming a connected line",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/LineString"
              }
            }
          }
        ]
      },
      "GeoJsonLineString_FVO": {
        "type": "object",
        "description": "GeoJson LineString is a collection of points forming a connected line",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/LineString_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonLineString_MVO": {
        "type": "object",
        "description": "GeoJson LineString is a collection of points forming a connected line",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/LineString_MVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiLineString": {
        "type": "object",
        "description": "GeoJson MultiLineString is a one or more GeoJSON LineStrings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiLineString"
              }
            }
          }
        ]
      },
      "GeoJsonMultiLineString_FVO": {
        "type": "object",
        "description": "GeoJson MultiLineString is a one or more GeoJSON LineStrings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiLineString_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiLineString_MVO": {
        "type": "object",
        "description": "GeoJson MultiLineString is a one or more GeoJSON LineStrings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiLineString_MVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPoint": {
        "type": "object",
        "description": "GeoJson MultiPoint is a one or more GeoJSON points",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPoint"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPoint_FVO": {
        "type": "object",
        "description": "GeoJson MultiPoint is a one or more GeoJSON points",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPoint_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPoint_MVO": {
        "type": "object",
        "description": "GeoJson MultiPoint is a one or more GeoJSON points",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPoint_MVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPolygon": {
        "type": "object",
        "description": "A GeoJson MultiPolygon is an array of polygons",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPolygon"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPolygon_FVO": {
        "type": "object",
        "description": "A GeoJson MultiPolygon is an array of polygons",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPolygon_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonMultiPolygon_MVO": {
        "type": "object",
        "description": "A GeoJson MultiPolygon is an array of polygons",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/MultiPolygon_MVO"
              }
            }
          }
        ]
      },
      "GeoJsonPoint": {
        "type": "object",
        "description": "A GeoJsonPoint is a single point",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Point"
              }
            }
          }
        ]
      },
      "GeoJsonPoint_FVO": {
        "type": "object",
        "description": "A GeoJsonPoint is a single point",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Point_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonPoint_MVO": {
        "type": "object",
        "description": "A GeoJsonPoint is a single point",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Point_MVO"
              }
            }
          }
        ]
      },
      "GeoJsonPolygon": {
        "type": "object",
        "description": "A GeoJsonPolygon is an array of linear rings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Polygon"
              }
            }
          }
        ]
      },
      "GeoJsonPolygon_FVO": {
        "type": "object",
        "description": "A GeoJsonPolygon is an array of linear rings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Polygon_FVO"
              }
            }
          }
        ]
      },
      "GeoJsonPolygon_MVO": {
        "type": "object",
        "description": "A GeoJsonPolygon is an array of linear rings",
        "allOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "properties": {
              "geoJson": {
                "$ref": "#/components/schemas/Polygon_MVO"
              }
            }
          }
        ]
      },
      "GeographicAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
              },
              "geographicSubAddress": {
                "type": "array",
                "description": "Collection of sub addresses",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              },
              "geographicSite": {
                "$ref": "#/components/schemas/GeographicSiteRefOrValue"
              },
              "geographicAddressRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicAddressRelationship"
                },
                "description": "A list of geographic addresses relationships. Represents a relationship between geographic addresses"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation"
          }
        }
      },
      "GeographicAddressAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressAttributeValueChangeEvent": "#/components/schemas/GeographicAddressAttributeValueChangeEvent"
          }
        }
      },
      "GeographicAddressAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "GeographicAddressAttributeValueChangeEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressCreateEvent": "#/components/schemas/GeographicAddressCreateEvent"
          }
        }
      },
      "GeographicAddressCreateEventPayload": {
        "type": "object",
        "description": "GeographicAddressCreateEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressDeleteEvent": "#/components/schemas/GeographicAddressDeleteEvent"
          }
        }
      },
      "GeographicAddressDeleteEventPayload": {
        "type": "object",
        "description": "GeographicAddressDeleteEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "The GeographicAddressRelationship schema represents a relationship between geographic addresses. It defines the structure for storing information about how two geographic addresses are related to each other within a system.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the related geographic address. This identifier serves as a reference to uniquely identify the associated geographic address within the system."
              },
              "name": {
                "type": "string",
                "description": "Name of the geographic address. This attribute provides a human-readable name or label for the related geographic address, which can help users identify and differentiate between different addresses."
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship between the geographic addresses. This attribute specifies the nature of the relationship between the related addresses. It provides context for understanding how the addresses are related to each other."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRelationship": "#/components/schemas/GeographicAddressRelationship"
          }
        }
      },
      "GeographicAddressRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "The GeographicAddressRelationship schema represents a relationship between geographic addresses. It defines the structure for storing information about how two geographic addresses are related to each other within a system.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the related geographic address. This identifier serves as a reference to uniquely identify the associated geographic address within the system."
              },
              "name": {
                "type": "string",
                "description": "Name of the geographic address. This attribute provides a human-readable name or label for the related geographic address, which can help users identify and differentiate between different addresses."
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship between the geographic addresses. This attribute specifies the nature of the relationship between the related addresses. It provides context for understanding how the addresses are related to each other."
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRelationship": "#/components/schemas/GeographicAddressRelationship_FVO"
          }
        }
      },
      "GeographicAddressRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "The GeographicAddressRelationship schema represents a relationship between geographic addresses. It defines the structure for storing information about how two geographic addresses are related to each other within a system.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the geographic address. This attribute provides a human-readable name or label for the related geographic address, which can help users identify and differentiate between different addresses."
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship between the geographic addresses. This attribute specifies the nature of the relationship between the related addresses. It provides context for understanding how the addresses are related to each other."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRelationship": "#/components/schemas/GeographicAddressRelationship_MVO"
          }
        }
      },
      "GeographicAddressValidation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "This resource is used to manage address validation request and response",
            "properties": {
              "href": {
                "type": "string",
                "description": "An URI used to access to the address validation resource"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the Address Validation"
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              },
              "validationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the address validation is performed"
              },
              "validationResult": {
                "type": "string",
                "description": "Result of the address validation (success, partial, fails)"
              },
              "submittedGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress"
              },
              "validGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress"
              },
              "alternateGeographicAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AlternateGeographicAddressValidation"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressValidation": "#/components/schemas/GeographicAddressValidation"
          }
        }
      },
      "GeographicAddressValidationStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressValidationStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressValidationStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressValidationStateChangeEvent": "#/components/schemas/GeographicAddressValidationStateChangeEvent"
          }
        }
      },
      "GeographicAddressValidationStateChangeEventPayload": {
        "type": "object",
        "description": "GeographicAddressValidationStateChangeEventPayload generic structure",
        "properties": {
          "geographicAddressValidation": {
            "$ref": "#/components/schemas/GeographicAddressValidation"
          }
        }
      },
      "GeographicAddressValidation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "This resource is used to manage address validation request and response",
            "properties": {
              "href": {
                "type": "string",
                "description": "An URI used to access to the address validation resource"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the Address Validation"
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
              },
              "submittedGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress_FVO"
              }
            },
            "required": [
              "submittedGeographicAddress",
              "provideAlternative"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressValidation": "#/components/schemas/GeographicAddressValidation_FVO"
          }
        }
      },
      "GeographicAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_FVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "description": "Collection of sub addresses",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_FVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              },
              "geographicSite": {
                "$ref": "#/components/schemas/GeographicSiteRefOrValue_FVO"
              },
              "geographicAddressRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicAddressRelationship_FVO"
                },
                "description": "A list of geographic addresses relationships. Represents a relationship between geographic addresses"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_FVO"
          }
        }
      },
      "GeographicAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier_MVO"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_MVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "description": "Collection of sub addresses",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_MVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              },
              "geographicSite": {
                "$ref": "#/components/schemas/GeographicSiteRefOrValue_MVO"
              },
              "geographicAddressRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicAddressRelationship_MVO"
                },
                "description": "A list of geographic addresses relationships. Represents a relationship between geographic addresses"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_MVO"
          }
        }
      },
      "GeographicLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "bbox": {
                "$ref": "#/components/schemas/bbox"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon"
          }
        }
      },
      "GeographicLocationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocationRef": "#/components/schemas/GeographicLocationRef"
          }
        }
      },
      "GeographicLocationRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation",
            "GeographicLocationRef": "#/components/schemas/GeographicLocationRef",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString"
          }
        }
      },
      "GeographicLocationRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation_FVO",
            "GeographicLocationRef": "#/components/schemas/GeographicLocationRef",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_FVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_FVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_FVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_FVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_FVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_FVO"
          }
        }
      },
      "GeographicLocationRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation_MVO",
            "GeographicLocationRef": "#/components/schemas/GeographicLocationRef_MVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_MVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_MVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_MVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_MVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_MVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_MVO"
          }
        }
      },
      "GeographicLocationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocationRef": "#/components/schemas/GeographicLocationRef_MVO"
          }
        }
      },
      "GeographicLocation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "bbox": {
                "$ref": "#/components/schemas/bbox"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_FVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_FVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_FVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_FVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_FVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_FVO"
          }
        }
      },
      "GeographicLocation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "bbox": {
                "$ref": "#/components/schemas/bbox"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_MVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_MVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_MVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_MVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_MVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_MVO"
          }
        }
      },
      "GeographicSite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]",
                "example": "BTS"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created",
                "example": "2024-09-23T00:00:00Z"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site",
                "example": "GeographiSite for the base station BS-9283"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former",
                "example": "planned"
              },
              "relatedParty": {
                "type": "array",
                "description": "Related parties collection",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "calendar": {
                "type": "array",
                "description": "Collection of calendar items",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of place objects",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue"
                }
              },
              "siteRelationship": {
                "type": "array",
                "description": "Collection of site siteRelationships",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship"
                }
              },
              "siteCategory": {
                "type": "string",
                "description": "Site classification/category.",
                "example": "ShoppingUnit"
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact information",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "siteFeature": {
                "type": "array",
                "description": "Collection of site features",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteFeature"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteFeature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Feature"
          },
          {
            "type": "object",
            "description": "Geographic Site Feature captures  various site information, ranging from survey data to safety guidelines and hazard information",
            "properties": {
              "validFor": {
                "type": "array",
                "description": "Collection of validity information",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod"
                }
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of notes",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                },
                "description": "The associated party or partyRole",
                "minItems": 1
              },
              "featureCategory": {
                "type": "array",
                "description": "Collection of feature category",
                "items": {
                  "type": "string",
                  "description": "This parameter represents a feature category which may be assigned to certain groups of features. ",
                  "example": "Access Information"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteFeature_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Feature_FVO"
          },
          {
            "type": "object",
            "description": "Geographic Site Feature captures  various site information, ranging from survey data to safety guidelines and hazard information",
            "properties": {
              "validFor": {
                "type": "array",
                "description": "Collection of validity information",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_FVO"
                }
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of notes",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                },
                "description": "The associated party or partyRole",
                "minItems": 1
              },
              "featureCategory": {
                "type": "array",
                "description": "Collection of feature category",
                "items": {
                  "type": "string",
                  "description": "This parameter represents a feature category which may be assigned to certain groups of features. ",
                  "example": "Access Information"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteFeature_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Feature_MVO"
          },
          {
            "type": "object",
            "description": "Geographic Site Feature captures  various site information, ranging from survey data to safety guidelines and hazard information",
            "properties": {
              "validFor": {
                "type": "array",
                "description": "Collection of validity information",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_MVO"
                }
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of notes",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                },
                "description": "The associated party or partyRole",
                "minItems": 1
              },
              "featureCategory": {
                "type": "array",
                "description": "Collection of feature category",
                "items": {
                  "type": "string",
                  "description": "This parameter represents a feature category which may be assigned to certain groups of features. ",
                  "example": "Access Information"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSiteRef": "#/components/schemas/GeographicSiteRef"
          }
        }
      },
      "GeographicSiteRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicSite entity and not the GeographicSiteRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicSite"
          },
          {
            "$ref": "#/components/schemas/GeographicSiteRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSite": "#/components/schemas/GeographicSite",
            "GeographicSiteRef": "#/components/schemas/GeographicSiteRef"
          }
        }
      },
      "GeographicSiteRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicSite entity and not the GeographicSiteRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicSite_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSiteRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSite": "#/components/schemas/GeographicSite_FVO",
            "GeographicSiteRef": "#/components/schemas/GeographicSiteRef"
          }
        }
      },
      "GeographicSiteRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicSite entity and not the GeographicSiteRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicSite_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSiteRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSite": "#/components/schemas/GeographicSite_MVO",
            "GeographicSiteRef": "#/components/schemas/GeographicSiteRef_MVO"
          }
        }
      },
      "GeographicSiteRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSiteRef": "#/components/schemas/GeographicSiteRef_MVO"
          }
        }
      },
      "GeographicSiteRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSiteRelationship": "#/components/schemas/GeographicSiteRelationship"
          }
        }
      },
      "GeographicSiteRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSiteRelationship": "#/components/schemas/GeographicSiteRelationship_FVO"
          }
        }
      },
      "GeographicSiteRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSiteRelationship": "#/components/schemas/GeographicSiteRelationship_MVO"
          }
        }
      },
      "GeographicSite_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]",
                "example": "BTS"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created",
                "example": "2024-09-23T00:00:00Z"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site",
                "example": "GeographiSite for the base station BS-9283"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former",
                "example": "planned"
              },
              "relatedParty": {
                "type": "array",
                "description": "Related parties collection",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "calendar": {
                "type": "array",
                "description": "Collection of calendar items",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_FVO"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of place objects",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_FVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "description": "Collection of site siteRelationships",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_FVO"
                }
              },
              "siteCategory": {
                "type": "string",
                "description": "Site classification/category.",
                "example": "ShoppingUnit"
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact information",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "siteFeature": {
                "type": "array",
                "description": "Collection of site features",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteFeature_FVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSite_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]",
                "example": "BTS"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created",
                "example": "2024-09-23T00:00:00Z"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site",
                "example": "GeographiSite for the base station BS-9283"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former",
                "example": "planned"
              },
              "relatedParty": {
                "type": "array",
                "description": "Related parties collection",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "calendar": {
                "type": "array",
                "description": "Collection of calendar items",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_MVO"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of place objects",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_MVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "description": "Collection of site siteRelationships",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_MVO"
                }
              },
              "siteCategory": {
                "type": "string",
                "description": "Site classification/category.",
                "example": "ShoppingUnit"
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact information",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                }
              },
              "siteFeature": {
                "type": "array",
                "description": "Collection of site features",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteFeature_MVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSubAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddress": "#/components/schemas/GeographicSubAddress"
          }
        }
      },
      "GeographicSubAddressUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddressUnit": "#/components/schemas/GeographicSubAddressUnit"
          }
        }
      },
      "GeographicSubAddressUnit_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            },
            "required": [
              "subUnitNumber",
              "subUnitType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddressUnit": "#/components/schemas/GeographicSubAddressUnit_FVO"
          }
        }
      },
      "GeographicSubAddressUnit_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddressUnit": "#/components/schemas/GeographicSubAddressUnit_MVO"
          }
        }
      },
      "GeographicSubAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_FVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddress": "#/components/schemas/GeographicSubAddress_FVO"
          }
        }
      },
      "GeographicSubAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_MVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicSubAddress": "#/components/schemas/GeographicSubAddress_MVO"
          }
        }
      },
      "HourPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "HourPeriod": "#/components/schemas/HourPeriod"
          }
        }
      },
      "HourPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "HourPeriod": "#/components/schemas/HourPeriod_MVO"
          }
        }
      },
      "LineString": {
        "type": "object",
        "description": "GeoJSON: A collection of Points forming a connected line",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        }
      },
      "LineString_FVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Points forming a connected line",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "LineString_MVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Points forming a connected line",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        }
      },
      "MultiLineString": {
        "type": "object",
        "description": "GeoJSON: A collection of distinct LineStrings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiLineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        }
      },
      "MultiLineString_FVO": {
        "type": "object",
        "description": "GeoJSON: A collection of distinct LineStrings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiLineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "MultiLineString_MVO": {
        "type": "object",
        "description": "GeoJSON: A collection of distinct LineStrings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiLineString"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/lineString"
          }
        }
      },
      "MultiPoint": {
        "type": "object",
        "description": "GeoJSON: A collection of Points",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPoint"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/positionArray"
          }
        }
      },
      "MultiPoint_FVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Points",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPoint"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/positionArray"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "MultiPoint_MVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Points",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPoint"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/positionArray"
          }
        }
      },
      "MultiPolygon": {
        "type": "object",
        "description": "GeoJSON: A collection of Polygons",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPolygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/multiPolygon"
          }
        }
      },
      "MultiPolygon_FVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Polygons",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPolygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/multiPolygon"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "MultiPolygon_MVO": {
        "type": "object",
        "description": "GeoJSON: A collection of Polygons",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPolygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/multiPolygon"
          }
        }
      },
      "Note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": "afa9-3d90aaa8da0f"
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Note": "#/components/schemas/Note"
          }
        }
      },
      "Note_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Note": "#/components/schemas/Note_MVO"
          }
        }
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef"
          }
        }
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef"
          }
        }
      },
      "PartyRefOrPartyRoleRef_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_MVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO"
          }
        }
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_MVO"
          }
        }
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleRef": "#/components/schemas/PartyRoleRef"
          }
        }
      },
      "PartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO"
          }
        }
      },
      "Place": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Place reference.",
            "properties": {
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Place": "#/components/schemas/Place",
            "GeographicLocation": "#/components/schemas/GeographicLocation",
            "GeographicAddress": "#/components/schemas/GeographicAddress",
            "GeographicSite": "#/components/schemas/GeographicSite",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString"
          }
        }
      },
      "PlaceRef": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PlaceRef": "#/components/schemas/PlaceRef"
          }
        }
      },
      "PlaceRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicSite"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress"
          },
          {
            "$ref": "#/components/schemas/PlaceRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation",
            "GeographicSite": "#/components/schemas/GeographicSite",
            "GeographicAddress": "#/components/schemas/GeographicAddress",
            "PlaceRef": "#/components/schemas/PlaceRef",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString"
          }
        }
      },
      "PlaceRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_FVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation_FVO",
            "GeographicSite": "#/components/schemas/GeographicSite_FVO",
            "GeographicAddress": "#/components/schemas/GeographicAddress_FVO",
            "PlaceRef": "#/components/schemas/PlaceRef",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_FVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_FVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_FVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_FVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_FVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_FVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_FVO"
          }
        }
      },
      "PlaceRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_MVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicLocation": "#/components/schemas/GeographicLocation_MVO",
            "GeographicSite": "#/components/schemas/GeographicSite_MVO",
            "GeographicAddress": "#/components/schemas/GeographicAddress_MVO",
            "PlaceRef": "#/components/schemas/PlaceRef_MVO",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_MVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_MVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_MVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_MVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_MVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_MVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_MVO"
          }
        }
      },
      "PlaceRef_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PlaceRef": "#/components/schemas/PlaceRef_MVO"
          }
        }
      },
      "Place_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Place reference.",
            "properties": {
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Place": "#/components/schemas/Place_FVO",
            "GeographicLocation": "#/components/schemas/GeographicLocation_FVO",
            "GeographicAddress": "#/components/schemas/GeographicAddress_FVO",
            "GeographicSite": "#/components/schemas/GeographicSite_FVO",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_FVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_FVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_FVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_FVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_FVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_FVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_FVO"
          }
        }
      },
      "Place_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Place reference.",
            "properties": {
              "externalIdentifier": {
                "type": "array",
                "description": "Collection of external identifiers",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Place": "#/components/schemas/Place_MVO",
            "GeographicLocation": "#/components/schemas/GeographicLocation_MVO",
            "GeographicAddress": "#/components/schemas/GeographicAddress_MVO",
            "GeographicSite": "#/components/schemas/GeographicSite_MVO",
            "AlternateGeographicAddressValidation": "#/components/schemas/AlternateGeographicAddressValidation_MVO",
            "GeoJsonPolygon": "#/components/schemas/GeoJsonPolygon_MVO",
            "GeoJsonPoint": "#/components/schemas/GeoJsonPoint_MVO",
            "GeoJsonMultiPolygon": "#/components/schemas/GeoJsonMultiPolygon_MVO",
            "GeoJsonMultiPoint": "#/components/schemas/GeoJsonMultiPoint_MVO",
            "GeoJsonMultiLineString": "#/components/schemas/GeoJsonMultiLineString_MVO",
            "GeoJsonLineString": "#/components/schemas/GeoJsonLineString_MVO"
          }
        }
      },
      "Point": {
        "type": "object",
        "description": "GeoJSON: A single position",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/position"
          }
        }
      },
      "Point_FVO": {
        "type": "object",
        "description": "GeoJSON: A single position",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/position"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "Point_MVO": {
        "type": "object",
        "description": "GeoJSON: A single position",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/position"
          }
        }
      },
      "PolicyRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef"
          }
        }
      },
      "PolicyRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef_FVO"
          }
        }
      },
      "PolicyRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef_MVO"
          }
        }
      },
      "Polygon": {
        "type": "object",
        "description": "GeoJSON: An array of linear rings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Polygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/polygon"
          }
        }
      },
      "Polygon_FVO": {
        "type": "object",
        "description": "GeoJSON: An array of linear rings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Polygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/polygon"
          }
        },
        "required": [
          "type",
          "coordinates"
        ]
      },
      "Polygon_MVO": {
        "type": "object",
        "description": "GeoJSON: An array of linear rings",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Polygon"
            ]
          },
          "coordinates": {
            "$ref": "#/components/schemas/polygon"
          }
        }
      },
      "Quantity": {
        "type": "object",
        "description": "An amount in a given unit",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "default": 1,
            "description": "Numeric value in a given unit"
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef_MVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
          }
        }
      },
      "StandardIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "StandardIdentifier": "#/components/schemas/StandardIdentifier"
          }
        }
      },
      "StandardIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "StandardIdentifier": "#/components/schemas/StandardIdentifier_MVO"
          }
        }
      },
      "TaskStateType": {
        "enum": [
          "acknowledged",
          "rejected",
          "inProgress",
          "cancelled",
          "done",
          "terminatedWithError"
        ],
        "type": "string",
        "description": "Possible values for the state of a task"
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "bbox": {
        "items": {
          "type": "number"
        },
        "minItems": 4,
        "type": "array",
        "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry"
      },
      "lineString": {
        "items": {
          "$ref": "#/components/schemas/position"
        },
        "minItems": 2,
        "type": "array",
        "description": "GeoJSON: An array of two or more positions"
      },
      "linearRing": {
        "items": {
          "$ref": "#/components/schemas/position"
        },
        "minItems": 4,
        "type": "array",
        "description": "GeoJSON: An array of four or more positions where the first equals the last"
      },
      "multiLineString": {
        "items": {
          "$ref": "#/components/schemas/lineString"
        },
        "minItems": 1,
        "type": "array",
        "description": "GeoJSON: One or more lines"
      },
      "multiPolygon": {
        "items": {
          "$ref": "#/components/schemas/polygon"
        },
        "minItems": 1,
        "type": "array",
        "description": "GeoJSON: An array of polygons"
      },
      "polygon": {
        "items": {
          "$ref": "#/components/schemas/linearRing"
        },
        "minItems": 1,
        "type": "array",
        "description": "GeoJSON: An array of linear rings"
      },
      "position": {
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "type": "array",
        "description": "GeoJSON: A single position"
      },
      "positionArray": {
        "items": {
          "$ref": "#/components/schemas/position"
        },
        "type": "array",
        "description": "GeoJSON: An array of positions"
      },
      "Error": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Error": "#/components/schemas/Error"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      }
    },
    "parameters": {
      "Id": {
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "in": "path",
        "description": "Identifier of the Resource"
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "Comma-separated properties to be provided in response",
        "schema": {
          "type": "string"
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "description": "Requested index for start of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Requested number of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      },
      "GeographicAddressId": {
        "name": "geographicAddressId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "in": "path",
        "description": "Identifier of the GeographicAddress Resource"
      }
    },
    "requestBodies": {
      "GeographicAddressValidation_FVO": {
        "description": "The GeographicAddressValidation to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation_FVO"
            },
            "examples": {
              "GeographicAddressValidationCreate": {
                "$ref": "#/components/examples/GeographicAddressValidationCreate_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddressValidationStateChangeEvent": {
        "description": "GeographicAddressValidation stateChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidationStateChangeEvent"
            },
            "examples": {
              "StateChange07": {
                "$ref": "#/components/examples/StateChange07_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddress_FVO": {
        "description": "The GeographicAddress to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress_FVO"
            },
            "examples": {
              "GeographicAddressCreate": {
                "$ref": "#/components/examples/GeographicAddressCreate_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddress_MVO": {
        "description": "The GeographicAddress to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress_MVO"
            },
            "examples": {
              "GeographicAddressPartialUpdate01": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate01_request"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "GeographicAddressPartialUpdate02": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate02_request"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "GeographicAddressPartialUpdate03": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate03_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddressCreateEvent": {
        "description": "GeographicAddress Create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressCreateEvent"
            },
            "examples": {
              "Create": {
                "$ref": "#/components/examples/Create_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddressAttributeValueChangeEvent": {
        "description": "GeographicAddress attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressAttributeValueChangeEvent"
            },
            "examples": {
              "AttributeValueChange": {
                "$ref": "#/components/examples/AttributeValueChange_request"
              }
            }
          }
        },
        "required": true
      },
      "GeographicAddressDeleteEvent": {
        "description": "GeographicAddress delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressDeleteEvent"
            },
            "examples": {
              "Delete": {
                "$ref": "#/components/examples/Delete_request"
              }
            }
          }
        },
        "required": true
      },
      "Hub_FVO": {
        "description": "Data containing the callback endpoint to deliver the information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub_FVO"
            },
            "examples": {
              "Basic Hub Example Request": {
                "value": {
                  "callback": "https://host/tmf-api/specificAPIName/v5/listener/specificEventListener  ",
                  "query": "data"
                }
              }
            }
          }
        },
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "202": {
        "description": "Accepted"
      },
      "204": {
        "description": "Deleted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Bad Request Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR400",
                  "reason": "Bad Request",
                  "message": "The server could not understand the request due to invalid syntax. Please correct the syntax and try again.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Unauthorized Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR401",
                  "reason": "Unauthorized",
                  "message": "You are not authorized to access the requested resource. Please provide the correct credentials.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Forbidden Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR403",
                  "reason": "Forbidden",
                  "message": "You don't have the permission to access the requested resource. It is either read-protected or not readable by the server.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Not Found Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR404",
                  "reason": "Not Found",
                  "message": "The requested URL was not found on the server.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "405": {
        "description": "Method Not allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Method Not allowed Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR405",
                  "reason": "Method Not allowed",
                  "message": "The method is not allowed for the requested URL.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Conflict Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR409",
                  "reason": "Conflict",
                  "message": "The request could not be completed due to a conflict with the current state of the target resource.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Internal Server Error example",
                "value": {
                  "@type": "Error",
                  "code": "ERR500",
                  "reason": "Internal Server Error",
                  "message": "The server encountered an internal error. Please contact the system administrator.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Not Implemented Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR501",
                  "reason": "The requested operation is not implemented",
                  "message": "The requested operation is not implemented. Please contact the system administrator.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Service Unavailable Error",
                "value": {
                  "@type": "Error",
                  "code": "ERR503",
                  "reason": "Service Unavailable",
                  "message": "The service is currently unavailable. Please try again later.",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "200GeographicAddressValidation_Task": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            }
          }
        }
      },
      "200GeographicAddressValidationArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddressValidation"
              }
            },
            "examples": {
              "GeographicAddressValidationDone": {
                "$ref": "#/components/examples/GeographicAddressValidationDone_response"
              }
            }
          }
        }
      },
      "200GeographicAddressValidation_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            },
            "examples": {
              "GeographicAddressValidationSuccess": {
                "$ref": "#/components/examples/GeographicAddressValidationSuccess_response"
              },
              "GeographicAddressValidationFail": {
                "$ref": "#/components/examples/GeographicAddressValidationFail_response"
              },
              "GeographicAddressValidationPartial": {
                "$ref": "#/components/examples/GeographicAddressValidationPartial_response"
              }
            }
          }
        }
      },
      "200GeographicAddressValidation_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicAddressValidation"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicAddressValidation"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicAddressValidation"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicAddressValidation"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "201GeographicAddressValidation": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            },
            "examples": {
              "GeographicAddressValidationCreate": {
                "$ref": "#/components/examples/GeographicAddressValidationCreate_response"
              }
            }
          }
        }
      },
      "200GeographicAddressArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddress"
              }
            },
            "examples": {
              "GeographicAddressList": {
                "$ref": "#/components/examples/GeographicAddressList_response"
              }
            }
          }
        }
      },
      "200GeographicAddress_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress"
            },
            "examples": {
              "GeographicAddressRetrieve": {
                "$ref": "#/components/examples/GeographicAddressRetrieve_response"
              }
            }
          }
        }
      },
      "200GeographicAddress_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress"
            },
            "examples": {
              "GeographicAddressPartialUpdate01": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate01_response"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicAddress"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "GeographicAddressPartialUpdate02": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate02_response"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicAddress"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "GeographicAddressPartialUpdate03": {
                "$ref": "#/components/examples/GeographicAddressPartialUpdate03_response"
              }
            }
          }
        }
      },
      "201GeographicAddress": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicAddress"
            },
            "examples": {
              "GeographicAddressCreate": {
                "$ref": "#/components/examples/GeographicAddressCreate_response"
              }
            }
          }
        }
      },
      "200GeographicSubAddressArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicSubAddress"
              }
            },
            "examples": {
              "GeographicSubAddressList": {
                "$ref": "#/components/examples/GeographicSubAddressList_response"
              }
            }
          }
        }
      },
      "200GeographicSubAddress_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicSubAddress"
            },
            "examples": {
              "GeographicSubAddressRetrieve": {
                "$ref": "#/components/examples/GeographicSubAddressRetrieve_response"
              }
            }
          }
        }
      },
      "200GeographicSubAddress_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicSubAddress"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicSubAddress"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicSubAddress"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeographicSubAddress"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "201GeographicSubAddress": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeographicSubAddress"
            }
          }
        }
      },
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "basic": {
                "summary": "Error example",
                "value": {
                  "@type": "Error",
                  "code": "ERR001",
                  "reason": "Missing information",
                  "message": "Please provide the additional example information",
                  "referenceError": "https://host/errors"
                }
              }
            }
          }
        }
      },
      "Hub": {
        "description": "Notified",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub"
            },
            "examples": {
              "basic": {
                "summary": "Hub example",
                "value": {
                  "@type": "Hub",
                  "callback": "https://host/tmf-api/specificAPIName/v5/listener/specificEventListener"
                }
              }
            }
          }
        }
      }
    },
    "headers": {
      "X-Total-Count": {
        "description": "Total number of items matching criteria",
        "schema": {
          "type": "integer"
        }
      },
      "X-Result-Count": {
        "description": "Actual number of items returned in the response body",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {},
    "examples": {
      "GeographicAddressValidationSuccess_response": {
        "value": {
          "id": "33173014-fc84-4e7b-8ccf-3e900c0a9917",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/33173014-fc84-4e7b-8ccf-3e900c0a9917",
          "provideAlternative": true,
          "state": "done",
          "validationDate": "2012-07-09T19:22:09.1440844Z",
          "validationResult": "success",
          "submittedGeographicAddress": {
            "streetNr": "151",
            "streetName": "Landgrabenweg",
            "city": "Bonn",
            "country": "Germany",
            "@type": "GeographicAddress"
          },
          "validGeographicAddress": {
            "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
            "streetNr": "151",
            "streetNrSuffix": "Erstbau",
            "streetName": "Landgrabenweg",
            "streetType": "road",
            "postcode": "53227",
            "locality": "Beuel",
            "city": "Bonn",
            "stateOrProvince": "NRW",
            "country": "Germany",
            "geographicLocation": {
              "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
              "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
              "@type": "GeoJsonPoint"
            },
            "@type": "GeographicAddress"
          },
          "@type": "GeographicAddressValidation"
        },
        "description": "Here's an example of a request for retrieving a geographicAddressValidation resource with a success result – only validGeographicAddress information are presents"
      },
      "GeographicAddressValidationFail_response": {
        "value": {
          "id": "21956612-5f4a-40a8-96ae-2e9d30936ed9",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/21956612-5f4a-40a8-96ae-2e9d30936ed9",
          "provideAlternative": false,
          "state": "done",
          "validationDate": "2012-07-09T19:22:09.1440844Z",
          "validationResult": "fail",
          "submittedGeographicAddress": {
            "streetNr": "151",
            "streetName": "Landgrabenweg",
            "city": "Bonn",
            "country": "Germany",
            "@type": "GeographicAddress"
          },
          "@type": "GeographicAddressValidation"
        },
        "description": "Here's an example of a request for retrieving a GeographicAddressValidation resource with a fail result and provideAlternative flag set to no"
      },
      "GeographicAddressValidationPartial_response": {
        "value": {
          "id": "33b50501-fc52-438d-96d8-6d03b23bbeb2",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/33b50501-fc52-438d-96d8-6d03b23bbeb2",
          "provideAlternative": true,
          "state": "done",
          "validationDate": "2012-07-09T19:22:09.1440844Z",
          "validationResult": "partial",
          "submittedGeographicAddress": {
            "streetNr": "151",
            "streetName": "Landgrabenweg",
            "city": "Bonn",
            "country": "Germany",
            "@type": "GeographicAddress"
          },
          "alternateGeographicAddress": [
            {
              "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "streetNr": "151",
              "streetNrSuffix": "Erstbau",
              "streetName": "Landgrabenweg",
              "streetType": "road",
              "postcode": "53227",
              "locality": "Beuel",
              "city": "Bonn",
              "stateOrProvince": "NRW",
              "country": "Germany",
              "geographicLocation": {
                "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                "@type": "GeoJsonPoint"
              },
              "similarityScore": 80,
              "matchinRule": "FuzzyRule",
              "matchingDegree": "high",
              "@type": "AlternateGeographicAddress"
            }
          ],
          "@type": "GeographicAddressValidation"
        },
        "description": "Here's an example of a request for retrieving a GeographicAddressValidation resource with a partial result"
      },
      "GeographicAddressValidationDone_response": {
        "value": [
          {
            "id": "33173014-fc84-4e7b-8ccf-3e900c0a9917",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/33173014-fc84-4e7b-8ccf-3e900c0a9917",
            "provideAlternative": true,
            "state": "done",
            "validationDate": "2012-07-09T19:22:09.1440844Z",
            "validationResult": "success",
            "submittedGeographicAddress": {
              "streetNr": "151",
              "streetName": "Landgrabenweg",
              "city": "Bonn",
              "country": "Germany",
              "@type": "GeographicAddress"
            },
            "validGeographicAddress": {
              "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "streetNr": "151",
              "streetNrSuffix": "Erstbau",
              "streetName": "Landgrabenweg",
              "streetType": "road",
              "postcode": "53227",
              "locality": "Beuel",
              "city": "Bonn",
              "stateOrProvince": "NRW",
              "country": "Germany",
              "geographicLocation": {
                "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                "@type": "GeoJsonPoint"
              },
              "@type": "GeographicAddress"
            },
            "@type": "GeographicAddressValidation"
          },
          {
            "id": "21956612-5f4a-40a8-96ae-2e9d30936ed9",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/21956612-5f4a-40a8-96ae-2e9d30936ed9",
            "provideAlternative": false,
            "state": "done",
            "validationDate": "2012-07-09T19:22:09.1440844Z",
            "validationResult": "fail",
            "submittedGeographicAddress": {
              "streetNr": "151",
              "streetName": "Landgrabenweg",
              "city": "Bonn",
              "country": "Germany",
              "@type": "GeographicAddress"
            },
            "@type": "GeographicAddressValidation"
          },
          {
            "id": "33b50501-fc52-438d-96d8-6d03b23bbeb2",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/33b50501-fc52-438d-96d8-6d03b23bbeb2",
            "provideAlternative": true,
            "state": "done",
            "validationDate": "2012-07-09T19:22:09.1440844Z",
            "validationResult": "success",
            "submittedGeographicAddress": {
              "streetNr": "151",
              "streetName": "Landgrabenweg",
              "city": "Bonn",
              "country": "Germany",
              "@type": "GeographicAddress"
            },
            "alternateGeographicAddress": [
              {
                "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
                "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
                "streetNr": "151",
                "streetNrSuffix": "Erstbau",
                "streetName": "Landgrabenweg",
                "streetType": "road",
                "postcode": "53227",
                "locality": "Beuel",
                "city": "Bonn",
                "stateOrProvince": "NRW",
                "country": "Germany",
                "geographicLocation": {
                  "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                  "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                  "@type": "GeoJsonPoint"
                },
                "similarityScore": 50,
                "matchinRule": "FuzzyRule",
                "matchingDegree": "medium",
                "@type": "AlternateGeographicAddress"
              }
            ],
            "@type": "GeographicAddressValidation"
          }
        ],
        "description": "Here's an example of a request for retrieving a GeographicAddressValidation list                  "
      },
      "GeographicAddressList_response": {
        "value": [
          {
            "id": "f9a64ffe-845d-4c5d-8618-910d2c56004e",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/f9a64ffe-845d-4c5d-8618-910d2c56004e",
            "streetNr": "1",
            "streetName": "UnterDenLinden",
            "city": "Berlin",
            "country": "Germany",
            "postcode": "10117",
            "@type": "GeographicAddress",
            "geographicLocation": {
              "id": "d61505c5-0edb-4539-b1bc-2ba06a308c21",
              "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/d61505c5-0edb-4539-b1bc-2ba06a308c21",
              "@type": "GeoJsonPoint"
            },
            "countryCode": [
              {
                "format": "ISO 3166-1 Alpha-2",
                "value": "DE",
                "@type": "StandardIdentifier"
              }
            ],
            "externalIdentifier": [
              {
                "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
                "owner": "Master-SBS",
                "externalIdentifierType": "GeographicAddress",
                "@type": "ExternalIdentifier"
              }
            ],
            "geographicAddressType": "residential"
          },
          {
            "id": "62a13770-b897-4b12-9b86-d05aa6f9b0c7",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/62a13770-b897-4b12-9b86-d05aa6f9b0c7",
            "streetNr": "3",
            "streetName": "UnterDenLinden",
            "city": "Berlin",
            "country": "Germany",
            "postcode": "10117",
            "@type": "GeographicAddress",
            "geographicLocation": {
              "id": "d94a469c-12f3-425c-afa7-17165b704c70",
              "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/d94a469c-12f3-425c-afa7-17165b704c70",
              "@type": "GeoJsonPoint"
            },
            "countryCode": [
              {
                "format": "ISO 3166-1 Alpha-2",
                "value": "DE",
                "@type": "StandardIdentifier"
              }
            ],
            "externalIdentifier": [
              {
                "id": "bb66f723-f55b-4035-a938-9be6f66f660c",
                "owner": "Master-SBS",
                "externalIdentifierType": "GeographicAddress",
                "@type": "ExternalIdentifier"
              }
            ],
            "geographicAddressType": "residential"
          }
        ],
        "description": "Here's an example of a response for retrieving Geograhic Address Resources"
      },
      "GeographicAddressRetrieve_response": {
        "value": {
          "id": "4c6b6fc1-d954-4ad6-adf6-59c275afb541",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541",
          "streetNr": "151",
          "streetNrSuffix": "Erstbau",
          "streetName": "Landgrabenweg",
          "streetType": "road",
          "postcode": "53227",
          "locality": "Beuel",
          "city": "Bonn",
          "stateOrProvince": "NRW",
          "country": "Germany",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeoJsonPoint"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "DE",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "geographicSubAddress": [
            {
              "id": "20901d24-f20e-4391-8db8-57757380c9eb",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541/geographicSubAddress/20901d24-f20e-4391-8db8-57757380c9eb",
              "levelNumber": "0",
              "levelType": "floor",
              "subAddressType": "subUnit",
              "subUnit": [
                {
                  "subUnitNumber": "1",
                  "subUnitType": "SHOP",
                  "@type": "GeographicSubAddressUnit"
                }
              ],
              "@type": "GeographicSubAddress"
            }
          ],
          "@type": "GeographicAddress"
        },
        "description": "Here's an example for retrieving a Geographic Address resource for ID 4c6b6fc1-d954-4ad6-adf6-59c275afb541"
      },
      "GeographicSubAddressList_response": {
        "value": [
          {
            "id": "1d40b27b-c32f-42e8-b473-eb71edff466b",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/f019f4e5-7431-44dc-94d6-97e9a881fe79/geographicSubAddress/1d40b27b-c32f-42e8-b473-eb71edff466b",
            "levelNumber": "0",
            "levelType": "floor",
            "subAddressType": "floor",
            "subUnit": [
              {
                "subUnitNumber": "1",
                "subUnitType": "Rack",
                "@type": "GeographicSubAddressUnit"
              },
              {
                "subUnitNumber": "2",
                "subUnitType": "Rack",
                "@type": "GeographicSubAddressUnit"
              }
            ],
            "@type": "GeographicSubAddress"
          },
          {
            "id": "fbce45b8-f49b-4cac-ac3a-7e44f4953bcd",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/f019f4e5-7431-44dc-94d6-97e9a881fe79/geographicSubAddress/fbce45b8-f49b-4cac-ac3a-7e44f4953bcd",
            "levelNumber": "1",
            "levelType": "basement",
            "subAddressType": "subUnit",
            "subUnit": [
              {
                "subUnitNumber": "1",
                "subUnitType": "shelf",
                "@type": "GeographicSubAddressUnit"
              },
              {
                "subUnitNumber": "2",
                "subUnitType": "shelf",
                "@type": "GeographicSubAddressUnit"
              }
            ],
            "@type": "GeographicSubAddress"
          },
          {
            "id": "5e98b484-c29e-41c6-9fd0-a5fe66be1667",
            "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/f019f4e5-7431-44dc-94d6-97e9a881fe79/geographicSubAddress/5e98b484-c29e-41c6-9fd0-a5fe66be1667",
            "privateStreetName": "Sackgasse",
            "privateStreetNumber": "A",
            "@type": "GeographicSubAddress"
          }
        ],
        "description": "Here's an example for retrieving a subaddresses"
      },
      "GeographicSubAddressRetrieve_response": {
        "value": {
          "id": "1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/f019f4e5-7431-44dc-94d6-97e9a881fe79/geographicSubAddress/1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
          "name": "EastGate Shopping Center",
          "buildingName": "EastGate",
          "levelType": "floor",
          "levelNumber": "3",
          "privateStreetName": "Queen St",
          "privateStreetNumber": "1",
          "subAddressType": "subUnit",
          "subUnitType": "shop",
          "subUnitNumber": "239",
          "@type": "GeographicSubAddress"
        },
        "description": "Here's an example for retrieving an address resource"
      },
      "GeographicAddressValidationCreate_request": {
        "value": {
          "provideAlternative": true,
          "submittedGeographicAddress": {
            "streetNr": "151",
            "streetName": "Landgrabenweg",
            "city": "Bonn",
            "country": "Germany",
            "@type": "GeographicAddress"
          },
          "@type": "GeographicAddressValidation"
        },
        "description": "POST GeographicAddressValidation request example"
      },
      "GeographicAddressValidationCreate_response": {
        "value": {
          "id": "5a897fc3-c269-4fe8-98fe-611b4ce9c3b8",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/5a897fc3-c269-4fe8-98fe-611b4ce9c3b8",
          "provideAlternative": true,
          "state": "done",
          "validationDate": "2012-07-09T19:22:09.1440844Z",
          "validationResult": "partial",
          "submittedGeographicAddress": {
            "streetNr": "151",
            "streetName": "Landgrabenweg",
            "city": "Bonn",
            "country": "Germany",
            "@type": "GeographicAddress"
          },
          "alternateGeographicAddress": [
            {
              "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
              "streetNr": "151",
              "streetNrSuffix": "Erstbau",
              "streetName": "Landgrabenweg",
              "streetType": "road",
              "postcode": "53227",
              "locality": "Beuel",
              "city": "Bonn",
              "stateOrProvince": "NRW",
              "country": "Germany",
              "geographicLocation": {
                "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                "@type": "GeoJsonPoint"
              },
              "similarityScore": 80,
              "matchinRule": "FuzzyRule",
              "matchingDegree": "high",
              "@type": "AlternateGeographicAddress"
            }
          ],
          "@type": "GeographicAddressValidation"
        },
        "description": "POST GeographicAddressValidation response example."
      },
      "GeographicAddressCreate_request": {
        "value": {
          "streetNr": "2",
          "streetNrSuffix": "B",
          "streetName": " Libertatii",
          "streetType": "Strada",
          "postcode": "100283",
          "locality": "Ploiesti",
          "city": "Ploiesti",
          "stateOrProvince": "Prahova",
          "country": "Romania",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeographicLocation"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "RO",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            },
            {
              "id": "b3444353-14d5-4cf5-acea-bba60964fcfd",
              "owner": "Secondary-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "@type": "GeographicAddress"
        },
        "description": "POST GeographicAddress request example - only a subset of attributes are used in this example"
      },
      "GeographicAddressCreate_response": {
        "value": {
          "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
          "streetNr": "2",
          "streetNrSuffix": "B",
          "streetName": " Libertatii",
          "streetType": "Strada",
          "postcode": "100283",
          "locality": "Ploiesti",
          "city": "Ploiesti",
          "stateOrProvince": "Prahova",
          "country": "Romania",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeographicLocation"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "RO",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            },
            {
              "id": "b3444353-14d5-4cf5-acea-bba60964fcfd",
              "owner": "Secondary-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "@type": "GeographicAddress"
        },
        "description": "POST Geographic Address response description."
      },
      "GeographicAddressPartialUpdate01_request": {
        "value": {
          "postcode": "999283",
          "@type": "GeographicAddress"
        },
        "description": "Here's an example of a request for updating a geographic address - set postcode to 999283. This example illustrating patch merge"
      },
      "GeographicAddressPartialUpdate01_response": {
        "value": {
          "id": "2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/2b8cea8f-642d-42e0-bdb2-6f47fabb3f07",
          "streetNr": "2",
          "streetNrSuffix": "B",
          "streetName": " Libertatii",
          "streetType": "Strada",
          "postcode": "999283",
          "locality": "Ploiesti",
          "city": "Ploiesti",
          "stateOrProvince": "Prahova",
          "country": "Romania",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeoJsonPoint"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "RO",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            },
            {
              "id": "b3444353-14d5-4cf5-acea-bba60964fcfd",
              "owner": "Secondary-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "@type": "GeographicAddress"
        },
        "description": "Response message"
      },
      "GeographicAddressPartialUpdate02_request": {
        "value": [
          {
            "op": "test",
            "path": "/postcode",
            "value": "999222"
          },
          {
            "op": "replace",
            "path": "/postcode",
            "value": "999283"
          }
        ],
        "description": "Here's an example of a request for updating a geographic address - set postcode to 999283. This example illustrating json-patch+json"
      },
      "GeographicAddressPartialUpdate02_response": {
        "value": {
          "id": "b5d591c5-1d5d-410b-acaf-ae388c0953aa",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/b5d591c5-1d5d-410b-acaf-ae388c0953aa",
          "streetNr": "2",
          "streetNrSuffix": "B",
          "streetName": " Libertatii",
          "streetType": "Strada",
          "postcode": "999283",
          "locality": "Ploiesti",
          "city": "Ploiesti",
          "stateOrProvince": "Prahova",
          "country": "Romania",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeoJsonPoint"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "RO",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            },
            {
              "id": "b3444353-14d5-4cf5-acea-bba60964fcfd",
              "owner": "Secondary-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "@type": "GeographicAddress"
        },
        "description": "Response message"
      },
      "GeographicAddressPartialUpdate03_request": {
        "value": [
          {
            "op": "test",
            "path": "$.postcode",
            "value": "999222"
          },
          {
            "op": "replace",
            "path": "$.postcode",
            "value": "999283"
          }
        ],
        "description": "Here's an example of a request for updating a geographic address - set postcode to 999283. This example illustrating json-patch-query+json"
      },
      "GeographicAddressPartialUpdate03_response": {
        "value": {
          "id": "81749e69-9e8a-4ad1-8c77-34a71b9bcf9c",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/81749e69-9e8a-4ad1-8c77-34a71b9bcf9c",
          "streetNr": "2",
          "streetNrSuffix": "B",
          "streetName": " Libertatii",
          "streetType": "Strada",
          "postcode": "999283",
          "locality": "Ploiesti",
          "city": "Ploiesti",
          "stateOrProvince": "Prahova",
          "country": "Romania",
          "geographicLocation": {
            "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
            "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
            "@type": "GeoJsonPoint"
          },
          "countryCode": [
            {
              "format": "ISO 3166-1 Alpha-2",
              "value": "RO",
              "@type": "StandardIdentifier"
            }
          ],
          "externalIdentifier": [
            {
              "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
              "owner": "Master-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            },
            {
              "id": "b3444353-14d5-4cf5-acea-bba60964fcfd",
              "owner": "Secondary-SBS",
              "externalIdentifierType": "GeographicAddress",
              "@type": "ExternalIdentifier"
            }
          ],
          "geographicAddressType": "residential",
          "@type": "GeographicAddress"
        },
        "description": "Response message"
      },
      "StateChange07_request": {
        "value": {
          "id": "33173014-fc84-4e7b-8ccf-3e900c0a9917",
          "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddressValidation/33173014-fc84-4e7b-8ccf-3e900c0a9917",
          "state": "done",
          "@type": "GeographicAddressValidation"
        },
        "description": "Message example for GeographicAddressValidationStateChangeEvent event"
      },
      "Create_request": {
        "value": {
          "correlationId": "b20d7f84-4fce",
          "description": "GeographicAddressCreateEvent illustration",
          "domain": "Commercial",
          "eventId": "44ae-9c3d-818a7727e876",
          "eventTime": "2023-02-22T11:20:57.341Z",
          "eventType": "GeographicAddressCreateEvent",
          "priority": "1",
          "timeOcurred": "2023-02-22T11:20:55.792Z",
          "title": "GeographicAddressCreateEvent",
          "event": {
            "geographicAddress": {
              "id": "4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "streetNr": "225",
              "streetNrSuffix": "B",
              "streetName": " Strathmore",
              "streetType": "Terrace",
              "postcode": "5004",
              "locality": "Brighton.",
              "city": "Brighton",
              "stateOrProvince": "SA",
              "country": "Australia",
              "countryCode": [
                {
                  "format": "ISO 3166-1 Alpha-2",
                  "value": "AU",
                  "@type": "StandardIdentifier"
                }
              ],
              "externalIdentifier": [
                {
                  "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
                  "owner": "ExternalSystem",
                  "externalIdentifierType": "GeographicAddress",
                  "@type": "ExternalIdentifier"
                }
              ],
              "geographicAddressType": "residential",
              "@type": "GeographicAddress",
              "geographicLocation": {
                "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                "name": "Nice Acropolis",
                "@type": "GeoJsonPoint"
              },
              "geographicSubAddress": [
                {
                  "id": "1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
                  "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541/geographicSubAddress/1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
                  "name": "Mimosas",
                  "subUnitType": "flat",
                  "subUnitNumber": "239",
                  "levelType": "floor",
                  "levelNumber": "3",
                  "buildingName": "Catalysts",
                  "@type": "GeographicSubAddress"
                },
                {
                  "id": "3c657185-e158-45b4-96f2-72a83eaffd46",
                  "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541/geographicSubAddress/3c657185-e158-45b4-96f2-72a83eaffd46",
                  "name": "Heaven",
                  "subUnitType": "flat",
                  "subUnitNumber": "007",
                  "levelType": "floor",
                  "levelNumber": "3",
                  "buildingName": "VIP area",
                  "@type": "GeographicSubAddress"
                }
              ]
            }
          },
          "reportingSystem": {
            "id": "7b697ba1-988b-46f1-bb38-424994c56cfa",
            "name": "APP-365",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "source": {
            "id": "8eab9f96-8173-4660-9dc9-64b0be63781d",
            "name": "APP-250",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "@baseType": "Event",
          "@type": "GeographicAddressCreateEvent"
        },
        "description": "Message example for GeographicAddressCreateEvent event"
      },
      "AttributeValueChange_request": {
        "value": {
          "correlationId": "10182509-654c",
          "description": "GeographicAddressAttributeValueChangeEvent illustration",
          "domain": "Commercial",
          "eventId": "4fe7-88d1-f6ce0aa8cde0",
          "eventTime": "2023-02-22T11:20:57.355Z",
          "eventType": "GeographicAddressAttributeValueChangeEvent",
          "priority": "3",
          "timeOcurred": "2023-02-22T11:20:52.833Z",
          "title": "GeographicAddressAttributeValueChangeEvent",
          "event": {
            "geographicAddress": {
              "id": "4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "streetNr": "225",
              "@type": "GeographicAddress"
            }
          },
          "reportingSystem": {
            "id": "1e1b2eb3-49e2-45a7-a069-8402e2688ff3",
            "name": "APP-365",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "source": {
            "id": "ee1bbeb6-2cb1-4123-9d30-826b349b00f8",
            "name": "APP-250",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "@baseType": "Event",
          "@type": "GeographicAddressAttributeValueChangeEvent"
        },
        "description": "Message example for GeographicAddressAttributeValueChangeEvent event"
      },
      "Delete_request": {
        "value": {
          "correlationId": "9863f9c1-064b",
          "description": "GeographicAddressDeleteEvent illustration",
          "domain": "Commercial",
          "eventId": "49a2-a7b4-543bcbcc3a27",
          "eventTime": "2023-02-22T11:20:57.373Z",
          "eventType": "GeographicAddressDeleteEvent",
          "priority": "4",
          "timeOcurred": "2023-02-22T11:20:53.297Z",
          "title": "GeographicAddressDeleteEvent",
          "event": {
            "geographicAddress": {
              "id": "4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541",
              "streetNr": "225",
              "streetNrSuffix": "B",
              "streetName": " Strathmore",
              "streetType": "Terrace",
              "postcode": "5004",
              "locality": "Brighton.",
              "city": "Brighton",
              "stateOrProvince": "SA",
              "country": "Australia",
              "countryCode": [
                {
                  "format": "ISO 3166-1 Alpha-2",
                  "value": "AU",
                  "@type": "StandardIdentifier"
                }
              ],
              "externalIdentifier": [
                {
                  "id": "df882733-6a5d-440a-9a91-d261ba6ac346",
                  "owner": "ExternalSystem",
                  "externalIdentifierType": "GeographicAddress",
                  "@type": "ExternalIdentifier"
                }
              ],
              "geographicAddressType": "residential",
              "@type": "GeographicAddress",
              "geographicLocation": {
                "id": "67301845-ee43-4984-ba3b-b4fba4b98872",
                "href": "https://host/tmf-api/geographicLocation/v5/geographicLocation/67301845-ee43-4984-ba3b-b4fba4b98872",
                "name": "Nice Acropolis",
                "@type": "GeoJsonPoint"
              },
              "geographicSubAddress": [
                {
                  "id": "1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
                  "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541/geographicSubAddress/1e58c8e7-6869-4c45-8af4-0fffbe8fc677",
                  "name": "Mimosas",
                  "subUnitType": "flat",
                  "subUnitNumber": "239",
                  "levelType": "floor",
                  "levelNumber": "3",
                  "buildingName": "Catalysts",
                  "@type": "GeographicSubAddress"
                },
                {
                  "id": "3c657185-e158-45b4-96f2-72a83eaffd46",
                  "href": "https://host/tmf-api/geographicAddressManagement/v5/geographicAddress/4c6b6fc1-d954-4ad6-adf6-59c275afb541/geographicSubAddress/3c657185-e158-45b4-96f2-72a83eaffd46",
                  "name": "Heaven",
                  "subUnitType": "flat",
                  "subUnitNumber": "007",
                  "levelType": "floor",
                  "levelNumber": "3",
                  "buildingName": "VIP area",
                  "@type": "GeographicSubAddress"
                }
              ]
            }
          },
          "reportingSystem": {
            "id": "ab7cdf06-40ad-4f0e-abb8-69ed8d4b0ba6",
            "name": "APP-365",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "source": {
            "id": "945a66e1-eb83-4742-bb20-8e13c5aa76e9",
            "name": "APP-250",
            "@type": "ReportingResource",
            "@referredType": "LogicalResource"
          },
          "@baseType": "Event",
          "@type": "GeographicAddressDeleteEvent"
        },
        "description": "Message example for GeographicAddressDeleteEvent event"
      }
    }
  }
}