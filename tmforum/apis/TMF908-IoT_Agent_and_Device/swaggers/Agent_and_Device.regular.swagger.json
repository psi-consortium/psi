{
    "swagger": "2.0",
    "info": {
        "title": "IoT Device Management",
        "description": "My api short documentation",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/iotdevicemanagement/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "iotDevice"
        },
        {
            "name": "dataAccessEndpoint"
        },
        {
            "name": "iotDeviceSpecification"
        },
        {
            "name": "iotDataEvent"
        },
        {
            "name": "iotManagementEvent"
        },
        {
            "name": "resourceSpecification"
        },
        {
            "name": "alarm"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/iotDevice": {
            "get": {
                "operationId": "listIotDevice",
                "summary": "List or find IotDevice objects",
                "description": "This operation list or find IotDevice entities",
                "tags": [
                    "iotDevice"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IotDevice"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createIotDevice",
                "summary": "Creates a IotDevice",
                "description": "This operation creates a IotDevice entity.",
                "tags": [
                    "iotDevice"
                ],
                "parameters": [
                    {
                        "name": "iotDevice",
                        "description": "The IotDevice to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IotDevice_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IotDevice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotDevice/{id}": {
            "get": {
                "operationId": "retrieveIotDevice",
                "summary": "Retrieves a IotDevice by ID",
                "description": "This operation retrieves a IotDevice entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "iotDevice"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDevice",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IotDevice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchIotDevice",
                "summary": "Updates partially a IotDevice",
                "description": "This operation updates partially a IotDevice entity.",
                "tags": [
                    "iotDevice"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDevice",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "iotDevice",
                        "description": "The IotDevice to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IotDevice_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/IotDevice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteIotDevice",
                "summary": "Deletes a IotDevice",
                "description": "This operation deletes a IotDevice entity.",
                "tags": [
                    "iotDevice"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDevice",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dataAccessEndpoint": {
            "get": {
                "operationId": "listDataAccessEndpoint",
                "summary": "List or find DataAccessEndpoint objects",
                "description": "This operation list or find DataAccessEndpoint entities",
                "tags": [
                    "dataAccessEndpoint"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DataAccessEndpoint"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dataAccessEndpoint/{id}": {
            "get": {
                "operationId": "retrieveDataAccessEndpoint",
                "summary": "Retrieves a DataAccessEndpoint by ID",
                "description": "This operation retrieves a DataAccessEndpoint entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "dataAccessEndpoint"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the DataAccessEndpoint",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DataAccessEndpoint"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotDeviceSpecification": {
            "get": {
                "operationId": "listIotDeviceSpecification",
                "summary": "List or find IotDeviceSpecification objects",
                "description": "This operation list or find IotDeviceSpecification entities",
                "tags": [
                    "iotDeviceSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IotDeviceSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createIotDeviceSpecification",
                "summary": "Creates a IotDeviceSpecification",
                "description": "This operation creates a IotDeviceSpecification entity.",
                "tags": [
                    "iotDeviceSpecification"
                ],
                "parameters": [
                    {
                        "name": "iotDeviceSpecification",
                        "description": "The IotDeviceSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotDeviceSpecification/{id}": {
            "get": {
                "operationId": "retrieveIotDeviceSpecification",
                "summary": "Retrieves a IotDeviceSpecification by ID",
                "description": "This operation retrieves a IotDeviceSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "iotDeviceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDeviceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchIotDeviceSpecification",
                "summary": "Updates partially a IotDeviceSpecification",
                "description": "This operation updates partially a IotDeviceSpecification entity.",
                "tags": [
                    "iotDeviceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDeviceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "iotDeviceSpecification",
                        "description": "The IotDeviceSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteIotDeviceSpecification",
                "summary": "Deletes a IotDeviceSpecification",
                "description": "This operation deletes a IotDeviceSpecification entity.",
                "tags": [
                    "iotDeviceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDeviceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotDataEvent": {
            "get": {
                "operationId": "listIotDataEvent",
                "summary": "List or find IotDataEvent objects",
                "description": "This operation list or find IotDataEvent entities",
                "tags": [
                    "iotDataEvent"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IotDataEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotDataEvent/{id}": {
            "get": {
                "operationId": "retrieveIotDataEvent",
                "summary": "Retrieves a IotDataEvent by ID",
                "description": "This operation retrieves a IotDataEvent entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "iotDataEvent"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotDataEvent",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IotDataEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotManagementEvent": {
            "get": {
                "operationId": "listIotManagementEvent",
                "summary": "List or find IotManagementEvent objects",
                "description": "This operation list or find IotManagementEvent entities",
                "tags": [
                    "iotManagementEvent"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IotManagementEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/iotManagementEvent/{id}": {
            "get": {
                "operationId": "retrieveIotManagementEvent",
                "summary": "Retrieves a IotManagementEvent by ID",
                "description": "This operation retrieves a IotManagementEvent entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "iotManagementEvent"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the IotManagementEvent",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IotManagementEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceSpecification": {
            "get": {
                "operationId": "listResourceSpecification",
                "summary": "List or find ResourceSpecification objects",
                "description": "This operation list or find ResourceSpecification entities",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createResourceSpecification",
                "summary": "Creates a ResourceSpecification",
                "description": "This operation creates a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "resourceSpecification",
                        "description": "The ResourceSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceSpecification/{id}": {
            "get": {
                "operationId": "retrieveResourceSpecification",
                "summary": "Retrieves a ResourceSpecification by ID",
                "description": "This operation retrieves a ResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchResourceSpecification",
                "summary": "Updates partially a ResourceSpecification",
                "description": "This operation updates partially a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "resourceSpecification",
                        "description": "The ResourceSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteResourceSpecification",
                "summary": "Deletes a ResourceSpecification",
                "description": "This operation deletes a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/alarm": {
            "get": {
                "operationId": "listAlarm",
                "summary": "List or find Alarm objects",
                "description": "This operation list or find Alarm entities",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alarm"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAlarm",
                "summary": "Creates a Alarm",
                "description": "This operation creates a Alarm entity.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "alarm",
                        "description": "The Alarm to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alarm_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/alarm/{id}": {
            "get": {
                "operationId": "retrieveAlarm",
                "summary": "Retrieves a Alarm by ID",
                "description": "This operation retrieves a Alarm entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Alarm",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAlarm",
                "summary": "Updates partially a Alarm",
                "description": "This operation updates partially a Alarm entity.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Alarm",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "alarm",
                        "description": "The Alarm to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alarm_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceCreateEvent": {
            "post": {
                "operationId": "listenToIotDeviceCreateEvent",
                "summary": "Client listener for entity IotDeviceCreateEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceChangeEvent": {
            "post": {
                "operationId": "listenToIotDeviceChangeEvent",
                "summary": "Client listener for entity IotDeviceChangeEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceBatchEvent": {
            "post": {
                "operationId": "listenToIotDeviceBatchEvent",
                "summary": "Client listener for entity IotDeviceBatchEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceBatchEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceBatchEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceDeleteEvent": {
            "post": {
                "operationId": "listenToIotDeviceDeleteEvent",
                "summary": "Client listener for entity IotDeviceDeleteEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceHeartBeatEvent": {
            "post": {
                "operationId": "listenToIotDeviceHeartBeatEvent",
                "summary": "Client listener for entity IotDeviceHeartBeatEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceHeartBeatEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceHeartBeatEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceStateChangeEvent": {
            "post": {
                "operationId": "listenToIotDeviceStateChangeEvent",
                "summary": "Client listener for entity IotDeviceStateChangeEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToIotDeviceSpecificationCreateEvent",
                "summary": "Client listener for entity IotDeviceSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceSpecificationChangeEvent": {
            "post": {
                "operationId": "listenToIotDeviceSpecificationChangeEvent",
                "summary": "Client listener for entity IotDeviceSpecificationChangeEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceSpecificationChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecificationChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceSpecificationBatchEvent": {
            "post": {
                "operationId": "listenToIotDeviceSpecificationBatchEvent",
                "summary": "Client listener for entity IotDeviceSpecificationBatchEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceSpecificationBatchEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecificationBatchEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/iotDeviceSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToIotDeviceSpecificationDeleteEvent",
                "summary": "Client listener for entity IotDeviceSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification IotDeviceSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IotDeviceSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationCreateEvent",
                "summary": "Client listener for entity ResourceSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationChangeEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationChangeEvent",
                "summary": "Client listener for entity ResourceSpecificationChangeEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationBatchEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationBatchEvent",
                "summary": "Client listener for entity ResourceSpecificationBatchEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationBatchEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationBatchEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationDeleteEvent",
                "summary": "Client listener for entity ResourceSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmCreateEvent": {
            "post": {
                "operationId": "listenToAlarmCreateEvent",
                "summary": "Client listener for entity AlarmCreateEvent",
                "description": "Example of a client listener for receiving the notification AlarmCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmChangeEvent": {
            "post": {
                "operationId": "listenToAlarmChangeEvent",
                "summary": "Client listener for entity AlarmChangeEvent",
                "description": "Example of a client listener for receiving the notification AlarmChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmDeleteEvent": {
            "post": {
                "operationId": "listenToAlarmDeleteEvent",
                "summary": "Client listener for entity AlarmDeleteEvent",
                "description": "Example of a client listener for receiving the notification AlarmDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Address": {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often\ndefined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City that the address is in"
                },
                "country": {
                    "type": "string",
                    "description": "Country that the address is in"
                },
                "locality": {
                    "type": "string",
                    "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET]"
                },
                "postcode": {
                    "type": "string",
                    "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "the State or Province that the address is in"
                },
                "streetName": {
                    "type": "string",
                    "description": "Name of the street or other street type"
                },
                "streetNr": {
                    "type": "string",
                    "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
                },
                "streetNrLast": {
                    "type": "string",
                    "description": "Last number in a range of street numbers allocated to a property"
                },
                "streetNrLastSuffix": {
                    "type": "string",
                    "description": "Last street number suffix for a ranged address"
                },
                "streetNrSuffix": {
                    "type": "string",
                    "description": "the first street number suffix"
                },
                "streetSuffix": {
                    "type": "string",
                    "description": "A modifier denoting a relative direction"
                },
                "streetType": {
                    "type": "string",
                    "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
                },
                "subAddress": {
                    "$ref": "#/definitions/SubAddress",
                    "description": "Within a property in an urban area, may refer to a building, building cluster, or a floor of a multistory building"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AffectedService": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "description": "Provides the identifier of the service affected by the alarm"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Alarm": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier of the alarm, determined by the alarm owning system"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the alarm."
                },
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm"
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmType": {
                    "type": "string",
                    "description": "Categorize the alarm. Should be one of the values defined in X.733 8.1.1 or 3GPP TS 32.111-2 Annex A:\n\tCommunications Alarm\n\tProcessing Error Alarm\n\tEnvironmental Alarm\n\tQuality of Service Alarm\n\tEquipment Alarm\n\tIntegrity Violation\n\tOperational Violation\n\tPhysical Violation\n\tSecurity Service or Mechanism Violation\n\tTime Domain Violation"
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "perceivedSeverity": {
                    "type": "string",
                    "description": "Lists the possible severities that can be allocated to an Alarm. The values are consistent with ITU-T Recommendation X.733.\nOnce an alarm has been cleared, its perceived severity is set to 'cleared' and can no longer be set."
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle"
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "Alarm_Create": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.\nSkipped properties: id,href",
            "properties": {
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm"
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmType": {
                    "type": "string",
                    "description": "Categorize the alarm. Should be one of the values defined in X.733 8.1.1 or 3GPP TS 32.111-2 Annex A:\n\tCommunications Alarm\n\tProcessing Error Alarm\n\tEnvironmental Alarm\n\tQuality of Service Alarm\n\tEquipment Alarm\n\tIntegrity Violation\n\tOperational Violation\n\tPhysical Violation\n\tSecurity Service or Mechanism Violation\n\tTime Domain Violation"
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "perceivedSeverity": {
                    "type": "string",
                    "description": "Lists the possible severities that can be allocated to an Alarm. The values are consistent with ITU-T Recommendation X.733.\nOnce an alarm has been cleared, its perceived severity is set to 'cleared' and can no longer be set."
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle"
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "Alarm_Update": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.\nSkipped properties: id,href",
            "properties": {
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm"
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmType": {
                    "type": "string",
                    "description": "Categorize the alarm. Should be one of the values defined in X.733 8.1.1 or 3GPP TS 32.111-2 Annex A:\n\tCommunications Alarm\n\tProcessing Error Alarm\n\tEnvironmental Alarm\n\tQuality of Service Alarm\n\tEquipment Alarm\n\tIntegrity Violation\n\tOperational Violation\n\tPhysical Violation\n\tSecurity Service or Mechanism Violation\n\tTime Domain Violation"
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "perceivedSeverity": {
                    "type": "string",
                    "description": "Lists the possible severities that can be allocated to an Alarm. The values are consistent with ITU-T Recommendation X.733.\nOnce an alarm has been cleared, its perceived severity is set to 'cleared' and can no longer be set."
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle"
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "AlarmRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AlarmedObject": {
            "type": "object",
            "description": "Identifies the managed object instance associated with the alarm.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the managed object associated with the event."
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the managed object associated with the event."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Any": {},
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "BaseEvent": {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "event": {
                    "$ref": "#/definitions/Any"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "CategoryType": {
            "type": "object",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Comment": {
            "type": "object",
            "description": "Indicates the comments entered on the alarm.",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Indicates the text of the comment."
                },
                "systemId": {
                    "type": "string",
                    "description": "Indicates the system identifier on which the client set the comment."
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time commenting the alarm"
                },
                "userId": {
                    "type": "string",
                    "description": "Indicates the user commenting the alarm."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Configuration": {
            "type": "object",
            "description": "#TODO",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "CrossedThresholdInformation": {
            "type": "object",
            "description": "Identifies the details of the threshold that has been crossed.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "Indicates the threshold crossing direction: up or down."
                },
                "granularity": {
                    "type": "string",
                    "description": "Indicates the granularity at which the indicator is evaluated for threshold crossing"
                },
                "indicatorName": {
                    "type": "string",
                    "description": "Indicates the name of indicator which crossed the threshold."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "Indicates the unit of the measurement of the indicator corresponding to the threshold that has been crossed."
                },
                "observedValue": {
                    "type": "string",
                    "description": "Indicates the value of the indicator which crossed the threshold."
                },
                "thresholdCrossingDescription": {
                    "type": "string",
                    "description": "Indicates further information on the threshold crossing alarm."
                },
                "threshold": {
                    "$ref": "#/definitions/ThresholdRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "DataAccessEndpoint": {
            "type": "object",
            "description": "This is the endpoint exposed by the IoT Device to authorized users.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type"
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "apiType": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource, such as: Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the resource"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date till the resource is effective"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "uri": {
                    "type": "string",
                    "description": "URI for using the data access API"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the logical resource, such as: 0044746712345 for an MSISDN"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Device": {
            "type": "object",
            "required": [
                "category",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "alternateName": {
                    "type": "string"
                },
                "areaServed": {
                    "type": "string"
                },
                "batteryLevel": {
                    "type": "number",
                    "format": "float"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "dataProvider": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateFirstUsed": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateInstalled": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastCalibration": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastValueReported": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateManufactured": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "deviceState": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string",
                    "description": "NGSI Entity type"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is effective"
                },
                "firmwareVersion": {
                    "type": "string"
                },
                "hardwareVersion": {
                    "type": "string"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
                },
                "mnc": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "osVersion": {
                    "type": "string"
                },
                "powerState": {
                    "type": "string",
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
                },
                "provider": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "softwareVersion": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object. This is an optional attribute."
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "configuration": {
                    "$ref": "#/definitions/Configuration"
                },
                "location": {
                    "$ref": "#/definitions/GeographicLocation"
                },
                "macAddress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MacAddressType"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "GSMACommons": {
            "type": "object",
            "properties": {
                "alternateName": {
                    "type": "string"
                },
                "dataProvider": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "GeographicLocation": {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the geographic location"
                },
                "href": {
                    "type": "string",
                    "description": "An URI used to access to the geographic location resource"
                },
                "@type": {
                    "type": "string",
                    "enum": [
                        "GeoJsonPoint",
                        "GeoJsonMultiPoint",
                        "GeoJsonLineString",
                        "GeoJsonMultiLineString",
                        "GeoJsonPolygon"
                    ],
                    "description": "The name of the GeoJSON structure used in the geometry attribute"
                },
                "bbox": {
                    "type": "array",
                    "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/Place"
                }
            ],
            "required": [
                "@type"
            ]
        },
        "IotDataEvent": {
            "type": "object",
            "description": "#TODO",
            "properties": {
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "event": {
                    "$ref": "#/definitions/Any"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDevice": {
            "type": "object",
            "description": "#TODO",
            "required": [
                "category",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "alternateName": {
                    "type": "string"
                },
                "areaServed": {
                    "type": "string"
                },
                "batteryLevel": {
                    "type": "number",
                    "format": "float"
                },
                "dataProvider": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateFirstUsed": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateInstalled": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastCalibration": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastValueReported": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateManufactured": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "deviceState": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string",
                    "description": "NGSI Entity type"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is effective"
                },
                "firmwareVersion": {
                    "type": "string"
                },
                "hardwareVersion": {
                    "type": "string"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
                },
                "mnc": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "osVersion": {
                    "type": "string"
                },
                "powerState": {
                    "type": "string",
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
                },
                "provider": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "softwareVersion": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object. This is an optional attribute."
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryType"
                    },
                    "minItems": 1
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "configuration": {
                    "$ref": "#/definitions/Configuration"
                },
                "dataAccessEndPoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "location": {
                    "$ref": "#/definitions/GeographicLocation"
                },
                "macAddress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MacAddressType"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDevice_Create": {
            "type": "object",
            "description": "#TODO\nSkipped properties: id,href",
            "required": [
                "category",
                "id"
            ],
            "properties": {
                "alternateName": {
                    "type": "string"
                },
                "areaServed": {
                    "type": "string"
                },
                "batteryLevel": {
                    "type": "number",
                    "format": "float"
                },
                "dataProvider": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateFirstUsed": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateInstalled": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastCalibration": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastValueReported": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateManufactured": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "deviceState": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string",
                    "description": "NGSI Entity type"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is effective"
                },
                "firmwareVersion": {
                    "type": "string"
                },
                "hardwareVersion": {
                    "type": "string"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
                },
                "mnc": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "osVersion": {
                    "type": "string"
                },
                "powerState": {
                    "type": "string",
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
                },
                "provider": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "softwareVersion": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object. This is an optional attribute."
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryType"
                    },
                    "minItems": 1
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "configuration": {
                    "$ref": "#/definitions/Configuration"
                },
                "dataAccessEndPoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "location": {
                    "$ref": "#/definitions/GeographicLocation"
                },
                "macAddress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MacAddressType"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDevice_Update": {
            "type": "object",
            "description": "#TODO\nSkipped properties: id,href",
            "required": [
                "category",
                "id"
            ],
            "properties": {
                "alternateName": {
                    "type": "string"
                },
                "areaServed": {
                    "type": "string"
                },
                "batteryLevel": {
                    "type": "number",
                    "format": "float"
                },
                "dataProvider": {
                    "type": "string"
                },
                "dateCreated": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateFirstUsed": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateInstalled": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastCalibration": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateLastValueReported": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateManufactured": {
                    "type": "string",
                    "format": "date-time"
                },
                "dateModified": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "deviceState": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string",
                    "description": "NGSI Entity type"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is effective"
                },
                "firmwareVersion": {
                    "type": "string"
                },
                "hardwareVersion": {
                    "type": "string"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
                },
                "mnc": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "osVersion": {
                    "type": "string"
                },
                "powerState": {
                    "type": "string",
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
                },
                "provider": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "softwareVersion": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object. This is an optional attribute."
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryType"
                    },
                    "minItems": 1
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "configuration": {
                    "$ref": "#/definitions/Configuration"
                },
                "dataAccessEndPoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "location": {
                    "$ref": "#/definitions/GeographicLocation"
                },
                "macAddress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MacAddressType"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDeviceSpecification": {
            "type": "object",
            "description": "#TODO",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDeviceSpecification_Create": {
            "type": "object",
            "description": "#TODO\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotDeviceSpecification_Update": {
            "type": "object",
            "description": "#TODO\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "IotManagementEvent": {
            "type": "object",
            "description": "Generic IotManagementEvent structure used to define commonalities between sub concepts of PartyIotManagementEvent and Financial IotManagementEvent.",
            "properties": {
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "event": {
                    "$ref": "#/definitions/Any"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "LocationCommons": {
            "type": "object",
            "properties": {
                "areaServed": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "location": {
                    "$ref": "#/definitions/GeographicLocation"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "LogicalResource": {
            "type": "object",
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type"
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource, such as: Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the resource"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date till the resource is effective"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the logical resource, such as: 0044746712345 for an MSISDN"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MacAddressType": {
            "type": "object",
            "description": "#TODO",
            "properties": {
                "MacAddressType": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Note": {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
                },
                "author": {
                    "type": "string",
                    "description": "Author of the note"
                },
                "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of the note"
                },
                "text": {
                    "type": "string",
                    "description": "Text of the note"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "PartyRoleRef": {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the product"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the product"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the referred party role."
                },
                "partyId": {
                    "type": "string",
                    "description": "The identifier of the engaged party that is linked to the PartyRole object."
                },
                "partyName": {
                    "type": "string",
                    "description": "The name of the engaged party that is linked to the PartyRole object."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PhysicalResource": {
            "type": "object",
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is effective"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The life cycle state of the resource."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "powerState": {
                    "type": "string",
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is effective"
                },
                "version": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object. This is an optional attribute."
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "partyRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }
                },
                "place": {
                    "$ref": "#/definitions/Place"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Place": {
            "type": "object",
            "description": "Place reference. Place defines the places where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "PlaceRef": {
            "type": "object",
            "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedPlaceRefOrValue": {
            "type": "object",
            "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
            "required": [
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "role": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ResourceCharacteristic": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the characteristic"
                },
                "value": {
                    "type": "string",
                    "description": "value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "value": {
                    "type": "string",
                    "description": "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceRelationship": {
            "type": "object",
            "description": "Describes links between resources",
            "properties": {
                "relationshipType": {
                    "type": "string",
                    "description": "Semantic of the relationship"
                },
                "resource": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "A reference to the resource"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecCharRelationship": {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among resourceSpecCharacteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target specification"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to the target specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target  characteristic"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecCharacteristic": {
            "type": "object",
            "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
            "properties": {
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the serviceSpecCharacteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the serviceSpecCharacteristic is"
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "resourceSpecCharRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharRelationship"
                    },
                    "description": "A list of resource spec char relationships (ResourceSpecCharRelationship [*]). An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
                },
                "resourceSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristicValue"
                    },
                    "description": "A list of resource spec characteristic values (ResourceSpecCharacteristicValue [*]). A ResourceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecCharacteristic object. The values of the attributes in the ResourceSpecCharacteristicValue object describe the values of the attributes that a corresponding ResourceSpecCharacteristic object can take on."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharacteristic is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "ResourceSpecCharacteristicValue": {
            "type": "object",
            "description": "A ResourceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecCharacteristic object. The values of the attributes in the ResourceSpecCharacteristicValue object describe the values of the attributes that a corresponding ResourceSpecCharacteristic object can take on.",
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicates if the value is the default value for a characteristic"
                },
                "rangeInterval": {
                    "type": "string",
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                },
                "regex": {
                    "type": "string",
                    "description": "A regular expression constraint for given value"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                },
                "valueFrom": {
                    "type": "integer",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "integer",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a value is applicable"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecRelationship": {
            "type": "object",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among Resource specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target ResourceSpecification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the target ResourceSpecification"
                },
                "name": {
                    "type": "string",
                    "description": "The name given to the target Resource specification instance"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this Resource specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the ResourceSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecification": {
            "type": "object",
            "description": "ResourceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecification_Create": {
            "type": "object",
            "description": "ResourceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecification_Update": {
            "type": "object",
            "description": "ResourceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecRelationship"
                    },
                    "description": "A list of resource specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ResourceSpecificationRef": {
            "type": "object",
            "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the requiredResourceSpecification"
                },
                "version": {
                    "type": "string",
                    "description": "Resource specification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Rule": {
            "type": "object",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "SubAddress": {
            "type": "object",
            "description": "Representation of a SubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID for this SubAddress"
                },
                "href": {
                    "type": "string"
                },
                "buildingName": {
                    "type": "string",
                    "description": "Allows for buildings that have well-known names"
                },
                "levelNumber": {
                    "type": "string",
                    "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
                },
                "levelType": {
                    "type": "string",
                    "description": "Describes level types within a building"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the subAddress to identify it with a meaningful identification"
                },
                "privateStreetName": {
                    "type": "string",
                    "description": "Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
                },
                "privateStreetNumber": {
                    "type": "string",
                    "description": "Private streets numbers internal to a private street"
                },
                "subAddressType": {
                    "type": "string",
                    "description": "The type of subaddress : it can be a subunit or a private street"
                },
                "subUnitNumber": {
                    "type": "string",
                    "description": "The discriminator of the subunit, often just a simple number e.g. FLAT 5, may also be a range"
                },
                "subUnitType": {
                    "type": "string",
                    "description": "The type of subunit, such as BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "TargetServiceSchema": {
            "type": "object",
            "description": "The reference object to the schema and type of target service which is described by service specification",
            "required": [
                "@schemaLocation",
                "@type"
            ],
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "This field provides a link to the schema describing the target service"
                },
                "@type": {
                    "type": "string",
                    "description": "Class type of the target service"
                }
            }
        },
        "ThresholdRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "IotDeviceCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceCreateEventPayload"
                }
            }
        },
        "IotDeviceCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceChangeEventPayload"
                }
            }
        },
        "IotDeviceChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceBatchEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceBatchEventPayload"
                }
            }
        },
        "IotDeviceBatchEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceDeleteEventPayload"
                }
            }
        },
        "IotDeviceDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceHeartBeatEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceHeartBeatEventPayload"
                }
            }
        },
        "IotDeviceHeartBeatEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceStateChangeEventPayload"
                }
            }
        },
        "IotDeviceStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDevice": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDevice"
                }
            }
        },
        "IotDeviceSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceSpecificationCreateEventPayload"
                }
            }
        },
        "IotDeviceSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDeviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDeviceSpecification"
                }
            }
        },
        "IotDeviceSpecificationChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceSpecificationChangeEventPayload"
                }
            }
        },
        "IotDeviceSpecificationChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDeviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDeviceSpecification"
                }
            }
        },
        "IotDeviceSpecificationBatchEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceSpecificationBatchEventPayload"
                }
            }
        },
        "IotDeviceSpecificationBatchEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDeviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDeviceSpecification"
                }
            }
        },
        "IotDeviceSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IotDeviceSpecificationDeleteEventPayload"
                }
            }
        },
        "IotDeviceSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "iotDeviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/IotDeviceSpecification"
                }
            }
        },
        "ResourceSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationCreateEventPayload"
                }
            }
        },
        "ResourceSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ResourceSpecificationChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationChangeEventPayload"
                }
            }
        },
        "ResourceSpecificationChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ResourceSpecificationBatchEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationBatchEventPayload"
                }
            }
        },
        "ResourceSpecificationBatchEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ResourceSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationDeleteEventPayload"
                }
            }
        },
        "ResourceSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "AlarmCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmCreateEventPayload"
                }
            }
        },
        "AlarmCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "AlarmChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmChangeEventPayload"
                }
            }
        },
        "AlarmChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "AlarmDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the Process flow"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the ProcessFlow"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmDeleteEventPayload"
                }
            }
        },
        "AlarmDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "GeoJsonLineString": {
            "type": "object",
            "description": "Container for GeoJson LineString: A collection of Points forming a connected line",
            "required": [
                "@type",
                "geoJson"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/GeographicLocation"
                },
                {
                    "type": "object",
                    "properties": {
                        "geoJson": {
                            "$ref": "#/definitions/LineString"
                        }
                    }
                }
            ]
        },
        "GeoJsonMultiLineString": {
            "type": "object",
            "description": "A container for GeoJSON MultiLineString: A collection of distinct LineStrings",
            "required": [
                "@type",
                "geoJson"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/GeographicLocation"
                },
                {
                    "type": "object",
                    "properties": {
                        "geoJson": {
                            "$ref": "#/definitions/MultiLineString"
                        }
                    }
                }
            ]
        },
        "GeoJsonMultiPoint": {
            "type": "object",
            "description": "Container for GeoJSON MultiPoint: A collection of Points",
            "required": [
                "@type",
                "geoJson"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/GeographicLocation"
                },
                {
                    "type": "object",
                    "properties": {
                        "geoJson": {
                            "$ref": "#/definitions/MultiPoint"
                        }
                    }
                }
            ]
        },
        "GeoJsonPoint": {
            "type": "object",
            "description": "Container for a GeoJSON Point: A single position",
            "required": [
                "@type",
                "geoJson"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/GeographicLocation"
                },
                {
                    "type": "object",
                    "properties": {
                        "geoJson": {
                            "$ref": "#/definitions/Point"
                        }
                    }
                }
            ]
        },
        "GeoJsonPolygon": {
            "type": "object",
            "description": "Container for GeoJSON Polygon: An array of linear rings",
            "required": [
                "@type",
                "geoJson"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/GeographicLocation"
                },
                {
                    "type": "object",
                    "properties": {
                        "geoJson": {
                            "$ref": "#/definitions/Polygon"
                        }
                    }
                }
            ]
        },
        "LineString": {
            "type": "object",
            "description": "GeoJSON: A collection of Points forming a connected line",
            "required": [
                "coordinates"
            ],
            "properties": {
                "coordinates": {
                    "$ref": "#/definitions/lineString"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MultiLineString": {
            "type": "object",
            "description": "A collection of distinct LineStrings",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "coordinates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/lineString"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MultiPoint": {
            "type": "object",
            "description": "A collection of Points",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "coordinates": {
                    "$ref": "#/definitions/positionArray"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Point": {
            "type": "object",
            "description": "GeoJSON: A single position",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "coordinates": {
                    "$ref": "#/definitions/position"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Polygon": {
            "type": "object",
            "description": "An array of linear rings",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "coordinates": {
                    "$ref": "#/definitions/polygon"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "position": {
            "description": "GeoJSON: A single position",
            "type": "array",
            "minItems": 2,
            "items": {
                "type": "number"
            },
            "maxItems": 2
        },
        "positionArray": {
            "description": "GeoJSON: An array of positions",
            "type": "array",
            "items": {
                "$ref": "#/definitions/position"
            }
        },
        "lineString": {
            "description": "GeoJSON: An array of two or more positions",
            "allOf": [
                {
                    "$ref": "#/definitions/positionArray"
                },
                {
                    "minItems": 2
                }
            ]
        },
        "linearRing": {
            "description": "GeoJSON: An array of four positions where the first equals the last",
            "allOf": [
                {
                    "$ref": "#/definitions/positionArray"
                },
                {
                    "minItems": 4
                }
            ]
        },
        "polygon": {
            "description": "GeoJSON: An array of linear rings",
            "type": "array",
            "items": {
                "$ref": "#/definitions/linearRing"
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}