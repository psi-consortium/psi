{
  "openapi": "3.0.1",
  "info": {
    "title": "Service Quality Management",
    "description": "This is Swagger UI environment generated for the TMF Service Quality Management specification",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://serverRoot"
    }
  ],
  "tags": [
    {
      "name": "serviceLevelObjective",
      "description": "Operations for ServiceLevelObjective Resource"
    },
    {
      "name": "serviceLevelSpecification",
      "description": "Operations for ServiceLevelSpecification Resource"
    },
    {
      "name": "keyIndicator",
      "description": "Operations for KeyIndicator Resource"
    },
    {
      "name": "prescribedAction",
      "description": "Operations for PrescribedAction Resource"
    },
    {
      "name": "notification listener",
      "description": "Notifications for Resource Lifecycle and event notifications"
    },
    {
      "name": "events subscription",
      "description": "Endpoints to register and terminate an Event Listener"
    }
  ],
  "paths": {
    "/serviceLevelObjective": {
      "get": {
        "tags": [
          "serviceLevelObjective"
        ],
        "summary": "List or find ServiceLevelObjective objects",
        "description": "This operation retrieves a ServiceLevelObjective entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listServiceLevelObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelObjectiveArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "serviceLevelObjective"
        ],
        "summary": "Creates a ServiceLevelObjective",
        "description": "This operation creates a ServiceLevelObjective entity.",
        "operationId": "createServiceLevelObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelObjective_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ServiceLevelObjective"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/serviceLevelObjective/{id}": {
      "get": {
        "tags": [
          "serviceLevelObjective"
        ],
        "summary": "Retrieves a ServiceLevelObjective by ID",
        "description": "List or find ServiceLevelObjective objects",
        "operationId": "retrieveServiceLevelObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelObjective_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "serviceLevelObjective"
        ],
        "summary": "Updates partially a ServiceLevelObjective",
        "description": "This operation updates partially a ServiceLevelObjective entity.",
        "operationId": "patchServiceLevelObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelObjective_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelObjective_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "serviceLevelObjective"
        ],
        "summary": "Deletes a ServiceLevelObjective",
        "description": "This operation deletes a ServiceLevelObjective entity.",
        "operationId": "deleteServiceLevelObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/serviceLevelObjectiveCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelObjectiveCreateEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelObjectiveCreateEvent",
        "operationId": "serviceLevelObjectiveCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelObjectiveCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/serviceLevelObjectiveAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelObjectiveAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelObjectiveAttributeValueChangeEvent",
        "operationId": "serviceLevelObjectiveAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelObjectiveAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/serviceLevelObjectiveDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelObjectiveDeleteEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelObjectiveDeleteEvent",
        "operationId": "serviceLevelObjectiveDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelObjectiveDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/serviceLevelSpecification": {
      "get": {
        "tags": [
          "serviceLevelSpecification"
        ],
        "summary": "List or find ServiceLevelSpecification objects",
        "description": "This operation retrieves a ServiceLevelSpecification entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listServiceLevelSpecification",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelSpecificationArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "serviceLevelSpecification"
        ],
        "summary": "Creates a ServiceLevelSpecification",
        "description": "This operation creates a ServiceLevelSpecification entity.",
        "operationId": "createServiceLevelSpecification",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelSpecification_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ServiceLevelSpecification"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/serviceLevelSpecification/{id}": {
      "get": {
        "tags": [
          "serviceLevelSpecification"
        ],
        "summary": "Retrieves a ServiceLevelSpecification by ID",
        "description": "List or find ServiceLevelSpecification objects",
        "operationId": "retrieveServiceLevelSpecification",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelSpecification_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "serviceLevelSpecification"
        ],
        "summary": "Updates partially a ServiceLevelSpecification",
        "description": "This operation updates partially a ServiceLevelSpecification entity.",
        "operationId": "patchServiceLevelSpecification",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelSpecification_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ServiceLevelSpecification_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "serviceLevelSpecification"
        ],
        "summary": "Deletes a ServiceLevelSpecification",
        "description": "This operation deletes a ServiceLevelSpecification entity.",
        "operationId": "deleteServiceLevelSpecification",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/serviceLevelSpecificationCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelSpecificationCreateEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelSpecificationCreateEvent",
        "operationId": "serviceLevelSpecificationCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelSpecificationCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/serviceLevelSpecificationAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelSpecificationAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelSpecificationAttributeValueChangeEvent",
        "operationId": "serviceLevelSpecificationAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelSpecificationAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/serviceLevelSpecificationDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ServiceLevelSpecificationDeleteEvent",
        "description": "Example of a client listener for receiving the notification ServiceLevelSpecificationDeleteEvent",
        "operationId": "serviceLevelSpecificationDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceLevelSpecificationDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/keyIndicator": {
      "get": {
        "tags": [
          "keyIndicator"
        ],
        "summary": "List or find KeyIndicator objects",
        "description": "This operation retrieves a KeyIndicator entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listKeyIndicator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200KeyIndicatorArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "keyIndicator"
        ],
        "summary": "Creates a KeyIndicator",
        "description": "This operation creates a KeyIndicator entity.",
        "operationId": "createKeyIndicator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KeyIndicator_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201KeyIndicator"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/keyIndicator/{id}": {
      "get": {
        "tags": [
          "keyIndicator"
        ],
        "summary": "Retrieves a KeyIndicator by ID",
        "description": "List or find KeyIndicator objects",
        "operationId": "retrieveKeyIndicator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200KeyIndicator_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "keyIndicator"
        ],
        "summary": "Updates partially a KeyIndicator",
        "description": "This operation updates partially a KeyIndicator entity.",
        "operationId": "patchKeyIndicator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KeyIndicator_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200KeyIndicator_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "keyIndicator"
        ],
        "summary": "Deletes a KeyIndicator",
        "description": "This operation deletes a KeyIndicator entity.",
        "operationId": "deleteKeyIndicator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/prescribedAction": {
      "get": {
        "tags": [
          "prescribedAction"
        ],
        "summary": "List or find PrescribedAction objects",
        "description": "This operation retrieves a PrescribedAction entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listPrescribedAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PrescribedActionArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "prescribedAction"
        ],
        "summary": "Creates a PrescribedAction",
        "description": "This operation creates a PrescribedAction entity.",
        "operationId": "createPrescribedAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PrescribedAction_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201PrescribedAction"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/prescribedAction/{id}": {
      "get": {
        "tags": [
          "prescribedAction"
        ],
        "summary": "Retrieves a PrescribedAction by ID",
        "description": "List or find PrescribedAction objects",
        "operationId": "retrievePrescribedAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PrescribedAction_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "prescribedAction"
        ],
        "summary": "Updates partially a PrescribedAction",
        "description": "This operation updates partially a PrescribedAction entity.",
        "operationId": "patchPrescribedAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PrescribedAction_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PrescribedAction_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "prescribedAction"
        ],
        "summary": "Deletes a PrescribedAction",
        "description": "This operation deletes a PrescribedAction entity.",
        "operationId": "deletePrescribedAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "createHub",
        "summary": "Create a subscription (hub) to receive Events",
        "description": "Sets the communication endpoint to receive Events.",
        "tags": [
          "events subscription"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Hub_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Hub"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "hubDelete",
        "summary": "Remove a subscription (hub) to receive Events",
        "description": "",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Account reference. A account may be a party account or a financial account.",
            "properties": {
              "description": {
                "type": "string",
                "description": "Detailed description of the account"
              }
            }
          }
        ]
      },
      "AccountRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Account reference. A account may be a party account or a financial account.",
            "properties": {
              "description": {
                "type": "string",
                "description": "Detailed description of the account"
              }
            }
          }
        ]
      },
      "AccountRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Account reference. A account may be a party account or a financial account.",
            "properties": {
              "description": {
                "type": "string",
                "description": "Detailed description of the account"
              }
            }
          }
        ]
      },
      "Addressable": {
        "type": "object",
        "description": "Base schema for adressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        }
      },
      "Addressable_FVO": {
        "type": "object",
        "description": "Base schema for adressable entities",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        }
      },
      "AgreementRef": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef"
          }
        }
      },
      "AgreementRef_FVO": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef_FVO"
          }
        }
      },
      "AgreementRef_MVO": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef_MVO"
          }
        }
      },
      "Any": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Any": "#/components/schemas/Any"
          }
        }
      },
      "Any_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Any": "#/components/schemas/Any_FVO"
          }
        }
      },
      "Any_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Any": "#/components/schemas/Any_MVO"
          }
        }
      },
      "ApplicableTimePeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "The period of time for which Capacity or CapacityDemand applies.",
            "properties": {
              "dayOfWeek": {
                "type": "string",
                "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
              },
              "fromToDateTime": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ApplicableTimePeriod": "#/components/schemas/ApplicableTimePeriod"
          }
        }
      },
      "ApplicableTimePeriod_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "The period of time for which Capacity or CapacityDemand applies.",
            "properties": {
              "dayOfWeek": {
                "type": "string",
                "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
              },
              "fromToDateTime": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ApplicableTimePeriod": "#/components/schemas/ApplicableTimePeriod_FVO"
          }
        }
      },
      "ApplicableTimePeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "The period of time for which Capacity or CapacityDemand applies.",
            "properties": {
              "dayOfWeek": {
                "type": "string",
                "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
              },
              "fromToDateTime": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ApplicableTimePeriod": "#/components/schemas/ApplicableTimePeriod_MVO"
          }
        }
      },
      "AssociationSpecificationRef": {
        "type": "object",
        "description": "reference to an AssociationSpecification object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "AssociationSpecificationRef_FVO": {
        "type": "object",
        "description": "reference to an AssociationSpecification object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "AssociationSpecificationRef_MVO": {
        "type": "object",
        "description": "reference to an AssociationSpecification object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "Attachment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment"
          }
        }
      },
      "AttachmentRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ]
      },
      "AttachmentRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment",
            "AttachmentRef": "#/components/schemas/AttachmentRef"
          }
        }
      },
      "AttachmentRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_FVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_FVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef_FVO"
          }
        }
      },
      "AttachmentRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_MVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_MVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef_MVO"
          }
        }
      },
      "AttachmentRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ]
      },
      "AttachmentRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ]
      },
      "Attachment_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            },
            "required": [
              "attachmentType",
              "mimeType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_FVO"
          }
        }
      },
      "Attachment_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Attachment": "#/components/schemas/Attachment_MVO"
          }
        }
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occured."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "BaseEvent": "#/components/schemas/BaseEvent"
          }
        }
      },
      "BaseEvent_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occured."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "BaseEvent": "#/components/schemas/BaseEvent_FVO"
          }
        }
      },
      "BaseEvent_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occured."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "BaseEvent": "#/components/schemas/BaseEvent_MVO"
          }
        }
      },
      "BusinessPartner": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "BusinessPartner_FVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "BusinessPartner_MVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic"
          }
        }
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
          }
        }
      },
      "CharacteristicRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_FVO"
          }
        }
      },
      "CharacteristicRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_MVO"
          }
        }
      },
      "CharacteristicSpecification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "This class defines a characteristic specification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID for the characteristic"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
              },
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains the CharacteristicSpecification."
              },
              "configurable": {
                "type": "boolean",
                "description": "If true, the Boolean indicates that the target Characteristic is configurable"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "minCardinality": {
                "type": "integer",
                "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
              },
              "maxCardinality": {
                "type": "integer",
                "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
              },
              "isUnique": {
                "type": "boolean",
                "description": "Specifies if the value of this characteristic is unique across all entities instantiated from the specification that uses this characteristc. For example, consider a ProductSpecification for a set-top box, with a CharacteristicSpecification cardID. Each set-top box must have a different value for cardID, so this isUnique attribute would be set to true for the characteristic."
              },
              "regex": {
                "type": "string",
                "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
              },
              "extensible": {
                "type": "boolean",
                "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
              },
              "@valueSchemaLocation": {
                "type": "string",
                "description": "This (optional) field provides a link to the schema describing the value type."
              },
              "charSpecRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecificationRelationship"
                },
                "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
              },
              "characteristicValueSpecification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicValueSpecification"
                },
                "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecification": "#/components/schemas/CharacteristicSpecification"
          }
        }
      },
      "CharacteristicSpecificationRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
              },
              "name": {
                "type": "string",
                "description": "Name of the target characteristic within the specification"
              },
              "characteristicSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the characteristic within the specification"
              },
              "parentSpecificationHref": {
                "type": "string",
                "format": "uri",
                "description": "Hyperlink reference to the parent specification containing the target characteristic"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "parentSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the parent specification containing the target characteristic"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecificationRelationship": "#/components/schemas/CharacteristicSpecificationRelationship"
          }
        }
      },
      "CharacteristicSpecificationRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
              },
              "name": {
                "type": "string",
                "description": "Name of the target characteristic within the specification"
              },
              "characteristicSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the characteristic within the specification"
              },
              "parentSpecificationHref": {
                "type": "string",
                "format": "uri",
                "description": "Hyperlink reference to the parent specification containing the target characteristic"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "parentSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the parent specification containing the target characteristic"
              }
            },
            "required": [
              "parentSpecificationId",
              "name",
              "relationshipType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecificationRelationship": "#/components/schemas/CharacteristicSpecificationRelationship_FVO"
          }
        }
      },
      "CharacteristicSpecificationRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
              },
              "name": {
                "type": "string",
                "description": "Name of the target characteristic within the specification"
              },
              "characteristicSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the characteristic within the specification"
              },
              "parentSpecificationHref": {
                "type": "string",
                "format": "uri",
                "description": "Hyperlink reference to the parent specification containing the target characteristic"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "parentSpecificationId": {
                "type": "string",
                "description": "Unique identifier of the parent specification containing the target characteristic"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecificationRelationship": "#/components/schemas/CharacteristicSpecificationRelationship_MVO"
          }
        }
      },
      "CharacteristicSpecification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "This class defines a characteristic specification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID for the characteristic"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
              },
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains the CharacteristicSpecification."
              },
              "configurable": {
                "type": "boolean",
                "description": "If true, the Boolean indicates that the target Characteristic is configurable"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "minCardinality": {
                "type": "integer",
                "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
              },
              "maxCardinality": {
                "type": "integer",
                "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
              },
              "isUnique": {
                "type": "boolean",
                "description": "Specifies if the value of this characteristic is unique across all entities instantiated from the specification that uses this characteristc. For example, consider a ProductSpecification for a set-top box, with a CharacteristicSpecification cardID. Each set-top box must have a different value for cardID, so this isUnique attribute would be set to true for the characteristic."
              },
              "regex": {
                "type": "string",
                "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
              },
              "extensible": {
                "type": "boolean",
                "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
              },
              "@valueSchemaLocation": {
                "type": "string",
                "description": "This (optional) field provides a link to the schema describing the value type."
              },
              "charSpecRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecificationRelationship_FVO"
                },
                "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
              },
              "characteristicValueSpecification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicValueSpecification_FVO"
                },
                "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on."
              }
            },
            "required": [
              "name",
              "valueType"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecification": "#/components/schemas/CharacteristicSpecification_FVO"
          }
        }
      },
      "CharacteristicSpecification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "This class defines a characteristic specification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID for the characteristic"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
              },
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains the CharacteristicSpecification."
              },
              "configurable": {
                "type": "boolean",
                "description": "If true, the Boolean indicates that the target Characteristic is configurable"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "minCardinality": {
                "type": "integer",
                "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
              },
              "maxCardinality": {
                "type": "integer",
                "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
              },
              "isUnique": {
                "type": "boolean",
                "description": "Specifies if the value of this characteristic is unique across all entities instantiated from the specification that uses this characteristc. For example, consider a ProductSpecification for a set-top box, with a CharacteristicSpecification cardID. Each set-top box must have a different value for cardID, so this isUnique attribute would be set to true for the characteristic."
              },
              "regex": {
                "type": "string",
                "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
              },
              "extensible": {
                "type": "boolean",
                "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
              },
              "@valueSchemaLocation": {
                "type": "string",
                "description": "This (optional) field provides a link to the schema describing the value type."
              },
              "charSpecRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecificationRelationship_MVO"
                },
                "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
              },
              "characteristicValueSpecification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicValueSpecification_MVO"
                },
                "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicSpecification": "#/components/schemas/CharacteristicSpecification_MVO"
          }
        }
      },
      "CharacteristicValueSpecification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic. This is an abstract base class, the actual value is in one of the strongly-typed subclasses",
            "properties": {
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
              },
              "isDefault": {
                "type": "boolean",
                "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "valueFrom": {
                "type": "integer",
                "description": "The low range value that a characteristic can take on"
              },
              "valueTo": {
                "type": "integer",
                "description": "The upper range value that a characteristic can take on"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "regex": {
                "type": "string",
                "description": "A regular expression constraint for given value"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicValueSpecification": "#/components/schemas/CharacteristicValueSpecification"
          }
        }
      },
      "CharacteristicValueSpecification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic. This is an abstract base class, the actual value is in one of the strongly-typed subclasses",
            "properties": {
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
              },
              "isDefault": {
                "type": "boolean",
                "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "valueFrom": {
                "type": "integer",
                "description": "The low range value that a characteristic can take on"
              },
              "valueTo": {
                "type": "integer",
                "description": "The upper range value that a characteristic can take on"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "regex": {
                "type": "string",
                "description": "A regular expression constraint for given value"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicValueSpecification": "#/components/schemas/CharacteristicValueSpecification_FVO"
          }
        }
      },
      "CharacteristicValueSpecification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic. This is an abstract base class, the actual value is in one of the strongly-typed subclasses",
            "properties": {
              "valueType": {
                "type": "string",
                "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
              },
              "isDefault": {
                "type": "boolean",
                "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "valueFrom": {
                "type": "integer",
                "description": "The low range value that a characteristic can take on"
              },
              "valueTo": {
                "type": "integer",
                "description": "The upper range value that a characteristic can take on"
              },
              "rangeInterval": {
                "type": "string",
                "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
              },
              "regex": {
                "type": "string",
                "description": "A regular expression constraint for given value"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicValueSpecification": "#/components/schemas/CharacteristicValueSpecification_MVO"
          }
        }
      },
      "Characteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_FVO"
          }
        }
      },
      "Characteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_MVO"
          }
        }
      },
      "ConstraintRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
              "version": {
                "type": "string",
                "description": "constraint version"
              }
            }
          }
        ]
      },
      "ConstraintRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
              "version": {
                "type": "string",
                "description": "constraint version"
              }
            }
          }
        ]
      },
      "ConstraintRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
              "version": {
                "type": "string",
                "description": "constraint version"
              }
            }
          }
        ]
      },
      "Consumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Consumer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Consumer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "ContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium"
          }
        }
      },
      "ContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium_FVO"
          }
        }
      },
      "ContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium_MVO"
          }
        }
      },
      "CreditProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "format": "date-time",
                "description": "The date the profile was established"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile"
          }
        }
      },
      "CreditProfile_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "format": "date-time",
                "description": "The date the profile was established"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile_FVO"
          }
        }
      },
      "CreditProfile_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "format": "date-time",
                "description": "The date the profile was established"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile_MVO"
          }
        }
      },
      "Disability": {
        "type": "object",
        "description": "Lack or inadequate strength or ability.",
        "properties": {
          "disabilityCode": {
            "type": "string",
            "description": "Code of the disability"
          },
          "disabilityName": {
            "type": "string",
            "description": "Name of the disability"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntityRef": "#/components/schemas/EntityRef",
            "ServiceLevelObjectiveRef": "#/components/schemas/ServiceLevelObjectiveRef",
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef",
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef",
            "PartyRef": "#/components/schemas/PartyRef",
            "OrganizationRef": "#/components/schemas/OrganizationRef",
            "ConstraintRef": "#/components/schemas/ConstraintRef",
            "AttachmentRef": "#/components/schemas/AttachmentRef",
            "AssociationSpecificationRef": "#/components/schemas/AssociationSpecificationRef",
            "AgreementRef": "#/components/schemas/AgreementRef"
          }
        }
      },
      "EntityRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Addressable_FVO"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntityRef": "#/components/schemas/EntityRef_FVO",
            "ServiceLevelObjectiveRef": "#/components/schemas/ServiceLevelObjectiveRef_FVO",
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef_FVO",
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef_FVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_FVO",
            "PartyRef": "#/components/schemas/PartyRef_FVO",
            "OrganizationRef": "#/components/schemas/OrganizationRef_FVO",
            "ConstraintRef": "#/components/schemas/ConstraintRef_FVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef_FVO",
            "AssociationSpecificationRef": "#/components/schemas/AssociationSpecificationRef_FVO",
            "AgreementRef": "#/components/schemas/AgreementRef_FVO"
          }
        }
      },
      "EntityRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntityRef": "#/components/schemas/EntityRef_MVO",
            "ServiceLevelObjectiveRef": "#/components/schemas/ServiceLevelObjectiveRef_MVO",
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef_MVO",
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef_MVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO",
            "PartyRef": "#/components/schemas/PartyRef_MVO",
            "OrganizationRef": "#/components/schemas/OrganizationRef_MVO",
            "ConstraintRef": "#/components/schemas/ConstraintRef_MVO",
            "AttachmentRef": "#/components/schemas/AttachmentRef_MVO",
            "AssociationSpecificationRef": "#/components/schemas/AssociationSpecificationRef_MVO",
            "AgreementRef": "#/components/schemas/AgreementRef_MVO"
          }
        }
      },
      "EntityRelationship": {
        "type": "object",
        "description": "A uni-directionmal relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          }
        }
      },
      "EntityRelationship_FVO": {
        "type": "object",
        "description": "A uni-directionmal relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          }
        },
        "required": [
          "relationshipType",
          "id",
          "@referredType",
          "@type"
        ]
      },
      "EntityRelationship_MVO": {
        "type": "object",
        "description": "A uni-directionmal relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          }
        }
      },
      "EntitySpecification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nFunctionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics.\nNote: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name given to the specification"
              },
              "description": {
                "type": "string",
                "description": "Description of the specification"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of the specification"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this catalog item"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "version": {
                "type": "string",
                "description": "specification version"
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue"
                }
              },
              "targetEntitySchema": {
                "$ref": "#/components/schemas/TargetEntitySchema"
              },
              "specCharacteristic": {
                "type": "array",
                "description": "List of characteristics that the entity can take",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Parties who manage or otherwise have an interest in this specification",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "constraint": {
                "description": "This is a list of constraint references applied to this specification",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConstraintRef"
                }
              },
              "entitySpecRelationship": {
                "type": "array",
                "description": "Relationship to another specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationRelationship"
                }
              },
              "specificationType": {
                "type": "array",
                "description": "types that drive this specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationType"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecification": "#/components/schemas/EntitySpecification",
            "ServiceLevelSpecification": "#/components/schemas/ServiceLevelSpecification"
          }
        }
      },
      "EntitySpecificationRelationship": {
        "type": "object",
        "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity specification"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/AssociationSpecificationRef"
          },
          "@baseType": {
            "type": "string"
          },
          "@schemaLocation": {
            "type": "string"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          }
        }
      },
      "EntitySpecificationRelationship_FVO": {
        "type": "object",
        "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity specification"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/AssociationSpecificationRef_FVO"
          },
          "@baseType": {
            "type": "string"
          },
          "@schemaLocation": {
            "type": "string"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          }
        },
        "required": [
          "role",
          "relationshipType",
          "validFor",
          "associationSpec"
        ]
      },
      "EntitySpecificationRelationship_MVO": {
        "type": "object",
        "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity specification"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/AssociationSpecificationRef_MVO"
          },
          "@baseType": {
            "type": "string"
          },
          "@schemaLocation": {
            "type": "string"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          }
        }
      },
      "EntitySpecificationType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "A means of classifying entity specifications that share things in common, for example characteristics, lines of business. Could be used for templating entity specifications",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the specification type"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail what the specification type is"
              },
              "role": {
                "type": "string",
                "description": "The nature of the type, for example a template, a categorization, a line of business"
              },
              "characteristic": {
                "type": "array",
                "description": "List of characteristics that the specifications share in common",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecificationType": "#/components/schemas/EntitySpecificationType"
          }
        }
      },
      "EntitySpecificationType_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "A means of classifying entity specifications that share things in common, for example characteristics, lines of business. Could be used for templating entity specifications",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the specification type"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail what the specification type is"
              },
              "role": {
                "type": "string",
                "description": "The nature of the type, for example a template, a categorization, a line of business"
              },
              "characteristic": {
                "type": "array",
                "description": "List of characteristics that the specifications share in common",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecificationType": "#/components/schemas/EntitySpecificationType_FVO"
          }
        }
      },
      "EntitySpecificationType_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "A means of classifying entity specifications that share things in common, for example characteristics, lines of business. Could be used for templating entity specifications",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the specification type"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail what the specification type is"
              },
              "role": {
                "type": "string",
                "description": "The nature of the type, for example a template, a categorization, a line of business"
              },
              "characteristic": {
                "type": "array",
                "description": "List of characteristics that the specifications share in common",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecificationType": "#/components/schemas/EntitySpecificationType_MVO"
          }
        }
      },
      "EntitySpecification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nFunctionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics.\nNote: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name given to the specification"
              },
              "description": {
                "type": "string",
                "description": "Description of the specification"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of the specification"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this catalog item"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "version": {
                "type": "string",
                "description": "specification version"
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
                }
              },
              "targetEntitySchema": {
                "$ref": "#/components/schemas/TargetEntitySchema_FVO"
              },
              "specCharacteristic": {
                "type": "array",
                "description": "List of characteristics that the entity can take",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Parties who manage or otherwise have an interest in this specification",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "constraint": {
                "description": "This is a list of constraint references applied to this specification",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConstraintRef_FVO"
                }
              },
              "entitySpecRelationship": {
                "type": "array",
                "description": "Relationship to another specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationRelationship_FVO"
                }
              },
              "specificationType": {
                "type": "array",
                "description": "types that drive this specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationType_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecification": "#/components/schemas/EntitySpecification_FVO",
            "ServiceLevelSpecification": "#/components/schemas/ServiceLevelSpecification_FVO"
          }
        }
      },
      "EntitySpecification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nFunctionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics.\nNote: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name given to the specification"
              },
              "description": {
                "type": "string",
                "description": "Description of the specification"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of the specification"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this catalog item"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "version": {
                "type": "string",
                "description": "specification version"
              },
              "attachment": {
                "type": "array",
                "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
                }
              },
              "targetEntitySchema": {
                "$ref": "#/components/schemas/TargetEntitySchema_MVO"
              },
              "specCharacteristic": {
                "type": "array",
                "description": "List of characteristics that the entity can take",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicSpecification_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Parties who manage or otherwise have an interest in this specification",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "constraint": {
                "description": "This is a list of constraint references applied to this specification",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConstraintRef_MVO"
                }
              },
              "entitySpecRelationship": {
                "type": "array",
                "description": "Relationship to another specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationRelationship_MVO"
                }
              },
              "specificationType": {
                "type": "array",
                "description": "types that drive this specification",
                "items": {
                  "$ref": "#/components/schemas/EntitySpecificationType_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "EntitySpecification": "#/components/schemas/EntitySpecification_MVO",
            "ServiceLevelSpecification": "#/components/schemas/ServiceLevelSpecification_MVO"
          }
        }
      },
      "Entity_FVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Addressable_FVO"
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explnatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              }
            }
          }
        ]
      },
      "Event_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explnatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef_FVO"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef_FVO"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              }
            },
            "required": [
              "eventId",
              "eventTime",
              "eventType",
              "event"
            ]
          }
        ]
      },
      "Event_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explnatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef_MVO"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef_MVO"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              }
            },
            "required": [
              "eventId",
              "eventTime",
              "eventType",
              "event"
            ]
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "Extensible_FVO": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier"
          }
        }
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_FVO"
          }
        }
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_MVO"
          }
        }
      },
      "Individual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "IndividualIdentification": {
        "type": "object",
        "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
        "properties": {
          "identificationId": {
            "type": "string",
            "description": "Identifier"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Authority which has issued the identifier, such as: social security, town hall"
          },
          "issuingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the identifier was issued"
          },
          "identificationType": {
            "type": "string",
            "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "attachment": {
            "$ref": "#/components/schemas/AttachmentRefOrValue"
          }
        }
      },
      "IndividualIdentification_FVO": {
        "type": "object",
        "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
        "properties": {
          "identificationId": {
            "type": "string",
            "description": "Identifier"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Authority which has issued the identifier, such as: social security, town hall"
          },
          "issuingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the identifier was issued"
          },
          "identificationType": {
            "type": "string",
            "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "attachment": {
            "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
          }
        }
      },
      "IndividualIdentification_MVO": {
        "type": "object",
        "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
        "properties": {
          "identificationId": {
            "type": "string",
            "description": "Identifier"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Authority which has issued the identifier, such as: social security, town hall"
          },
          "issuingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the identifier was issued"
          },
          "identificationType": {
            "type": "string",
            "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "attachment": {
            "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
          }
        }
      },
      "IndividualStateType": {
        "enum": [
          "initialized",
          "validated",
          "deceased"
        ],
        "type": "string",
        "description": "Valid values for the lifecycle state of the individual"
      },
      "Individual_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_FVO"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "Individual_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_MVO"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "KeyIndicator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "KeyIndicator are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the key indicator"
              },
              "category": {
                "type": "string",
                "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent"
              },
              "isBundled": {
                "type": "boolean",
                "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)"
              },
              "transformationAlgorithmOfKQI": {
                "type": "string",
                "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
              },
              "indicatorType": {
                "type": "string",
                "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI)",
                "enum": [
                  "KQI",
                  "KPI"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "keyIndicatorRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KeyIndicatorRelationship"
                },
                "description": "A list of key indicator relationships related to this object"
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of entities related to this parameter",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntity"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "KeyIndicator": "#/components/schemas/KeyIndicator"
          }
        }
      },
      "KeyIndicatorRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRelationship"
          },
          {
            "type": "object",
            "description": "A relationship between/among key indicators",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as contains, required, ..."
              }
            }
          }
        ]
      },
      "KeyIndicatorRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRelationship_FVO"
          },
          {
            "type": "object",
            "description": "A relationship between/among key indicators",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as contains, required, ..."
              }
            },
            "required": [
              "relationshipType",
              "targetEntity"
            ]
          }
        ]
      },
      "KeyIndicatorRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRelationship_MVO"
          },
          {
            "type": "object",
            "description": "A relationship between/among key indicators",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship such as contains, required, ..."
              }
            }
          }
        ]
      },
      "KeyIndicator_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "KeyIndicator are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the key indicator"
              },
              "category": {
                "type": "string",
                "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent"
              },
              "isBundled": {
                "type": "boolean",
                "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)"
              },
              "transformationAlgorithmOfKQI": {
                "type": "string",
                "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
              },
              "indicatorType": {
                "type": "string",
                "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI)",
                "enum": [
                  "KQI",
                  "KPI"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "keyIndicatorRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KeyIndicatorRelationship_FVO"
                },
                "description": "A list of key indicator relationships related to this object"
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of entities related to this parameter",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntity_FVO"
                }
              }
            },
            "required": [
              "conformanceComparator",
              "conformanceTarget",
              "serviceLevelObjectiveParameter"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "KeyIndicator": "#/components/schemas/KeyIndicator_FVO"
          }
        }
      },
      "KeyIndicator_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "KeyIndicator are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the key indicator"
              },
              "category": {
                "type": "string",
                "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent"
              },
              "isBundled": {
                "type": "boolean",
                "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)"
              },
              "transformationAlgorithmOfKQI": {
                "type": "string",
                "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
              },
              "indicatorType": {
                "type": "string",
                "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI)",
                "enum": [
                  "KQI",
                  "KPI"
                ]
              },
              "keyIndicatorRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KeyIndicatorRelationship_MVO"
                },
                "description": "A list of key indicator relationships related to this object"
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of entities related to this parameter",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntity_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "KeyIndicator": "#/components/schemas/KeyIndicator_MVO"
          }
        }
      },
      "LanguageAbility": {
        "type": "object",
        "description": "Ability of an individual to understand or converse in a language.",
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Language code (RFC 5646)"
          },
          "languageName": {
            "type": "string",
            "description": "Language name"
          },
          "isFavouriteLanguage": {
            "type": "boolean",
            "description": "A “true” value specifies whether the language is considered by the individual as his favourite one"
          },
          "writingProficiency": {
            "type": "string",
            "description": "Writing proficiency evaluated for this language"
          },
          "readingProficiency": {
            "type": "string",
            "description": "Reading proficiency evaluated for this language"
          },
          "speakingProficiency": {
            "type": "string",
            "description": "Speaking proficiency evaluated for this language"
          },
          "listeningProficiency": {
            "type": "string",
            "description": "Listening proficiency evaluated for this language"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "Organization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "OrganizationChildRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship"
          }
        }
      },
      "OrganizationChildRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship_FVO"
          }
        }
      },
      "OrganizationChildRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship_MVO"
          }
        }
      },
      "OrganizationIdentification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification"
          }
        }
      },
      "OrganizationIdentification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification_FVO"
          }
        }
      },
      "OrganizationIdentification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification_MVO"
          }
        }
      },
      "OrganizationParentRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship"
          }
        }
      },
      "OrganizationParentRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship_FVO"
          }
        }
      },
      "OrganizationParentRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship_MVO"
          }
        }
      },
      "OrganizationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "OrganizationRef_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "OrganizationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "OrganizationStateType": {
        "enum": [
          "initialized",
          "validated",
          "closed"
        ],
        "type": "string",
        "description": "Valid values for the lifecycle state of the organization"
      },
      "Organization_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization_FVO"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_FVO"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship_FVO"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship_FVO"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "Organization_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization_MVO"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_MVO"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship_MVO"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship_MVO"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "OtherNameIndividual": {
        "type": "object",
        "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name.",
        "properties": {
          "title": {
            "type": "string",
            "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,...."
          },
          "aristocraticTitle": {
            "type": "string",
            "description": "e.g. Baron, Graf, Earl, etc."
          },
          "generation": {
            "type": "string",
            "description": "e.g. Sr, Jr, etc."
          },
          "givenName": {
            "type": "string",
            "description": "First name"
          },
          "preferredGivenName": {
            "type": "string",
            "description": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
          },
          "familyNamePrefix": {
            "type": "string",
            "description": "Family name prefix"
          },
          "familyName": {
            "type": "string",
            "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name or birth name (name one has for official purposes)"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial"
          },
          "fullName": {
            "type": "string",
            "description": "Full name flatten (first, middle, and last names)"
          },
          "formattedName": {
            "type": "string",
            "description": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean, etc.)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "OtherNameOrganization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization"
          }
        }
      },
      "OtherNameOrganization_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization_FVO"
          }
        }
      },
      "OtherNameOrganization_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization_MVO"
          }
        }
      },
      "Party": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party",
            "Organization": "#/components/schemas/Organization",
            "Individual": "#/components/schemas/Individual"
          }
        }
      },
      "PartyCreditProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "format": "int32",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile"
          }
        }
      },
      "PartyCreditProfile_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "format": "int32",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile_FVO"
          }
        }
      },
      "PartyCreditProfile_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "format": "int32",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile_MVO"
          }
        }
      },
      "PartyOrPartyRole": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          },
          {
            "$ref": "#/components/schemas/Individual"
          },
          {
            "$ref": "#/components/schemas/Organization"
          },
          {
            "$ref": "#/components/schemas/PartyRole"
          },
          {
            "$ref": "#/components/schemas/Supplier"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner"
          },
          {
            "$ref": "#/components/schemas/Consumer"
          },
          {
            "$ref": "#/components/schemas/Producer"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef",
            "Individual": "#/components/schemas/Individual",
            "Organization": "#/components/schemas/Organization",
            "PartyRole": "#/components/schemas/PartyRole",
            "Supplier": "#/components/schemas/Supplier",
            "BusinessPartner": "#/components/schemas/BusinessPartner",
            "Consumer": "#/components/schemas/Consumer",
            "Producer": "#/components/schemas/Producer"
          }
        }
      },
      "PartyOrPartyRole_FVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_FVO"
          },
          {
            "$ref": "#/components/schemas/Individual_FVO"
          },
          {
            "$ref": "#/components/schemas/Organization_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_FVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_FVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_FVO"
          },
          {
            "$ref": "#/components/schemas/Producer_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_FVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_FVO",
            "Individual": "#/components/schemas/Individual_FVO",
            "Organization": "#/components/schemas/Organization_FVO",
            "PartyRole": "#/components/schemas/PartyRole_FVO",
            "Supplier": "#/components/schemas/Supplier_FVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_FVO",
            "Consumer": "#/components/schemas/Consumer_FVO",
            "Producer": "#/components/schemas/Producer_FVO"
          }
        }
      },
      "PartyOrPartyRole_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Individual_MVO"
          },
          {
            "$ref": "#/components/schemas/Organization_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_MVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_MVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_MVO"
          },
          {
            "$ref": "#/components/schemas/Producer_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_MVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO",
            "Individual": "#/components/schemas/Individual_MVO",
            "Organization": "#/components/schemas/Organization_MVO",
            "PartyRole": "#/components/schemas/PartyRole_MVO",
            "Supplier": "#/components/schemas/Supplier_MVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_MVO",
            "Consumer": "#/components/schemas/Consumer_MVO",
            "Producer": "#/components/schemas/Producer_MVO"
          }
        }
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef"
          }
        }
      },
      "PartyRef_FVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "PartyRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole",
            "Supplier": "#/components/schemas/Supplier",
            "Producer": "#/components/schemas/Producer",
            "Consumer": "#/components/schemas/Consumer",
            "BusinessPartner": "#/components/schemas/BusinessPartner"
          }
        }
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ]
      },
      "PartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ]
      },
      "PartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ]
      },
      "PartyRoleSpecificationRef": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRoleSpecificationRef_FVO": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PartyRoleSpecificationRef_MVO": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "PartyRole_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef_FVO"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef_FVO"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef_FVO"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef_FVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_FVO"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef_FVO"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "name",
              "engagedParty"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole_FVO",
            "Supplier": "#/components/schemas/Supplier_FVO",
            "Producer": "#/components/schemas/Producer_FVO",
            "Consumer": "#/components/schemas/Consumer_FVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_FVO"
          }
        }
      },
      "PartyRole_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef_MVO"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef_MVO"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef_MVO"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef_MVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef_MVO"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole_MVO",
            "Supplier": "#/components/schemas/Supplier_MVO",
            "Producer": "#/components/schemas/Producer_MVO",
            "Consumer": "#/components/schemas/Consumer_MVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_MVO"
          }
        }
      },
      "Party_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_FVO"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile_FVO"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_FVO"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party_FVO",
            "Organization": "#/components/schemas/Organization_FVO",
            "Individual": "#/components/schemas/Individual_FVO"
          }
        }
      },
      "Party_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_MVO"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile_MVO"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party_MVO",
            "Organization": "#/components/schemas/Organization_MVO",
            "Individual": "#/components/schemas/Individual_MVO"
          }
        }
      },
      "PaymentMethodRef": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PaymentMethodRef_FVO": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PaymentMethodRef_MVO": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "PrescribedAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Contains information on a prescribed action that should be applied",
            "properties": {
              "actionType": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "ProcessFlow",
                  "Task",
                  "Notification"
                ]
              },
              "input": {
                "type": "object",
                "$ref": "#/components/schemas/Any"
              },
              "output": {
                "type": "object",
                "$ref": "#/components/schemas/Any"
              },
              "headers": {
                "type": "object",
                "$ref": "#/components/schemas/Any"
              },
              "name": {
                "type": "string",
                "description": "Name given to the action"
              },
              "id": {
                "type": "string",
                "description": "id given to the action"
              },
              "description": {
                "type": "string",
                "description": "A free-form description of the prescribed action."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PrescribedAction": "#/components/schemas/PrescribedAction"
          }
        }
      },
      "PrescribedAction_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Contains information on a prescribed action that should be applied",
            "properties": {
              "actionType": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "ProcessFlow",
                  "Task",
                  "Notification"
                ]
              },
              "input": {
                "type": "object",
                "$ref": "#/components/schemas/Any_FVO"
              },
              "output": {
                "type": "object",
                "$ref": "#/components/schemas/Any_FVO"
              },
              "headers": {
                "type": "object",
                "$ref": "#/components/schemas/Any_FVO"
              },
              "name": {
                "type": "string",
                "description": "Name given to the action"
              },
              "id": {
                "type": "string",
                "description": "id given to the action"
              },
              "description": {
                "type": "string",
                "description": "A free-form description of the prescribed action."
              }
            },
            "required": [
              "conformanceComparator",
              "conformanceTarget",
              "serviceLevelObjectiveParameter"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PrescribedAction": "#/components/schemas/PrescribedAction_FVO"
          }
        }
      },
      "PrescribedAction_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Contains information on a prescribed action that should be applied",
            "properties": {
              "actionType": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "ProcessFlow",
                  "Task",
                  "Notification"
                ]
              },
              "input": {
                "type": "object",
                "$ref": "#/components/schemas/Any_MVO"
              },
              "output": {
                "type": "object",
                "$ref": "#/components/schemas/Any_MVO"
              },
              "headers": {
                "type": "object",
                "$ref": "#/components/schemas/Any_MVO"
              },
              "name": {
                "type": "string",
                "description": "Name given to the action"
              },
              "description": {
                "type": "string",
                "description": "A free-form description of the prescribed action."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PrescribedAction": "#/components/schemas/PrescribedAction_MVO"
          }
        }
      },
      "Producer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Producer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Producer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "Quantity": {
        "type": "object",
        "description": "An amount in a given unit",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "default": 1,
            "description": "Numeric value in a given unit"
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        }
      },
      "RelatedEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance.",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRef"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedEntity": "#/components/schemas/RelatedEntity"
          }
        }
      },
      "RelatedEntity_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance.",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRef_FVO"
              }
            },
            "required": [
              "role",
              "entity"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedEntity": "#/components/schemas/RelatedEntity_FVO"
          }
        }
      },
      "RelatedEntity_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance.",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRef_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedEntity": "#/components/schemas/RelatedEntity_MVO"
          }
        }
      },
      "RelatedPartyOrPartyRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole"
          }
        }
      },
      "RelatedPartyOrPartyRole_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_FVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
          }
        }
      },
      "RelatedPartyOrPartyRole_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
          }
        }
      },
      "RelatedPartyRefOrPartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyRefOrPartyRoleRef": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
          }
        }
      },
      "ServiceLevelObjective": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "conformancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "conformanceTarget": {
                "type": "string",
                "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
              },
              "graceTimes": {
                "type": "string",
                "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
              },
              "name": {
                "type": "string",
                "description": "The name of the service level objectives."
              },
              "thresholdTarget": {
                "type": "string",
                "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
              },
              "tolerancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "toleranceTarget": {
                "type": "string",
                "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "keyIndicator": {
                "$ref": "#/components/schemas/KeyIndicator"
              },
              "consequence": {
                "type": "array",
                "description": "A list of consequences for this objective.",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                }
              },
              "threshold": {
                "type": "array",
                "description": "A list of Thresholds that applies to this objective",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold"
                },
                "minItems": 1
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod"
                },
                "description": "the SLO applicability in terms of timing"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjective": "#/components/schemas/ServiceLevelObjective"
          }
        }
      },
      "ServiceLevelObjectiveAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelObjectiveAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelObjectiveAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveAttributeValueChangeEvent": "#/components/schemas/ServiceLevelObjectiveAttributeValueChangeEvent"
          }
        }
      },
      "ServiceLevelObjectiveAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ServiceLevelObjectiveAttributeValueChangeEventPayload generic structure",
        "properties": {
          "serviceLevelObjective": {
            "$ref": "#/components/schemas/ServiceLevelObjective"
          }
        }
      },
      "ServiceLevelObjectiveCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelObjectiveCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelObjectiveCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveCreateEvent": "#/components/schemas/ServiceLevelObjectiveCreateEvent"
          }
        }
      },
      "ServiceLevelObjectiveCreateEventPayload": {
        "type": "object",
        "description": "ServiceLevelObjectiveCreateEventPayload generic structure",
        "properties": {
          "serviceLevelObjective": {
            "$ref": "#/components/schemas/ServiceLevelObjective"
          }
        }
      },
      "ServiceLevelObjectiveDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelObjectiveDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelObjectiveDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveDeleteEvent": "#/components/schemas/ServiceLevelObjectiveDeleteEvent"
          }
        }
      },
      "ServiceLevelObjectiveDeleteEventPayload": {
        "type": "object",
        "description": "ServiceLevelObjectiveDeleteEventPayload generic structure",
        "properties": {
          "serviceLevelObjective": {
            "$ref": "#/components/schemas/ServiceLevelObjective"
          }
        }
      },
      "ServiceLevelObjectiveRef": {
        "type": "object",
        "description": "A reference to ServiceLevelObjective object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "ServiceLevelObjectiveRef_FVO": {
        "type": "object",
        "description": "A reference to ServiceLevelObjective object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "ServiceLevelObjectiveRef_MVO": {
        "type": "object",
        "description": "A reference to ServiceLevelObjective object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ]
      },
      "ServiceLevelObjectiveThreshold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is mandatory ",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of the threshold"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a threshold is known and distinguished from other thresholds."
              },
              "ThresholdType": {
                "type": "string",
                "description": "The Threshold Type may be either LogicDefinition or PreDefined",
                "enum": [
                  "LogicDefinition",
                  "PreDefined"
                ]
              },
              "consequence": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                },
                "description": "A threshold crossing or a threshold ceased to be crossing results in a consequence."
              },
              "thresholdCondition": {
                "type": "string",
                "enum": [
                  "Raise",
                  "Clear"
                ],
                "description": "A concrete threshold may have two possible values: \\\"Raise\\\" - a threshold was crossed or \\\"Clear\\\" - a threshold ceased crossing"
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod"
                },
                "description": "the threshold applicability in terms of timing"
              },
              "upperBound": {
                "$ref": "#/components/schemas/Quantity"
              },
              "lowerBound": {
                "$ref": "#/components/schemas/Quantity"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveThreshold": "#/components/schemas/ServiceLevelObjectiveThreshold"
          }
        }
      },
      "ServiceLevelObjectiveThreshold_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is mandatory ",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of the threshold"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a threshold is known and distinguished from other thresholds."
              },
              "ThresholdType": {
                "type": "string",
                "description": "The Threshold Type may be either LogicDefinition or PreDefined",
                "enum": [
                  "LogicDefinition",
                  "PreDefined"
                ]
              },
              "consequence": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence_FVO"
                },
                "description": "A threshold crossing or a threshold ceased to be crossing results in a consequence."
              },
              "thresholdCondition": {
                "type": "string",
                "enum": [
                  "Raise",
                  "Clear"
                ],
                "description": "A concrete threshold may have two possible values: \\\"Raise\\\" - a threshold was crossed or \\\"Clear\\\" - a threshold ceased crossing"
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod_FVO"
                },
                "description": "the threshold applicability in terms of timing"
              },
              "upperBound": {
                "$ref": "#/components/schemas/Quantity"
              },
              "lowerBound": {
                "$ref": "#/components/schemas/Quantity"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveThreshold": "#/components/schemas/ServiceLevelObjectiveThreshold_FVO"
          }
        }
      },
      "ServiceLevelObjectiveThreshold_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is mandatory ",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of the threshold"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a threshold is known and distinguished from other thresholds."
              },
              "ThresholdType": {
                "type": "string",
                "description": "The Threshold Type may be either LogicDefinition or PreDefined",
                "enum": [
                  "LogicDefinition",
                  "PreDefined"
                ]
              },
              "consequence": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence_MVO"
                },
                "description": "A threshold crossing or a threshold ceased to be crossing results in a consequence."
              },
              "thresholdCondition": {
                "type": "string",
                "enum": [
                  "Raise",
                  "Clear"
                ],
                "description": "A concrete threshold may have two possible values: \\\"Raise\\\" - a threshold was crossed or \\\"Clear\\\" - a threshold ceased crossing"
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod_MVO"
                },
                "description": "the threshold applicability in terms of timing"
              },
              "upperBound": {
                "$ref": "#/components/schemas/Quantity"
              },
              "lowerBound": {
                "$ref": "#/components/schemas/Quantity"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjectiveThreshold": "#/components/schemas/ServiceLevelObjectiveThreshold_MVO"
          }
        }
      },
      "ServiceLevelObjective_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "conformancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "conformanceTarget": {
                "type": "string",
                "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
              },
              "graceTimes": {
                "type": "string",
                "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
              },
              "name": {
                "type": "string",
                "description": "The name of the service level objectives."
              },
              "thresholdTarget": {
                "type": "string",
                "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
              },
              "tolerancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "toleranceTarget": {
                "type": "string",
                "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "keyIndicator": {
                "$ref": "#/components/schemas/KeyIndicator_FVO"
              },
              "consequence": {
                "type": "array",
                "description": "A list of consequences for this objective.",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence_FVO"
                }
              },
              "threshold": {
                "type": "array",
                "description": "A list of Thresholds that applies to this objective",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold_FVO"
                },
                "minItems": 1
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod_FVO"
                },
                "description": "the SLO applicability in terms of timing"
              }
            },
            "required": [
              "conformanceComparator",
              "conformanceTarget",
              "serviceLevelObjectiveParameter"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjective": "#/components/schemas/ServiceLevelObjective_FVO"
          }
        }
      },
      "ServiceLevelObjective_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
            "properties": {
              "conformancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "conformanceTarget": {
                "type": "string",
                "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
              },
              "graceTimes": {
                "type": "string",
                "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
              },
              "name": {
                "type": "string",
                "description": "The name of the service level objectives."
              },
              "thresholdTarget": {
                "type": "string",
                "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
              },
              "tolerancePeriod": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "toleranceTarget": {
                "type": "string",
                "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
              },
              "keyIndicator": {
                "$ref": "#/components/schemas/KeyIndicator_MVO"
              },
              "consequence": {
                "type": "array",
                "description": "A list of consequences for this objective.",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelSpecConsequence_MVO"
                }
              },
              "threshold": {
                "type": "array",
                "description": "A list of Thresholds that applies to this objective",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold_MVO"
                },
                "minItems": 1
              },
              "applicability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTimePeriod_MVO"
                },
                "description": "the SLO applicability in terms of timing"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelObjective": "#/components/schemas/ServiceLevelObjective_MVO"
          }
        }
      },
      "ServiceLevelSpecConsequence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A target/threshold crossing or a target/threshold ceased to be crossing results in a consequence",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of a Consequence"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a Consequence is known and distinguished from other measurements"
              },
              "prescribedAction": {
                "$ref": "#/components/schemas/PrescribedAction"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecConsequence": "#/components/schemas/ServiceLevelSpecConsequence"
          }
        }
      },
      "ServiceLevelSpecConsequence_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "A target/threshold crossing or a target/threshold ceased to be crossing results in a consequence",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of a Consequence"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a Consequence is known and distinguished from other measurements"
              },
              "prescribedAction": {
                "$ref": "#/components/schemas/PrescribedAction_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecConsequence": "#/components/schemas/ServiceLevelSpecConsequence_FVO"
          }
        }
      },
      "ServiceLevelSpecConsequence_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A target/threshold crossing or a target/threshold ceased to be crossing results in a consequence",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of a Consequence"
              },
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which a Consequence is known and distinguished from other measurements"
              },
              "prescribedAction": {
                "$ref": "#/components/schemas/PrescribedAction_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecConsequence": "#/components/schemas/ServiceLevelSpecConsequence_MVO"
          }
        }
      },
      "ServiceLevelSpecification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntitySpecification"
          },
          {
            "type": "object",
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
            "properties": {
              "description": {
                "type": "string",
                "description": "A brief introduction of a service level specification."
              },
              "href": {
                "type": "string",
                "description": "The hyperlink to access a service level specification."
              },
              "id": {
                "type": "string",
                "description": "The identifier to a service level specification."
              },
              "name": {
                "type": "string",
                "description": "The name of Service Level Specification"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "serviceLevelObjective": {
                "type": "array",
                "description": "A list of objectives related to this service level specification",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveRef",
                  "minItems": 1
                }
              }
            }
          }
        ]
      },
      "ServiceLevelSpecificationAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelSpecificationAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelSpecificationAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecificationAttributeValueChangeEvent": "#/components/schemas/ServiceLevelSpecificationAttributeValueChangeEvent"
          }
        }
      },
      "ServiceLevelSpecificationAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ServiceLevelSpecificationAttributeValueChangeEventPayload generic structure",
        "properties": {
          "serviceLevelSpecification": {
            "$ref": "#/components/schemas/ServiceLevelSpecification"
          }
        }
      },
      "ServiceLevelSpecificationCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelSpecificationCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelSpecificationCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecificationCreateEvent": "#/components/schemas/ServiceLevelSpecificationCreateEvent"
          }
        }
      },
      "ServiceLevelSpecificationCreateEventPayload": {
        "type": "object",
        "description": "ServiceLevelSpecificationCreateEventPayload generic structure",
        "properties": {
          "serviceLevelSpecification": {
            "$ref": "#/components/schemas/ServiceLevelSpecification"
          }
        }
      },
      "ServiceLevelSpecificationDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceLevelSpecificationDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceLevelSpecificationDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ServiceLevelSpecificationDeleteEvent": "#/components/schemas/ServiceLevelSpecificationDeleteEvent"
          }
        }
      },
      "ServiceLevelSpecificationDeleteEventPayload": {
        "type": "object",
        "description": "ServiceLevelSpecificationDeleteEventPayload generic structure",
        "properties": {
          "serviceLevelSpecification": {
            "$ref": "#/components/schemas/ServiceLevelSpecification"
          }
        }
      },
      "ServiceLevelSpecification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntitySpecification_FVO"
          },
          {
            "type": "object",
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
            "properties": {
              "description": {
                "type": "string",
                "description": "A brief introduction of a service level specification."
              },
              "href": {
                "type": "string",
                "description": "The hyperlink to access a service level specification."
              },
              "id": {
                "type": "string",
                "description": "The identifier to a service level specification."
              },
              "name": {
                "type": "string",
                "description": "The name of Service Level Specification"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "serviceLevelObjective": {
                "type": "array",
                "description": "A list of objectives related to this service level specification",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveRef_FVO",
                  "minItems": 1
                }
              }
            },
            "required": [
              "name",
              "relatedServiceLevelObjective"
            ]
          }
        ]
      },
      "ServiceLevelSpecification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntitySpecification_MVO"
          },
          {
            "type": "object",
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
            "properties": {
              "description": {
                "type": "string",
                "description": "A brief introduction of a service level specification."
              },
              "name": {
                "type": "string",
                "description": "The name of Service Level Specification"
              },
              "serviceLevelObjective": {
                "type": "array",
                "description": "A list of objectives related to this service level specification",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveRef_MVO",
                  "minItems": 1
                }
              }
            }
          }
        ]
      },
      "Skill": {
        "type": "object",
        "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).",
        "properties": {
          "skillCode": {
            "type": "string",
            "description": "Code of the skill"
          },
          "skillName": {
            "type": "string",
            "description": "Name of the skill, such as Java language"
          },
          "evaluatedLevel": {
            "type": "string",
            "description": "Level of expertise in a skill evaluated for an individual"
          },
          "comment": {
            "type": "string",
            "description": "A free text comment linked to the evaluation done"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Supplier_FVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Supplier_MVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "TargetEntitySchema": {
        "type": "object",
        "description": "The reference object to the schema and type of target entity which is described by a specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target entity"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target entity"
          }
        }
      },
      "TargetEntitySchema_FVO": {
        "type": "object",
        "description": "The reference object to the schema and type of target entity which is described by a specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target entity"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target entity"
          }
        },
        "required": [
          "@type",
          "@schemaLocation"
        ]
      },
      "TargetEntitySchema_MVO": {
        "type": "object",
        "description": "The reference object to the schema and type of target entity which is described by a specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target entity"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target entity"
          }
        }
      },
      "TaxDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.).",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition"
          }
        }
      },
      "TaxDefinition_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.).",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition_FVO"
          }
        }
      },
      "TaxDefinition_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.).",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition_MVO"
          }
        }
      },
      "TaxExemptionCertificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate"
          }
        }
      },
      "TaxExemptionCertificate_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition_FVO"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate_FVO"
          }
        }
      },
      "TaxExemptionCertificate_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition_MVO"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate_MVO"
          }
        }
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "Error": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Error": "#/components/schemas/Error"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      }
    },
    "parameters": {
      "Id": {
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "in": "path",
        "description": "Identifier of the Resource"
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "Comma-separated properties to be provided in response",
        "schema": {
          "type": "string"
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "description": "Requested index for start of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Requested number of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "ServiceLevelObjective_FVO": {
        "description": "The ServiceLevelObjective to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective_FVO"
            },
            "examples": {
              "ServiceLevelObjective_create_example_01": {
                "$ref": "#/components/examples/ServiceLevelObjective_create_example_01_request"
              },
              "ServiceLevelObjective_create_example_11": {
                "$ref": "#/components/examples/ServiceLevelObjective_create_example_11_request"
              }
            }
          }
        },
        "required": true
      },
      "ServiceLevelObjective_MVO": {
        "description": "The ServiceLevelObjective to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          }
        },
        "required": true
      },
      "ServiceLevelObjectiveCreateEvent": {
        "description": "ServiceLevelObjective create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjectiveCreateEvent"
            }
          }
        },
        "required": true
      },
      "ServiceLevelObjectiveAttributeValueChangeEvent": {
        "description": "ServiceLevelObjective attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjectiveAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ServiceLevelObjectiveDeleteEvent": {
        "description": "ServiceLevelObjective delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjectiveDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ServiceLevelSpecification_FVO": {
        "description": "The ServiceLevelSpecification to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification_FVO"
            }
          }
        },
        "required": true
      },
      "ServiceLevelSpecification_MVO": {
        "description": "The ServiceLevelSpecification to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          }
        },
        "required": true
      },
      "ServiceLevelSpecificationCreateEvent": {
        "description": "ServiceLevelSpecification create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationCreateEvent"
            }
          }
        },
        "required": true
      },
      "ServiceLevelSpecificationAttributeValueChangeEvent": {
        "description": "ServiceLevelSpecification attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ServiceLevelSpecificationDeleteEvent": {
        "description": "ServiceLevelSpecification delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationDeleteEvent"
            }
          }
        },
        "required": true
      },
      "KeyIndicator_FVO": {
        "description": "The KeyIndicator to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator_FVO"
            }
          }
        },
        "required": true
      },
      "KeyIndicator_MVO": {
        "description": "The KeyIndicator to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          }
        },
        "required": true
      },
      "PrescribedAction_FVO": {
        "description": "The PrescribedAction to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction_FVO"
            }
          }
        },
        "required": true
      },
      "PrescribedAction_MVO": {
        "description": "The PrescribedAction to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            }
          }
        },
        "required": true
      },
      "Hub_FVO": {
        "description": "Data containing the callback endpoint to deliver the information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub_FVO"
            }
          }
        },
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "202": {
        "description": "Accepted"
      },
      "204": {
        "description": "Deleted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "405": {
        "description": "Method Not allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "200ServiceLevelObjectiveArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceLevelObjective"
              }
            },
            "examples": {
              "ServiceLevelObjective_list_example": {
                "$ref": "#/components/examples/ServiceLevelObjective_list_example_response"
              }
            }
          }
        }
      },
      "200ServiceLevelObjective_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective"
            },
            "examples": {
              "ServiceLevelObjective_retrieve_example": {
                "$ref": "#/components/examples/ServiceLevelObjective_retrieve_example_response"
              }
            }
          }
        }
      },
      "200ServiceLevelObjective_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ServiceLevelObjective"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceLevelObjective"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ServiceLevelObjective"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceLevelObjective"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ServiceLevelObjective_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective"
            }
          }
        }
      },
      "201ServiceLevelObjective": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelObjective"
            },
            "examples": {
              "ServiceLevelObjective_create_example_01": {
                "$ref": "#/components/examples/ServiceLevelObjective_create_example_01_response"
              },
              "ServiceLevelObjective_create_example_11": {
                "$ref": "#/components/examples/ServiceLevelObjective_create_example_11_response"
              }
            }
          }
        }
      },
      "200ServiceLevelSpecificationArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceLevelSpecification"
              }
            }
          }
        }
      },
      "200ServiceLevelSpecification_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification"
            },
            "examples": {
              "ServiceLevelSpecification_list_example": {
                "$ref": "#/components/examples/ServiceLevelSpecification_list_example_response"
              },
              "ServiceLevelSpecification_retrieve_example": {
                "$ref": "#/components/examples/ServiceLevelSpecification_retrieve_example_response"
              }
            }
          }
        }
      },
      "200ServiceLevelSpecification_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ServiceLevelSpecification"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceLevelSpecification"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ServiceLevelSpecification"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceLevelSpecification"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ServiceLevelSpecification_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification"
            }
          }
        }
      },
      "201ServiceLevelSpecification": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceLevelSpecification"
            }
          }
        }
      },
      "200KeyIndicatorArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/KeyIndicator"
              }
            }
          }
        }
      },
      "200KeyIndicator_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator"
            }
          }
        }
      },
      "200KeyIndicator_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/KeyIndicator"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyIndicator"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/KeyIndicator"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyIndicator"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200KeyIndicator_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator"
            }
          }
        }
      },
      "201KeyIndicator": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KeyIndicator"
            }
          }
        }
      },
      "200PrescribedActionArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PrescribedAction"
              }
            }
          }
        }
      },
      "200PrescribedAction_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction"
            }
          }
        }
      },
      "200PrescribedAction_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrescribedAction"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrescribedAction"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrescribedAction"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrescribedAction"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200PrescribedAction_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction"
            }
          }
        }
      },
      "201PrescribedAction": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrescribedAction"
            }
          }
        }
      },
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Hub": {
        "description": "Notified",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub"
            }
          }
        }
      }
    },
    "headers": {
      "X-Total-Count": {
        "description": "Total number of items matching criteria",
        "schema": {
          "type": "integer"
        }
      },
      "X-Result-Count": {
        "description": "Actual number of items returned in the response body",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {},
    "examples": {
      "ServiceLevelObjective_list_example_response": {
        "value": [
          {
            "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3112",
            "id": "3112",
            "conformanceComparator": ">",
            "conformanceTarget": "32",
            "conformancePeriod": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "graceTimes": "3",
            "name": "Upload bandwidth",
            "thresholdTarget": "28",
            "toleranceTarget": "5",
            "tolerancePeriod": {
              "endDateTime": "20:00:00",
              "startDateTime": "06:00:00"
            },
            "serviceLevelObjectiveParameter": {
              "name": "speed",
              "serviceParmCategory": "technology specific",
              "serviceParmPerspective": " single user instance parameter",
              "transformationAlgorithmOfKQI": "KeepTheSame",
              "parameterType": "KPI",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              },
              "relatedEntity": [
                {
                  "id": "1988",
                  "href": "https://host:port/ServiceInventory/service/1988",
                  "name": "vCPE",
                  "role": "CPE",
                  "@referredType": "CPE"
                },
                {
                  "id": "2988",
                  "href": "https://host:port/ServiceInventory/service/2988",
                  "name": "GPON",
                  "role": "access",
                  "@referredType": "AccessService"
                }
              ]
            },
            "serviceLevelObjectiveConsequence": [
              {
                "prescribedAction": "https://service.com/vCPEBandwithAction",
                "validFor": {
                  "endDateTime": "2021-03-00T00:00:00+01:00",
                  "startDateTime": "2020-03-00T00:00:00+01:00"
                }
              },
              {
                "prescribedAction": "https://service.com/AccessBandwithAction",
                "validFor": {
                  "endDateTime": "2021-03-00T00:00:00+01:00",
                  "startDateTime": "2020-03-00T00:00:00+01:00"
                }
              }
            ]
          },
          {
            "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/4112",
            "id": "4112",
            "conformanceComparator": "<",
            "conformanceTarget": "20",
            "conformancePeriod": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "graceTimes": "3",
            "name": "Jitter",
            "thresholdTarget": "18",
            "toleranceTarget": "15",
            "tolerancePeriod": {
              "endDateTime": "20:00:00",
              "startDateTime": "06:00:00"
            },
            "serviceLevelObjectiveParameter": {
              "name": "speed",
              "serviceParmCategory": "technology specific",
              "serviceParmPerspective": " single user instance parameter",
              "transformationAlgorithmOfKQI": "KeepTheSame",
              "parameterType": "KPI",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              },
              "relatedEntity": [
                {
                  "id": "2988",
                  "href": "https://host:port/ServiceInventory/service/2988",
                  "name": "GPON",
                  "role": "access",
                  "@referredType": "AccessService"
                }
              ]
            },
            "serviceLevelObjectiveConsequence": [
              {
                "prescribedAction": "https://service.com/jitterAction",
                "validFor": {
                  "endDateTime": "2021-03-00T00:00:00+01:00",
                  "startDateTime": "2020-03-00T00:00:00+01:00"
                }
              }
            ]
          }
        ],
        "description": "Here's an example of a request for retrieving multiple service level objectives."
      },
      "ServiceLevelObjective_retrieve_example_response": {
        "value": {
          "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3112",
          "id": "3112",
          "conformanceComparator": ">",
          "conformanceTarget": "32",
          "conformancePeriod": {
            "endDateTime": "2021-03-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "graceTimes": "3",
          "name": "Upload bandwidth",
          "thresholdTarget": "28",
          "toleranceTarget": "5",
          "tolerancePeriod": {
            "endDateTime": "20:00:00",
            "startDateTime": "06:00:00"
          },
          "serviceLevelObjectiveParameter": {
            "name": "bandwidth",
            "serviceParmCategory": "service specific",
            "serviceParmPerspective": "aggregation",
            "transformationAlgorithmOfKQI": "KeepTheSame",
            "parameterType": "KPI",
            "validFor": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "relatedEntity": [
              {
                "id": "1988",
                "href": "https://host:port/ServiceInventory/service/1988",
                "name": "vCPE",
                "role": "CPE",
                "@referredType": "CPE"
              },
              {
                "id": "2988",
                "href": "https://host:port/ServiceInventory/service/2988",
                "name": "GPON",
                "role": "access",
                "@referredType": "AccessService"
              }
            ]
          },
          "serviceLevelObjectiveConsequence": [
            {
              "prescribedAction": "https://service.com/vCPEBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            },
            {
              "prescribedAction": "https://service.com/AccessBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            }
          ]
        },
        "description": "Here's an example of a request for retrieving a specific service level objective."
      },
      "ServiceLevelSpecification_list_example_response": {
        "value": {
          "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelSpecification/1112",
          "id": "1112",
          "description": "Maximum download/upload speed service level",
          "name": "Access bandwidth",
          "validFor": {
            "endDateTime": "2021-05-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "relatedServiceLevelObjective": [
            {
              "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3112",
              "id": "3112"
            },
            {
              "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3113",
              "id": "3113"
            }
          ]
        },
        "description": "Here's an example of a request for retrieving multiple service level specifications."
      },
      "ServiceLevelSpecification_retrieve_example_response": {
        "value": {
          "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelSpecification/1112",
          "id": "1112",
          "description": "Maximum download/upload speed service level",
          "name": "Access bandwidth",
          "validFor": {
            "endDateTime": "2021-05-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "relatedServiceLevelObjective": [
            {
              "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3112",
              "id": "3112"
            },
            {
              "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3113",
              "id": "3113"
            }
          ]
        },
        "description": "Here's an example of a request for retrieving a specific service level specification."
      },
      "ServiceLevelObjective_create_example_01_request": {
        "value": {
          "conformanceComparator": ">",
          "conformanceTarget": "32",
          "conformancePeriod": {
            "endDateTime": "2021-03-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "graceTimes": "3",
          "name": "Upload bandwidth",
          "thresholdTarget": "28",
          "toleranceTarget": "5",
          "tolerancePeriod": {
            "endDateTime": "20:00:00",
            "startDateTime": "06:00:00"
          },
          "serviceLevelObjectiveParameter": {
            "name": "speed",
            "serviceParmCategory": "technology specific",
            "serviceParmPerspective": " single user instance parameter",
            "transformationAlgorithmOfKQI": "KeepTheSame",
            "parameterType": "KPI",
            "validFor": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "relatedEntity": [
              {
                "id": "1988",
                "href": "https://host:port/ServiceInventory/service/1988",
                "name": "vCPE",
                "role": "CPE",
                "@referredType": "CPE"
              },
              {
                "id": "2988",
                "href": "https://host:port/ServiceInventory/service/2988",
                "name": "GPON",
                "role": "access",
                "@referredType": "AccessService"
              }
            ]
          },
          "serviceLevelObjectiveConsequence": [
            {
              "prescribedAction": "https://service.com/vCPEBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            },
            {
              "prescribedAction": "https://service.com/AccessBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            }
          ]
        },
        "description": "Here's an example of a request for creating a service level objectve."
      },
      "ServiceLevelObjective_create_example_01_response": {
        "value": {
          "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/3112",
          "id": "3112",
          "conformanceComparator": ">",
          "conformanceTarget": "32",
          "conformancePeriod": {
            "endDateTime": "2021-03-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "graceTimes": "3",
          "name": "Upload bandwidth",
          "thresholdTarget": "28",
          "toleranceTarget": "5",
          "tolerancePeriod": {
            "endDateTime": "20:00:00",
            "startDateTime": "06:00:00"
          },
          "serviceLevelObjectiveParameter": {
            "name": "speed",
            "serviceParmCategory": "technology specific",
            "serviceParmPerspective": " single user instance parameter",
            "transformationAlgorithmOfKQI": "KeepTheSame",
            "parameterType": "KPI",
            "validFor": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "relatedEntity": [
              {
                "id": "1988",
                "href": "https://host:port/ServiceInventory/service/1988",
                "name": "vCPE",
                "role": "CPE",
                "@referredType": "CPE"
              },
              {
                "id": "2988",
                "href": "https://host:port/ServiceInventory/service/2988",
                "name": "GPON",
                "role": "access",
                "@referredType": "AccessService"
              }
            ]
          },
          "serviceLevelObjectiveConsequence": [
            {
              "prescribedAction": "https://service.com/vCPEBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            },
            {
              "prescribedAction": "https://service.com/AccessBandwithAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            }
          ]
        },
        "description": "Response message"
      },
      "ServiceLevelObjective_create_example_11_request": {
        "value": {
          "conformanceComparator": "<",
          "conformanceTarget": "20",
          "conformancePeriod": {
            "endDateTime": "2021-03-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "graceTimes": "3",
          "name": "Jitter",
          "thresholdTarget": "18",
          "toleranceTarget": "15",
          "tolerancePeriod": {
            "endDateTime": "20:00:00",
            "startDateTime": "06:00:00"
          },
          "serviceLevelObjectiveParameter": {
            "name": "speed",
            "serviceParmCategory": "technology specific",
            "serviceParmPerspective": " single user instance parameter",
            "transformationAlgorithmOfKQI": "KeepTheSame",
            "parameterType": "KPI",
            "validFor": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "relatedEntity": [
              {
                "id": "2988",
                "href": "https://host:port/ServiceInventory/service/2988",
                "name": "GPON",
                "role": "access",
                "@referredType": "AccessService"
              }
            ]
          },
          "serviceLevelObjectiveConsequence": [
            {
              "prescribedAction": "https://service.com/jitterAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            }
          ]
        },
        "description": "Here's an example of a request for creating a servive level objective."
      },
      "ServiceLevelObjective_create_example_11_response": {
        "value": {
          "href": "https://host:port/tmf-api/serviceQualityManagement/v4/serviceLevelObjective/4112",
          "id": "4112",
          "conformanceComparator": "<",
          "conformanceTarget": "20",
          "conformancePeriod": {
            "endDateTime": "2021-03-00T00:00:00+01:00",
            "startDateTime": "2020-03-00T00:00:00+01:00"
          },
          "graceTimes": "3",
          "name": "Jitter",
          "thresholdTarget": "18",
          "toleranceTarget": "15",
          "tolerancePeriod": {
            "endDateTime": "20:00:00",
            "startDateTime": "06:00:00"
          },
          "serviceLevelObjectiveParameter": {
            "name": "speed",
            "serviceParmCategory": "technology specific",
            "serviceParmPerspective": " single user instance parameter",
            "transformationAlgorithmOfKQI": "KeepTheSame",
            "parameterType": "KPI",
            "validFor": {
              "endDateTime": "2021-03-00T00:00:00+01:00",
              "startDateTime": "2020-03-00T00:00:00+01:00"
            },
            "relatedEntity": [
              {
                "id": "2988",
                "href": "https://host:port/ServiceInventory/service/2988",
                "name": "GPON",
                "role": "access",
                "@referredType": "AccessService"
              }
            ]
          },
          "serviceLevelObjectiveConsequence": [
            {
              "prescribedAction": "https://service.com/jitterAction",
              "validFor": {
                "endDateTime": "2021-03-00T00:00:00+01:00",
                "startDateTime": "2020-03-00T00:00:00+01:00"
              }
            }
          ]
        },
        "description": "Response messa"
      }
    }
  }
}