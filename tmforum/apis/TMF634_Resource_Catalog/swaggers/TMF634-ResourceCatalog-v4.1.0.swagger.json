{
    "swagger": "2.0",
    "info": {
        "title": "Resource Catalog Management",
        "description": "## TMF API Reference: TMF634 - Resource Catalog Management\n\n### December 2019\n\nResource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources. \n\n### Operations\nResource Catalog API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity\n- Manage notification of events",
        "version": "4.1.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/resourceCatalog/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "resourceCatalog"
        },
        {
            "name": "resourceCategory"
        },
        {
            "name": "resourceCandidate"
        },
        {
            "name": "resourceSpecification"
        },
        {
            "name": "importJob"
        },
        {
            "name": "exportJob"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/resourceCatalog": {
            "get": {
                "operationId": "listResourceCatalog",
                "summary": "List or find ResourceCatalog objects",
                "description": "This operation list or find ResourceCatalog entities",
                "tags": [
                    "resourceCatalog"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceCatalog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createResourceCatalog",
                "summary": "Creates a ResourceCatalog",
                "description": "This operation creates a ResourceCatalog entity.",
                "tags": [
                    "resourceCatalog"
                ],
                "parameters": [
                    {
                        "name": "resourceCatalog",
                        "description": "The ResourceCatalog to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalog_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceCatalog/{id}": {
            "get": {
                "operationId": "retrieveResourceCatalog",
                "summary": "Retrieves a ResourceCatalog by ID",
                "description": "This operation retrieves a ResourceCatalog entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "resourceCatalog"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCatalog",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchResourceCatalog",
                "summary": "Updates partially a ResourceCatalog",
                "description": "This operation updates partially a ResourceCatalog entity.",
                "tags": [
                    "resourceCatalog"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCatalog",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "resourceCatalog",
                        "description": "The ResourceCatalog to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalog_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteResourceCatalog",
                "summary": "Deletes a ResourceCatalog",
                "description": "This operation deletes a ResourceCatalog entity.",
                "tags": [
                    "resourceCatalog"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCatalog",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceCategory": {
            "get": {
                "operationId": "listResourceCategory",
                "summary": "List or find ResourceCategory objects",
                "description": "This operation list or find ResourceCategory entities",
                "tags": [
                    "resourceCategory"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceCategory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createResourceCategory",
                "summary": "Creates a ResourceCategory",
                "description": "This operation creates a ResourceCategory entity.",
                "tags": [
                    "resourceCategory"
                ],
                "parameters": [
                    {
                        "name": "resourceCategory",
                        "description": "The ResourceCategory to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceCategory/{id}": {
            "get": {
                "operationId": "retrieveResourceCategory",
                "summary": "Retrieves a ResourceCategory by ID",
                "description": "This operation retrieves a ResourceCategory entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "resourceCategory"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCategory",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchResourceCategory",
                "summary": "Updates partially a ResourceCategory",
                "description": "This operation updates partially a ResourceCategory entity.",
                "tags": [
                    "resourceCategory"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCategory",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "resourceCategory",
                        "description": "The ResourceCategory to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteResourceCategory",
                "summary": "Deletes a ResourceCategory",
                "description": "This operation deletes a ResourceCategory entity.",
                "tags": [
                    "resourceCategory"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCategory",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceCandidate": {
            "get": {
                "operationId": "listResourceCandidate",
                "summary": "List or find ResourceCandidate objects",
                "description": "This operation list or find ResourceCandidate entities",
                "tags": [
                    "resourceCandidate"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceCandidate"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createResourceCandidate",
                "summary": "Creates a ResourceCandidate",
                "description": "This operation creates a ResourceCandidate entity.",
                "tags": [
                    "resourceCandidate"
                ],
                "parameters": [
                    {
                        "name": "resourceCandidate",
                        "description": "The ResourceCandidate to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidate_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceCandidate/{id}": {
            "get": {
                "operationId": "retrieveResourceCandidate",
                "summary": "Retrieves a ResourceCandidate by ID",
                "description": "This operation retrieves a ResourceCandidate entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "resourceCandidate"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCandidate",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchResourceCandidate",
                "summary": "Updates partially a ResourceCandidate",
                "description": "This operation updates partially a ResourceCandidate entity.",
                "tags": [
                    "resourceCandidate"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCandidate",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "resourceCandidate",
                        "description": "The ResourceCandidate to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidate_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteResourceCandidate",
                "summary": "Deletes a ResourceCandidate",
                "description": "This operation deletes a ResourceCandidate entity.",
                "tags": [
                    "resourceCandidate"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceCandidate",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceSpecification": {
            "get": {
                "operationId": "listResourceSpecification",
                "summary": "List or find ResourceSpecification objects",
                "description": "This operation list or find ResourceSpecification entities",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createResourceSpecification",
                "summary": "Creates a ResourceSpecification",
                "description": "This operation creates a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "resourceSpecification",
                        "description": "The ResourceSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resourceSpecification/{id}": {
            "get": {
                "operationId": "retrieveResourceSpecification",
                "summary": "Retrieves a ResourceSpecification by ID",
                "description": "This operation retrieves a ResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchResourceSpecification",
                "summary": "Updates partially a ResourceSpecification",
                "description": "This operation updates partially a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "resourceSpecification",
                        "description": "The ResourceSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteResourceSpecification",
                "summary": "Deletes a ResourceSpecification",
                "description": "This operation deletes a ResourceSpecification entity.",
                "tags": [
                    "resourceSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ResourceSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/importJob": {
            "get": {
                "operationId": "listImportJob",
                "summary": "List or find ImportJob objects",
                "description": "This operation list or find ImportJob entities",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ImportJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createImportJob",
                "summary": "Creates a ImportJob",
                "description": "This operation creates a ImportJob entity.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "name": "importJob",
                        "description": "The ImportJob to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImportJob_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/importJob/{id}": {
            "get": {
                "operationId": "retrieveImportJob",
                "summary": "Retrieves a ImportJob by ID",
                "description": "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ImportJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteImportJob",
                "summary": "Deletes a ImportJob",
                "description": "This operation deletes a ImportJob entity.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ImportJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exportJob": {
            "get": {
                "operationId": "listExportJob",
                "summary": "List or find ExportJob objects",
                "description": "This operation list or find ExportJob entities",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExportJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createExportJob",
                "summary": "Creates a ExportJob",
                "description": "This operation creates a ExportJob entity.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "name": "exportJob",
                        "description": "The ExportJob to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExportJob_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exportJob/{id}": {
            "get": {
                "operationId": "retrieveExportJob",
                "summary": "Retrieves a ExportJob by ID",
                "description": "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ExportJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteExportJob",
                "summary": "Deletes a ExportJob",
                "description": "This operation deletes a ExportJob entity.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ExportJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCatalogCreateEvent": {
            "post": {
                "operationId": "listenToResourceCatalogCreateEvent",
                "summary": "Client listener for entity ResourceCatalogCreateEvent",
                "description": "Example of a client listener for receiving the notification ResourceCatalogCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalogCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCatalogChangeEvent": {
            "post": {
                "operationId": "listenToResourceCatalogChangeEvent",
                "summary": "Client listener for entity ResourceCatalogChangeEvent",
                "description": "Example of a client listener for receiving the notification ResourceCatalogChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalogChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCatalogDeleteEvent": {
            "post": {
                "operationId": "listenToResourceCatalogDeleteEvent",
                "summary": "Client listener for entity ResourceCatalogDeleteEvent",
                "description": "Example of a client listener for receiving the notification ResourceCatalogDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCatalogDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCategoryCreateEvent": {
            "post": {
                "operationId": "listenToResourceCategoryCreateEvent",
                "summary": "Client listener for entity ResourceCategoryCreateEvent",
                "description": "Example of a client listener for receiving the notification ResourceCategoryCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategoryCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCategoryChangeEvent": {
            "post": {
                "operationId": "listenToResourceCategoryChangeEvent",
                "summary": "Client listener for entity ResourceCategoryChangeEvent",
                "description": "Example of a client listener for receiving the notification ResourceCategoryChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategoryChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCategoryDeleteEvent": {
            "post": {
                "operationId": "listenToResourceCategoryDeleteEvent",
                "summary": "Client listener for entity ResourceCategoryDeleteEvent",
                "description": "Example of a client listener for receiving the notification ResourceCategoryDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategoryDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCandidateCreateEvent": {
            "post": {
                "operationId": "listenToResourceCandidateCreateEvent",
                "summary": "Client listener for entity ResourceCandidateCreateEvent",
                "description": "Example of a client listener for receiving the notification ResourceCandidateCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidateCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCandidateChangeEvent": {
            "post": {
                "operationId": "listenToResourceCandidateChangeEvent",
                "summary": "Client listener for entity ResourceCandidateChangeEvent",
                "description": "Example of a client listener for receiving the notification ResourceCandidateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceCandidateDeleteEvent": {
            "post": {
                "operationId": "listenToResourceCandidateDeleteEvent",
                "summary": "Client listener for entity ResourceCandidateDeleteEvent",
                "description": "Example of a client listener for receiving the notification ResourceCandidateDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceCandidateDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationCreateEvent",
                "summary": "Client listener for entity ResourceSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationChangeEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationChangeEvent",
                "summary": "Client listener for entity ResourceSpecificationChangeEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/resourceSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToResourceSpecificationDeleteEvent",
                "summary": "Client listener for entity ResourceSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/importJobCreateEvent": {
            "post": {
                "operationId": "listenToImportJobCreateEvent",
                "summary": "Client listener for entity ImportJobCreateEvent",
                "description": "Example of a client listener for receiving the notification ImportJobCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ImportJobCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/importJobStateChangeEvent": {
            "post": {
                "operationId": "listenToImportJobStateChangeEvent",
                "summary": "Client listener for entity ImportJobStateChangeEvent",
                "description": "Example of a client listener for receiving the notification ImportJobStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ImportJobStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/exportJobCreateEvent": {
            "post": {
                "operationId": "listenToExportJobCreateEvent",
                "summary": "Client listener for entity ExportJobCreateEvent",
                "description": "Example of a client listener for receiving the notification ExportJobCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ExportJobCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/exportJobStateChangeEvent": {
            "post": {
                "operationId": "listenToExportJobStateChangeEvent",
                "summary": "Client listener for entity ExportJobStateChangeEvent",
                "description": "Example of a client listener for receiving the notification ExportJobStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ExportJobStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "Any": {},
        "Attachment": {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AttachmentRefOrValue": {
            "type": "object",
            "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "CharacteristicSpecificationBase": {
            "type": "object",
            "description": "This class defines a characteristic specification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID for the characteristic"
                },
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the target Characteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains the CharacteristicSpecification."
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a characteristic is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "CharacteristicValueSpecification": {
            "type": "object",
            "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic.",
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
                },
                "rangeInterval": {
                    "type": "string",
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                },
                "regex": {
                    "type": "string",
                    "description": "A regular expression constraint for given value"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                },
                "valueFrom": {
                    "type": "integer",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "integer",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a value is applicable."
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ConnectionPointSpecificationRef": {
            "type": "object",
            "description": "Connection point specification reference. A connection point provides a service access point (SAP) for input and/or output of the resource function.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Connection point specification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ConnectionSpecification": {
            "type": "object",
            "description": "A specification for an edge in a resource graph.",
            "required": [
                "associationType",
                "endpointSpecification"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for graph edge specification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "associationType": {
                    "type": "string",
                    "description": "Association type."
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for graph edge specification."
                },
                "endpointSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EndpointSpecificationRef"
                    },
                    "minItems": 1,
                    "description": "Specifications for resource graph vertices connected by this edge."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ConstraintRef": {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "constraint version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "EndpointSpecificationRef": {
            "type": "object",
            "description": "A specification for a vertex in a resource graph.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isRoot": {
                    "default": true,
                    "type": "boolean",
                    "description": "Directionality: true when endpoint is a source, false when a sink. If true for all endpoints connectivity is bidirectional. Default is true."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role of the Resource Function."
                },
                "connectionPointSpecification": {
                    "$ref": "#/definitions/ConnectionPointSpecificationRef",
                    "description": "A specification for the connection point (SAP) of the associated resource function (optional)."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ExportJob": {
            "type": "object",
            "description": "Represents a task used to export resources to a file",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the export job"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Reference of the export job"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Data at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "The format of the exported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                },
                "query": {
                    "type": "string",
                    "description": "Used to scope the exported data"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the file containing the data to be exported"
                },
                "status": {
                    "$ref": "#/definitions/JobStateType",
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ExportJob_Create": {
            "type": "object",
            "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
            "required": [
                "url"
            ],
            "properties": {
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Data at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "The format of the exported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                },
                "query": {
                    "type": "string",
                    "description": "Used to scope the exported data"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the file containing the data to be exported"
                },
                "status": {
                    "$ref": "#/definitions/JobStateType",
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FeatureSpecification": {
            "type": "object",
            "description": "Specification for resource, service or product features",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicating if this is a feature group (true) or not (false)"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the feature is enabled (true) or not (false)"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name given to the feature specification"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the feature specification"
                },
                "constraint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConstraintRef"
                    },
                    "description": "This is a list of feature constraints"
                },
                "featureSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecificationCharacteristic"
                    },
                    "description": "This is a list of characteristics for a particular feature"
                },
                "featureSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecificationRelationship"
                    },
                    "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this feature specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FeatureSpecificationCharacteristic": {
            "type": "object",
            "description": "Configuration feature characteristic specification.",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID for the characteristic"
                },
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the target Characteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains the CharacteristicSpecification."
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "featureSpecCharRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecificationCharacteristicRelationship"
                    },
                    "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics."
                },
                "featureSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicValueSpecification"
                    },
                    "description": "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a characteristic is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "FeatureSpecificationCharacteristicRelationship": {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "characteristicId": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic within the the target feature specification"
                },
                "featureId": {
                    "type": "string",
                    "description": "Unique identifier of the target feature specification within the resource specification."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target characteristic"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                },
                "resourceSpecificationHref": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to the resource specification containing the target feature and feature characteristic"
                },
                "resourceSpecificationId": {
                    "type": "string",
                    "description": "Unique identifier of the resource specification containing the target feature and feature characteristic"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the object is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FeatureSpecificationRelationship": {
            "type": "object",
            "description": "Relationship between feature specifications",
            "required": [
                "name",
                "relationshipType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "featureId": {
                    "type": "string",
                    "description": "Unique identifier of the target feature specification."
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the target feature specification."
                },
                "parentSpecificationHref": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to the parent specification containing the target feature"
                },
                "parentSpecificationId": {
                    "type": "string",
                    "description": "Unique identifier of the parent specification containing the target feature"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "This is the type of the feature specification relationship."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this feature spoecification relationship is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ImportJob": {
            "type": "object",
            "description": "Represents a task used to import resources from a file",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the import job"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Reference of the import job"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "Indicates the format of the imported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure if status is failed"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the file containing the data to be imported"
                },
                "status": {
                    "$ref": "#/definitions/JobStateType",
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ImportJob_Create": {
            "type": "object",
            "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
            "required": [
                "url"
            ],
            "properties": {
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "Indicates the format of the imported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure if status is failed"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the file containing the data to be imported"
                },
                "status": {
                    "$ref": "#/definitions/JobStateType",
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "JobStateType": {
            "type": "string",
            "description": "Valid values for the state of a batch job (e.g. catalog import)",
            "enum": [
                "Not Started",
                "Running",
                "Succeeded",
                "Failed"
            ]
        },
        "LogicalResourceSpecification": {
            "type": "object",
            "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PhysicalResourceSpecification": {
            "type": "object",
            "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "model": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "part": {
                    "type": "string",
                    "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
                },
                "sku": {
                    "type": "string",
                    "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
                },
                "vendor": {
                    "type": "string",
                    "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ResourceCandidate": {
            "type": "object",
            "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this REST resource"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this REST resource"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of resource candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The categories in which this candidate is exposed"
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef",
                    "description": "The detailed specification for this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCandidate_Create": {
            "type": "object",
            "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of resource candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The categories in which this candidate is exposed"
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef",
                    "description": "The detailed specification for this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCandidate_Update": {
            "type": "object",
            "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of resource candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The categories in which this candidate is exposed"
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef",
                    "description": "The detailed specification for this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCandidateRef": {
            "type": "object",
            "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "the version of resource candidate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceCatalog": {
            "type": "object",
            "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Catalog"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Unique reference of the catalog"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog"
                },
                "version": {
                    "type": "string",
                    "description": "Catalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "List of root categories contained in this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this catalog"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCatalog_Create": {
            "type": "object",
            "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog"
                },
                "version": {
                    "type": "string",
                    "description": "Catalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "List of root categories contained in this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this catalog"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCatalog_Update": {
            "type": "object",
            "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog"
                },
                "version": {
                    "type": "string",
                    "description": "Catalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "List of root categories contained in this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this catalog"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCategory": {
            "type": "object",
            "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the category"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to the category"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "Category version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this category"
                },
                "resourceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCandidateRef"
                    },
                    "description": "List of resource candidates accessible via this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCategory_Create": {
            "type": "object",
            "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "Category version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this category"
                },
                "resourceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCandidateRef"
                    },
                    "description": "List of resource candidates accessible via this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCategory_Update": {
            "type": "object",
            "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "Category version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryRef"
                    },
                    "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties involved in this category"
                },
                "resourceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCandidateRef"
                    },
                    "description": "List of resource candidates accessible via this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceCategoryRef": {
            "type": "object",
            "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Category version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceFunctionSpecification": {
            "type": "object",
            "description": "Specifies a function as a behavior to transform inputs of any nature into outputs of any nature independently from the way it is provided, for example a Medium to Large Enterprise Firewall.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "connectionPointSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConnectionPointSpecificationRef"
                    },
                    "description": "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available."
                },
                "connectivitySpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceGraphSpecification"
                    },
                    "description": "Internal connectivity potential specifications."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceGraphSpecification": {
            "type": "object",
            "description": "Resource graph specification.",
            "required": [
                "connectionSpecification"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource graph specification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource graph specification."
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for the resource graph specification."
                },
                "connectionSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConnectionSpecification"
                    },
                    "minItems": 1,
                    "description": "Resource graph edge specifications."
                },
                "graphSpecificationRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceGraphSpecificationRelationship"
                    },
                    "description": "Relationships to other resource graph specifications."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceGraphSpecificationRef": {
            "type": "object",
            "description": "Resource graph specification reference.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceGraphSpecificationRelationship": {
            "type": "object",
            "description": "Describes link between resource graph specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Semantic of the relationship."
                },
                "resourceGraph": {
                    "$ref": "#/definitions/ResourceGraphSpecificationRef",
                    "description": "A reference to the related resource graph specification."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecification": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this REST resource"
                },
                "href": {
                    "example": "http://host/resourceSpecification/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this REST resource"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecification_Create": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecification_Update": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
                },
                "featureSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureSpecification"
                    },
                    "description": "A list of Features for this specification."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
                },
                "resourceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRelationship"
                    },
                    "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
                },
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetResourceSchema",
                    "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecificationCharacteristic": {
            "type": "object",
            "description": "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and\nrelationships, which distinguish a resource specification from other resource specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID for the characteristic"
                },
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the target Characteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains the CharacteristicSpecification."
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "resourceSpecCharRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristicRelationship"
                    },
                    "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
                },
                "resourceSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicValueSpecification"
                    },
                    "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecificationCharacteristic object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding ResourceSpecificationCharacteristic object can take on."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a characteristic is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "ResourceSpecificationCharacteristicRelationship": {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among ResourceSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
            "properties": {
                "characteristicSpecificationId": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic within the specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target characteristic within the specification"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                },
                "resourceSpecificationHref": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to the resource specification containing the target characteristic"
                },
                "resourceSpecificationId": {
                    "type": "string",
                    "description": "Unique identifier of the resource specification containing the target characteristic"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the object is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecificationRef": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceSpecificationRelationship": {
            "type": "object",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of target ResourceSpecification"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Reference of the target ResourceSpecification"
                },
                "defaultQuantity": {
                    "type": "integer",
                    "description": "The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more."
                },
                "maximumQuantity": {
                    "type": "integer",
                    "description": "The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards"
                },
                "minimumQuantity": {
                    "type": "integer",
                    "description": "The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card"
                },
                "name": {
                    "type": "string",
                    "description": "The name given to the target resource specification instance"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this resource specification"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationCharacteristic"
                    },
                    "description": "A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the ResourceSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TargetResourceSchema": {
            "type": "object",
            "description": "The reference object to the schema and type of target resource which is described by resource specification",
            "required": [
                "@schemaLocation",
                "@type"
            ],
            "properties": {
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "This field provides a link to the schema describing the target resource"
                },
                "@type": {
                    "type": "string",
                    "description": "Class type of the target resource"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "ResourceCatalogCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCatalogCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCatalogCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCatalog"
                }
            }
        },
        "ResourceCatalogChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCatalogChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCatalogChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCatalog"
                }
            }
        },
        "ResourceCatalogDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCatalogDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCatalogDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCatalog"
                }
            }
        },
        "ResourceCategoryCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCategoryCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCategoryCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCategory"
                }
            }
        },
        "ResourceCategoryChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCategoryChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCategoryChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCategory"
                }
            }
        },
        "ResourceCategoryDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCategoryDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCategoryDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCategory"
                }
            }
        },
        "ResourceCandidateCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCandidateCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCandidateCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCandidate"
                }
            }
        },
        "ResourceCandidateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCandidateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCandidateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCandidate"
                }
            }
        },
        "ResourceCandidateDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceCandidateDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceCandidateDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceCandidate"
                }
            }
        },
        "ResourceSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ResourceSpecificationChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceSpecificationChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ResourceSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ResourceSpecificationDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ResourceSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "resourceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ResourceSpecification"
                }
            }
        },
        "ImportJobCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ImportJobCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ImportJobCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "importJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ImportJob"
                }
            }
        },
        "ImportJobStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ImportJobStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ImportJobStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "importJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ImportJob"
                }
            }
        },
        "ExportJobCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ExportJobCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ExportJobCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "exportJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ExportJob"
                }
            }
        },
        "ExportJobStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ExportJobStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ExportJobStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "exportJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ExportJob"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}