{
    "swagger": "2.0",
    "info": {
        "title": "Prepay Balance Management",
        "description": "## TMF API Reference: TMF654 - Prepay Balance Management\n\n### Final : 19.5 - June 2020\n\nThe Prepay Balance Management API enables consumers to manage the balance, recharge (top-up), transfer, reserve, unreserve, deduct and balance adjustments of a  bucket. A bucket is understood in the context of this API to be an entity that keeps track of the balance available to use services. Every bucket will measure balance in different units, it can be monetary or non-monetary (e.g.: number of sms that are available, number of GB of data available, \u2026)\n\n### Resources\n- Bucket\n- TopupBalance\n- AdjustBalance\n- TransferBalance\n- ReserveBalance\n- AccumulatedBalance\n- BalanceAction\n\n### Operations\n- Retrieve the balance information on a bucket for a given product (individual or aggregated).\n- Retrieve the list of balance-related operations performed over a given product\n- Retrieve information about all the top-up operations stored in the server filtered by some criteria.\n- Perform a new top up operation (recharge)\n- Retrieve detailed information about a top-up operation previously processed by the server.\n- Retrieve the current and historic status information about a top-up operation previously processed by the server.\n- Perform a new transfer operation\n- Retrieve information about all the transfer operations stored in the server filtered by some criteria\n- Retrieve detailed information about a transfer operation previously processed by the server\n- Retrieve the current and historic status information about a transfer operation previously processed by the server.\n- Retrieve information about all the adjustments stored in the server filtered by some criteria.\n- Perform a new adjustment operation\n- Retrieve detailed information about a balance adjustment operation previously processed by the server\n- Reserve a balance on a bucket.\n- Unreserve a balance on a bucket.\n- Retrieve aggregated (accumulative) balances for a bucket.",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/prepayBalanceManagement/v4",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "bucket"
        },
        {
            "name": "topupBalance"
        },
        {
            "name": "adjustBalance"
        },
        {
            "name": "transferBalance"
        },
        {
            "name": "reserveBalance"
        },
        {
            "name": "accumulatedBalance"
        },
        {
            "name": "balanceAction"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/bucket": {
            "get": {
                "operationId": "listBucket",
                "summary": "List or find Bucket objects",
                "description": "This operation list or find Bucket entities",
                "tags": [
                    "bucket"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Bucket"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createBucket",
                "summary": "Creates a Bucket",
                "description": "This operation creates a Bucket entity.",
                "tags": [
                    "bucket"
                ],
                "parameters": [
                    {
                        "name": "bucket",
                        "description": "The Bucket to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Bucket_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Bucket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bucket/{id}": {
            "get": {
                "operationId": "retrieveBucket",
                "summary": "Retrieves a Bucket by ID",
                "description": "This operation retrieves a Bucket entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "bucket"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Bucket",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Bucket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteBucket",
                "summary": "Deletes a Bucket",
                "description": "This operation deletes a Bucket entity.",
                "tags": [
                    "bucket"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Bucket",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topupBalance": {
            "get": {
                "operationId": "listTopupBalance",
                "summary": "List or find TopupBalance objects",
                "description": "This operation list or find TopupBalance entities",
                "tags": [
                    "topupBalance"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TopupBalance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createTopupBalance",
                "summary": "Creates a TopupBalance",
                "description": "This operation creates a TopupBalance entity.",
                "tags": [
                    "topupBalance"
                ],
                "parameters": [
                    {
                        "name": "topupBalance",
                        "description": "The TopupBalance to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TopupBalance_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/TopupBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topupBalance/{id}": {
            "patch": {
                "operationId": "patchTopupBalance",
                "summary": "Updates partially a TopupBalance",
                "description": "This operation updates partially a TopupBalance entity.",
                "tags": [
                    "topupBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TopupBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "topupBalance",
                        "description": "The TopupBalance to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TopupBalance_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/TopupBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "operationId": "retrieveTopupBalance",
                "summary": "Retrieves a TopupBalance by ID",
                "description": "This operation retrieves a TopupBalance entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "topupBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TopupBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TopupBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteTopupBalance",
                "summary": "Deletes a TopupBalance",
                "description": "This operation deletes a TopupBalance entity.",
                "tags": [
                    "topupBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TopupBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/adjustBalance": {
            "get": {
                "operationId": "listAdjustBalance",
                "summary": "List or find AdjustBalance objects",
                "description": "This operation list or find AdjustBalance entities",
                "tags": [
                    "adjustBalance"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdjustBalance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAdjustBalance",
                "summary": "Creates a AdjustBalance",
                "description": "This operation creates a AdjustBalance entity.",
                "tags": [
                    "adjustBalance"
                ],
                "parameters": [
                    {
                        "name": "adjustBalance",
                        "description": "The AdjustBalance to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdjustBalance_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/adjustBalance/{id}": {
            "patch": {
                "operationId": "patchAdjustBalance",
                "summary": "Updates partially a AdjustBalance",
                "description": "This operation updates partially a AdjustBalance entity.",
                "tags": [
                    "adjustBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AdjustBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "adjustBalance",
                        "description": "The AdjustBalance to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdjustBalance_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "operationId": "retrieveAdjustBalance",
                "summary": "Retrieves a AdjustBalance by ID",
                "description": "This operation retrieves a AdjustBalance entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "adjustBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AdjustBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAdjustBalance",
                "summary": "Deletes a AdjustBalance",
                "description": "This operation deletes a AdjustBalance entity.",
                "tags": [
                    "adjustBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AdjustBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/transferBalance": {
            "get": {
                "operationId": "listTransferBalance",
                "summary": "List or find TransferBalance objects",
                "description": "This operation list or find TransferBalance entities",
                "tags": [
                    "transferBalance"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TransferBalance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createTransferBalance",
                "summary": "Creates a TransferBalance",
                "description": "This operation creates a TransferBalance entity.",
                "tags": [
                    "transferBalance"
                ],
                "parameters": [
                    {
                        "name": "transferBalance",
                        "description": "The TransferBalance to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransferBalance_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/TransferBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/transferBalance/{id}": {
            "patch": {
                "operationId": "patchTransferBalance",
                "summary": "Updates partially a TransferBalance",
                "description": "This operation updates partially a TransferBalance entity.",
                "tags": [
                    "transferBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TransferBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "transferBalance",
                        "description": "The TransferBalance to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransferBalance_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/TransferBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "operationId": "retrieveTransferBalance",
                "summary": "Retrieves a TransferBalance by ID",
                "description": "This operation retrieves a TransferBalance entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "transferBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TransferBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransferBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteTransferBalance",
                "summary": "Deletes a TransferBalance",
                "description": "This operation deletes a TransferBalance entity.",
                "tags": [
                    "transferBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TransferBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/reserveBalance": {
            "get": {
                "operationId": "listReserveBalance",
                "summary": "List or find ReserveBalance objects",
                "description": "This operation list or find ReserveBalance entities",
                "tags": [
                    "reserveBalance"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReserveBalance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createReserveBalance",
                "summary": "Creates a ReserveBalance",
                "description": "This operation creates a ReserveBalance entity.",
                "tags": [
                    "reserveBalance"
                ],
                "parameters": [
                    {
                        "name": "reserveBalance",
                        "description": "The ReserveBalance to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReserveBalance_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/reserveBalance/{id}": {
            "patch": {
                "operationId": "patchReserveBalance",
                "summary": "Updates partially a ReserveBalance",
                "description": "This operation updates partially a ReserveBalance entity.",
                "tags": [
                    "reserveBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ReserveBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "reserveBalance",
                        "description": "The ReserveBalance to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReserveBalance_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "operationId": "retrieveReserveBalance",
                "summary": "Retrieves a ReserveBalance by ID",
                "description": "This operation retrieves a ReserveBalance entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "reserveBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ReserveBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteReserveBalance",
                "summary": "Deletes a ReserveBalance",
                "description": "This operation deletes a ReserveBalance entity.",
                "tags": [
                    "reserveBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ReserveBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/accumulatedBalance": {
            "get": {
                "operationId": "listAccumulatedBalance",
                "summary": "List or find AccumulatedBalance objects",
                "description": "This operation list or find AccumulatedBalance entities",
                "tags": [
                    "accumulatedBalance"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccumulatedBalance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/accumulatedBalance/{id}": {
            "get": {
                "operationId": "retrieveAccumulatedBalance",
                "summary": "Retrieves a AccumulatedBalance by ID",
                "description": "This operation retrieves a AccumulatedBalance entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "accumulatedBalance"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AccumulatedBalance",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AccumulatedBalance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/balanceAction": {
            "get": {
                "operationId": "listBalanceAction",
                "summary": "List or find BalanceAction objects",
                "description": "This operation list or find BalanceAction entities",
                "tags": [
                    "balanceAction"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BalanceAction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/balanceAction/{id}": {
            "get": {
                "operationId": "retrieveBalanceAction",
                "summary": "Retrieves a BalanceAction by ID",
                "description": "This operation retrieves a BalanceAction entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "balanceAction"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the BalanceAction",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BalanceAction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/bucketCreateEvent": {
            "post": {
                "operationId": "listenToBucketCreateEvent",
                "summary": "Client listener for entity BucketCreateEvent",
                "description": "Example of a client listener for receiving the notification BucketCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/BucketCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/bucketDeleteEvent": {
            "post": {
                "operationId": "listenToBucketDeleteEvent",
                "summary": "Client listener for entity BucketDeleteEvent",
                "description": "Example of a client listener for receiving the notification BucketDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/BucketDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/bucketAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToBucketAttributeValueChangeEvent",
                "summary": "Client listener for entity BucketAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification BucketAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/BucketAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceCreateEvent": {
            "post": {
                "operationId": "listenToTopupBalanceCreateEvent",
                "summary": "Client listener for entity TopupBalanceCreateEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceCancelEvent": {
            "post": {
                "operationId": "listenToTopupBalanceCancelEvent",
                "summary": "Client listener for entity TopupBalanceCancelEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceCancelEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceCancelEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceFailureEvent": {
            "post": {
                "operationId": "listenToTopupBalanceFailureEvent",
                "summary": "Client listener for entity TopupBalanceFailureEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceFailureEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceFailureEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToTopupBalanceAttributeValueChangeEvent",
                "summary": "Client listener for entity TopupBalanceAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceStatusChangeEvent": {
            "post": {
                "operationId": "listenToTopupBalanceStatusChangeEvent",
                "summary": "Client listener for entity TopupBalanceStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topupBalanceDeleteEvent": {
            "post": {
                "operationId": "listenToTopupBalanceDeleteEvent",
                "summary": "Client listener for entity TopupBalanceDeleteEvent",
                "description": "Example of a client listener for receiving the notification TopupBalanceDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopupBalanceDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceCreateEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceCreateEvent",
                "summary": "Client listener for entity AdjustBalanceCreateEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceCancelEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceCancelEvent",
                "summary": "Client listener for entity AdjustBalanceCancelEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceCancelEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceCancelEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceFailureEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceFailureEvent",
                "summary": "Client listener for entity AdjustBalanceFailureEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceFailureEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceFailureEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceAttributeValueChangeEvent",
                "summary": "Client listener for entity AdjustBalanceAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceStatusChangeEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceStatusChangeEvent",
                "summary": "Client listener for entity AdjustBalanceStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/adjustBalanceDeleteEvent": {
            "post": {
                "operationId": "listenToAdjustBalanceDeleteEvent",
                "summary": "Client listener for entity AdjustBalanceDeleteEvent",
                "description": "Example of a client listener for receiving the notification AdjustBalanceDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AdjustBalanceDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceCreateEvent": {
            "post": {
                "operationId": "listenToTransferBalanceCreateEvent",
                "summary": "Client listener for entity TransferBalanceCreateEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceCancelEvent": {
            "post": {
                "operationId": "listenToTransferBalanceCancelEvent",
                "summary": "Client listener for entity TransferBalanceCancelEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceCancelEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceCancelEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceFailureEvent": {
            "post": {
                "operationId": "listenToTransferBalanceFailureEvent",
                "summary": "Client listener for entity TransferBalanceFailureEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceFailureEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceFailureEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToTransferBalanceAttributeValueChangeEvent",
                "summary": "Client listener for entity TransferBalanceAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceStatusChangeEvent": {
            "post": {
                "operationId": "listenToTransferBalanceStatusChangeEvent",
                "summary": "Client listener for entity TransferBalanceStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/transferBalanceDeleteEvent": {
            "post": {
                "operationId": "listenToTransferBalanceDeleteEvent",
                "summary": "Client listener for entity TransferBalanceDeleteEvent",
                "description": "Example of a client listener for receiving the notification TransferBalanceDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TransferBalanceDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceCreateEvent": {
            "post": {
                "operationId": "listenToReserveBalanceCreateEvent",
                "summary": "Client listener for entity ReserveBalanceCreateEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceCancelEvent": {
            "post": {
                "operationId": "listenToReserveBalanceCancelEvent",
                "summary": "Client listener for entity ReserveBalanceCancelEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceCancelEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceCancelEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceFailureEvent": {
            "post": {
                "operationId": "listenToReserveBalanceFailureEvent",
                "summary": "Client listener for entity ReserveBalanceFailureEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceFailureEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceFailureEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToReserveBalanceAttributeValueChangeEvent",
                "summary": "Client listener for entity ReserveBalanceAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceStatusChangeEvent": {
            "post": {
                "operationId": "listenToReserveBalanceStatusChangeEvent",
                "summary": "Client listener for entity ReserveBalanceStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/reserveBalanceDeleteEvent": {
            "post": {
                "operationId": "listenToReserveBalanceDeleteEvent",
                "summary": "Client listener for entity ReserveBalanceDeleteEvent",
                "description": "Example of a client listener for receiving the notification ReserveBalanceDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ReserveBalanceDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AccumulatedBalance": {
            "type": "object",
            "description": "Represents and tracks the aggregated amount remained or owed in certain account which is owned by certain customer for a set of buckets.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique Identifier within the server for the recharge operation request"
                },
                "href": {
                    "type": "string",
                    "description": "A resource URI pointing to the resource in the OB that stores the detailed information."
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the contents of the aggregated balance"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name to identify the aggregated balance"
                },
                "bucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BucketRef"
                    },
                    "description": "A reference to the buckets involved in the aggregation"
                },
                "logicalResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalResourceRef"
                    }
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the buckets aggregated"
                },
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductRef"
                    },
                    "description": "A reference to the product whose consumption is managed by the bucket . This is an array to allow scenarios where a buckets are shared between different products"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
                },
                "totalBalance": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Aggregated for a set of prepay balance buckets associated to the product"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "AdjustBalance": {
            "type": "object",
            "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup e.g. increment the amount, alter the recharge periodicity. Alternatively, an adjustment can be made to an outstanding reservation request, in which case the reservedValue of the bucket will be adjusted, not the remaining value",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "adjustType": {
                    "type": "string",
                    "description": "The type of the adjustment. For example: recurringChargeDebit, oneTimeChargeCredit, oneTimeChargeDebit, goodWillCredit, generalDebit, reservationDebit"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "reserveBalance": {
                    "$ref": "#/definitions/ReserveBalanceRef",
                    "description": "Should be present for types relating to reservation, such as reservation debit. Means that the adjustment needs to be executed according to this reservation request. The amount of the balance action is optional in this case, and if not supplied the entire reserved amount will be adjusted in the bucket. If a specific implementation can support partial consumption of the reservation, then amount can be supplied, and that amount will be adjusted in the bucket and the reservation request"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AdjustBalance_Create": {
            "type": "object",
            "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup e.g. increment the amount, alter the recharge periodicity. Alternatively, an adjustment can be made to an outstanding reservation request, in which case the reservedValue of the bucket will be adjusted, not the remaining value\nSkipped properties: id,href",
            "required": [
                "amount"
            ],
            "properties": {
                "adjustType": {
                    "type": "string",
                    "description": "The type of the adjustment. For example: recurringChargeDebit, oneTimeChargeCredit, oneTimeChargeDebit, goodWillCredit, generalDebit, reservationDebit"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "reserveBalance": {
                    "$ref": "#/definitions/ReserveBalanceRef",
                    "description": "Should be present for types relating to reservation, such as reservation debit. Means that the adjustment needs to be executed according to this reservation request. The amount of the balance action is optional in this case, and if not supplied the entire reserved amount will be adjusted in the bucket. If a specific implementation can support partial consumption of the reservation, then amount can be supplied, and that amount will be adjusted in the bucket and the reservation request"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AdjustBalance_Update": {
            "type": "object",
            "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup e.g. increment the amount, alter the recharge periodicity. Alternatively, an adjustment can be made to an outstanding reservation request, in which case the reservedValue of the bucket will be adjusted, not the remaining value\nSkipped properties: id,href",
            "properties": {
                "adjustType": {
                    "type": "string",
                    "description": "The type of the adjustment. For example: recurringChargeDebit, oneTimeChargeCredit, oneTimeChargeDebit, goodWillCredit, generalDebit, reservationDebit"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "reserveBalance": {
                    "$ref": "#/definitions/ReserveBalanceRef",
                    "description": "Should be present for types relating to reservation, such as reservation debit. Means that the adjustment needs to be executed according to this reservation request. The amount of the balance action is optional in this case, and if not supplied the entire reserved amount will be adjusted in the bucket. If a specific implementation can support partial consumption of the reservation, then amount can be supplied, and that amount will be adjusted in the bucket and the reservation request"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "BalanceAction": {
            "type": "object",
            "description": "an abstract resource. example extensions are TopupBalance, AdjustBalance",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique Identifier for the resource"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the resource"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "BalanceActionRef": {
            "type": "object",
            "description": "link to the resource that holds balance-related request information",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Bucket": {
            "type": "object",
            "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique Identifier within the server for the bucket"
                },
                "href": {
                    "type": "string",
                    "description": "A resource URI pointing to the resource in the OB that stores the detailed information for the bucket"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the contents of the balance managed by the bucket"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "True if the bucket is shared between several devices or users"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name to identify the bucket"
                },
                "remainingValueName": {
                    "type": "string",
                    "description": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
                },
                "status": {
                    "type": "string",
                    "description": "status for the bucket. active, expired, suspended"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "logicalResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalResourceRef"
                    }
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket"
                },
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
                },
                "remainingValue": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket"
                },
                "reserveBalance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReserveBalanceRef"
                    }
                },
                "reservedValue": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount reserved on the bucket; should be the sum of all the valid (i.e. confirmed and not consumed or expired) amounts in the reserveBalance request array"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the balance in the bucket is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Bucket_Create": {
            "type": "object",
            "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on\nSkipped properties: id,href",
            "required": [
                "usageType"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the contents of the balance managed by the bucket"
                },
                "isShared": {
                    "type": "boolean",
                    "description": "True if the bucket is shared between several devices or users"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name to identify the bucket"
                },
                "remainingValueName": {
                    "type": "string",
                    "description": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
                },
                "status": {
                    "type": "string",
                    "description": "status for the bucket. active, expired, suspended"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "logicalResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalResourceRef"
                    }
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket"
                },
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
                },
                "remainingValue": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket"
                },
                "reserveBalance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReserveBalanceRef"
                    }
                },
                "reservedValue": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount reserved on the bucket; should be the sum of all the valid (i.e. confirmed and not consumed or expired) amounts in the reserveBalance request array"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the balance in the bucket is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "BucketRef": {
            "type": "object",
            "description": "link to the resource that holds bucket information",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "BucketStatusExampleType": {
            "type": "string",
            "description": "Possible values for the bucket status are (for example active,suspended,expired)",
            "enum": [
                "active",
                "suspended",
                "expired"
            ]
        },
        "ChannelRef": {
            "type": "object",
            "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the channel."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ImpactedBucket": {
            "type": "object",
            "description": "A resource that references other buckets that have been impacted by the action of type TopupBalance,AdjustBalance,TransferBalance or ReserveBalance",
            "required": [
                "item"
            ],
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the contents of the balance managed by the bucket"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name to identify the bucket"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "amountAfter": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicates the amount after on the impacted bucket after the action has completed."
                },
                "amountBefore": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicates the amount remaiing on the impacted bucket"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucketItem"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ImpactedBucketItem": {
            "type": "object",
            "description": "a resource used by the ImpactedBucket resource to capture the impact of a ImpactedBucket",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "itemType": {
                    "type": "string",
                    "description": "This indicates whether the action led to the bucket being incremented or decremented.eg credit or debit"
                },
                "name": {
                    "type": "string",
                    "description": "This represents the transaction activity. e.g topup, bonus, additional bonus, tax, fees, and so on"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "LogicalResourceRef": {
            "type": "object",
            "description": "reference to the LogicalResource eg MSISDN",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "value": {
                    "type": "string",
                    "description": "The value of the logical resource"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PartyAccountRef": {
            "type": "object",
            "description": "PartyAccount reference. A party account is an arrangement that a party has with an enterprise that provides products to the party.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the party account"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the party account"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the party account"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the party account"
                },
                "status": {
                    "type": "string",
                    "description": "The condition of the account, such as due, paid, in arrears."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PaymentMethodRef": {
            "type": "object",
            "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PaymentRef": {
            "type": "object",
            "description": "If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the payment"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedTopupBalance": {
            "type": "object",
            "description": "Related Entity reference. A related balance topup defines a relationship via a role to another balance topup. Used in the PrepayBalanceManagement API to track child topups that are related to the parent (initiating balance topup resource). PrepayBalanceManagement defines the child role",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the TopupBalance. In the PrepayBalanceManagement API this is parent or child"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ReserveBalance": {
            "type": "object",
            "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date on which the reservation will expire, if the amount was not actually used"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ReserveBalance_Create": {
            "type": "object",
            "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity\nSkipped properties: id,href",
            "required": [
                "amount"
            ],
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date on which the reservation will expire, if the amount was not actually used"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ReserveBalance_Update": {
            "type": "object",
            "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity\nSkipped properties: id,href",
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date on which the reservation will expire, if the amount was not actually used"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ReserveBalanceRef": {
            "type": "object",
            "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "TopupBalance": {
            "type": "object",
            "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "isAutoTopup": {
                    "type": "boolean",
                    "description": "Indicates if the topup requested is an autotopup (to be processed periodically)"
                },
                "numberOfPeriods": {
                    "type": "integer",
                    "description": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the execution of the topup every period"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "recurringPeriod": {
                    "type": "string",
                    "description": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "voucher": {
                    "type": "string",
                    "description": "Identifier for a voucher when the topup can be performed by this means"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "payment": {
                    "$ref": "#/definitions/PaymentRef"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/PaymentMethodRef",
                    "description": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "relatedTopupBalance": {
                    "$ref": "#/definitions/RelatedTopupBalance"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TopupBalance_Create": {
            "type": "object",
            "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)\nSkipped properties: id,href",
            "required": [
                "amount"
            ],
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "isAutoTopup": {
                    "type": "boolean",
                    "description": "Indicates if the topup requested is an autotopup (to be processed periodically)"
                },
                "numberOfPeriods": {
                    "type": "integer",
                    "description": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the execution of the topup every period"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "recurringPeriod": {
                    "type": "string",
                    "description": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "voucher": {
                    "type": "string",
                    "description": "Identifier for a voucher when the topup can be performed by this means"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "payment": {
                    "$ref": "#/definitions/PaymentRef"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/PaymentMethodRef",
                    "description": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "relatedTopupBalance": {
                    "$ref": "#/definitions/RelatedTopupBalance"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TopupBalance_Update": {
            "type": "object",
            "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)\nSkipped properties: id,href",
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "isAutoTopup": {
                    "type": "boolean",
                    "description": "Indicates if the topup requested is an autotopup (to be processed periodically)"
                },
                "numberOfPeriods": {
                    "type": "integer",
                    "description": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the execution of the topup every period"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "recurringPeriod": {
                    "type": "string",
                    "description": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "voucher": {
                    "type": "string",
                    "description": "Identifier for a voucher when the topup can be performed by this means"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "payment": {
                    "$ref": "#/definitions/PaymentRef"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/PaymentMethodRef",
                    "description": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "relatedTopupBalance": {
                    "$ref": "#/definitions/RelatedTopupBalance"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TransferBalance": {
            "type": "object",
            "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "costOwner": {
                    "type": "string",
                    "description": "Indicates which related party will bear the costs of the transfer. eg originator or receiver"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "receiverBucketUsageType": {
                    "type": "string",
                    "description": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "receiver": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes \u201crole\u201d and \u201cname\u201d"
                },
                "receiverBucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket to which the balance will be transferred"
                },
                "receiverLogicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "receiverPartyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the receiver account that owns the receiverlbucket impacted by the balance related operation"
                },
                "receiverProduct": {
                    "$ref": "#/definitions/ProductRef"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "transferCost": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TransferBalance_Create": {
            "type": "object",
            "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).\nSkipped properties: id,href",
            "required": [
                "amount"
            ],
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "costOwner": {
                    "type": "string",
                    "description": "Indicates which related party will bear the costs of the transfer. eg originator or receiver"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "receiverBucketUsageType": {
                    "type": "string",
                    "description": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "receiver": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes \u201crole\u201d and \u201cname\u201d"
                },
                "receiverBucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket to which the balance will be transferred"
                },
                "receiverLogicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "receiverPartyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the receiver account that owns the receiverlbucket impacted by the balance related operation"
                },
                "receiverProduct": {
                    "$ref": "#/definitions/ProductRef"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "transferCost": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TransferBalance_Update": {
            "type": "object",
            "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).\nSkipped properties: id,href",
            "properties": {
                "confirmationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction was confirmed in the server"
                },
                "costOwner": {
                    "type": "string",
                    "description": "Indicates which related party will bear the costs of the transfer. eg originator or receiver"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the recharge operation"
                },
                "reason": {
                    "type": "string",
                    "description": "Text describing the reason for the action/task"
                },
                "receiverBucketUsageType": {
                    "type": "string",
                    "description": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"
                },
                "requestedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the deduction request was received in the server"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the operation"
                },
                "usageType": {
                    "type": "string",
                    "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
                },
                "amount": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited"
                },
                "bucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "channel": {
                    "$ref": "#/definitions/ChannelRef",
                    "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"
                },
                "impactedBucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactedBucket"
                    },
                    "description": "A reference to the bucket impacted by the request or the value itself."
                },
                "logicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "partyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the account that owns the bucket impacted by the balance related operation"
                },
                "product": {
                    "$ref": "#/definitions/ProductRef",
                    "description": "A reference to the Product associated with this bucket"
                },
                "receiver": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes \u201crole\u201d and \u201cname\u201d"
                },
                "receiverBucket": {
                    "$ref": "#/definitions/BucketRef",
                    "description": "A reference to the bucket to which the balance will be transferred"
                },
                "receiverLogicalResource": {
                    "$ref": "#/definitions/LogicalResourceRef",
                    "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
                },
                "receiverPartyAccount": {
                    "$ref": "#/definitions/PartyAccountRef",
                    "description": "A reference to the receiver account that owns the receiverlbucket impacted by the balance related operation"
                },
                "receiverProduct": {
                    "$ref": "#/definitions/ProductRef"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "Used to provide information about any other entity with relation to the operation"
                },
                "requestor": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."
                },
                "transferCost": {
                    "$ref": "#/definitions/Quantity",
                    "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "BucketCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/BucketCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "BucketCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "bucket": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Bucket"
                }
            }
        },
        "BucketDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/BucketDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "BucketDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "bucket": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Bucket"
                }
            }
        },
        "BucketAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/BucketAttributeValueChangeEventPayload"
                }
            }
        },
        "BucketAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "bucket": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Bucket"
                }
            }
        },
        "TopupBalanceCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopupBalanceCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "TopupBalanceCancelEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceCancelEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopupBalanceCancelEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "TopupBalanceFailureEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceFailureEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopupBalanceFailureEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "TopupBalanceAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceAttributeValueChangeEventPayload"
                }
            }
        },
        "TopupBalanceAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "TopupBalanceStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopupBalanceStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "TopupBalanceDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopupBalanceDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopupBalanceDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topupBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TopupBalance"
                }
            }
        },
        "AdjustBalanceCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AdjustBalanceCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "AdjustBalanceCancelEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceCancelEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AdjustBalanceCancelEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "AdjustBalanceFailureEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceFailureEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AdjustBalanceFailureEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "AdjustBalanceAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceAttributeValueChangeEventPayload"
                }
            }
        },
        "AdjustBalanceAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "AdjustBalanceStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AdjustBalanceStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "AdjustBalanceDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AdjustBalanceDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AdjustBalanceDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "adjustBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AdjustBalance"
                }
            }
        },
        "TransferBalanceCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TransferBalanceCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "TransferBalanceCancelEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceCancelEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TransferBalanceCancelEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "TransferBalanceFailureEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceFailureEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TransferBalanceFailureEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "TransferBalanceAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceAttributeValueChangeEventPayload"
                }
            }
        },
        "TransferBalanceAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "TransferBalanceStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TransferBalanceStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "TransferBalanceDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TransferBalanceDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TransferBalanceDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "transferBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/TransferBalance"
                }
            }
        },
        "ReserveBalanceCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ReserveBalanceCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "ReserveBalanceCancelEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceCancelEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ReserveBalanceCancelEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "ReserveBalanceFailureEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceFailureEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ReserveBalanceFailureEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "ReserveBalanceAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceAttributeValueChangeEventPayload"
                }
            }
        },
        "ReserveBalanceAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "ReserveBalanceStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ReserveBalanceStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "ReserveBalanceDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ReserveBalanceDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ReserveBalanceDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "reserveBalance": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ReserveBalance"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}