{
    "swagger": "2.0",
    "info": {
        "title": "Privacy",
        "description": "**TMF API Reference : TMF - 644 Privacy**\n\n**Release : 19.0 - June 2019**\n\nThe Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:\n\n**Privacy Profile specification**\nPrivacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.\n\n**Privacy Profile**\nPrivacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.\n\n**Privacy Agreement**\nPrivacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values.\nPrivacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements:\n-Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria\n-Partial update of a privacy profile specification, a privacy profile or a privacy agreement\n-Creation of a privacy profile specification, a privacy profile or a privacy agreement\n-Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)\n\n**Notification of events:**\n-privacy profile specification create\n-privacy profile specification update\n-privacy profile specification delete\n-privacy profile create\n-privacy profile update\n-privacy profile delete\n-privacy agreement create\n-privacy agreement update\n\n\nCopyright \u00a9 TM Forum 2019. All Rights Reserved\n\n\n",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/privacyManagement/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "partyPrivacyProfile"
        },
        {
            "name": "partyPrivacyProfileSpecification"
        },
        {
            "name": "partyPrivacyAgreement"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/partyPrivacyProfile": {
            "get": {
                "operationId": "listPartyPrivacyProfile",
                "summary": "List or find PartyPrivacyProfile objects",
                "description": "This operation list or find PartyPrivacyProfile entities",
                "tags": [
                    "partyPrivacyProfile"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PartyPrivacyProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPartyPrivacyProfile",
                "summary": "Creates a PartyPrivacyProfile",
                "description": "This operation creates a PartyPrivacyProfile entity.",
                "tags": [
                    "partyPrivacyProfile"
                ],
                "parameters": [
                    {
                        "name": "partyPrivacyProfile",
                        "description": "The PartyPrivacyProfile to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfile_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partyPrivacyProfile/{id}": {
            "get": {
                "operationId": "retrievePartyPrivacyProfile",
                "summary": "Retrieves a PartyPrivacyProfile by ID",
                "description": "This operation retrieves a PartyPrivacyProfile entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "partyPrivacyProfile"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfile",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPartyPrivacyProfile",
                "summary": "Updates partially a PartyPrivacyProfile",
                "description": "This operation updates partially a PartyPrivacyProfile entity.",
                "tags": [
                    "partyPrivacyProfile"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfile",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "partyPrivacyProfile",
                        "description": "The PartyPrivacyProfile to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfile_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePartyPrivacyProfile",
                "summary": "Deletes a PartyPrivacyProfile",
                "description": "This operation deletes a PartyPrivacyProfile entity.",
                "tags": [
                    "partyPrivacyProfile"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfile",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partyPrivacyProfileSpecification": {
            "get": {
                "operationId": "listPartyPrivacyProfileSpecification",
                "summary": "List or find PartyPrivacyProfileSpecification objects",
                "description": "This operation list or find PartyPrivacyProfileSpecification entities",
                "tags": [
                    "partyPrivacyProfileSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPartyPrivacyProfileSpecification",
                "summary": "Creates a PartyPrivacyProfileSpecification",
                "description": "This operation creates a PartyPrivacyProfileSpecification entity.",
                "tags": [
                    "partyPrivacyProfileSpecification"
                ],
                "parameters": [
                    {
                        "name": "partyPrivacyProfileSpecification",
                        "description": "The PartyPrivacyProfileSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partyPrivacyProfileSpecification/{id}": {
            "get": {
                "operationId": "retrievePartyPrivacyProfileSpecification",
                "summary": "Retrieves a PartyPrivacyProfileSpecification by ID",
                "description": "This operation retrieves a PartyPrivacyProfileSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "partyPrivacyProfileSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfileSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPartyPrivacyProfileSpecification",
                "summary": "Updates partially a PartyPrivacyProfileSpecification",
                "description": "This operation updates partially a PartyPrivacyProfileSpecification entity.",
                "tags": [
                    "partyPrivacyProfileSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfileSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "partyPrivacyProfileSpecification",
                        "description": "The PartyPrivacyProfileSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePartyPrivacyProfileSpecification",
                "summary": "Deletes a PartyPrivacyProfileSpecification",
                "description": "This operation deletes a PartyPrivacyProfileSpecification entity.",
                "tags": [
                    "partyPrivacyProfileSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyProfileSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partyPrivacyAgreement": {
            "get": {
                "operationId": "listPartyPrivacyAgreement",
                "summary": "List or find PartyPrivacyAgreement objects",
                "description": "This operation list or find PartyPrivacyAgreement entities",
                "tags": [
                    "partyPrivacyAgreement"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PartyPrivacyAgreement"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPartyPrivacyAgreement",
                "summary": "Creates a PartyPrivacyAgreement",
                "description": "This operation creates a PartyPrivacyAgreement entity.",
                "tags": [
                    "partyPrivacyAgreement"
                ],
                "parameters": [
                    {
                        "name": "partyPrivacyAgreement",
                        "description": "The PartyPrivacyAgreement to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreement_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partyPrivacyAgreement/{id}": {
            "get": {
                "operationId": "retrievePartyPrivacyAgreement",
                "summary": "Retrieves a PartyPrivacyAgreement by ID",
                "description": "This operation retrieves a PartyPrivacyAgreement entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "partyPrivacyAgreement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyAgreement",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPartyPrivacyAgreement",
                "summary": "Updates partially a PartyPrivacyAgreement",
                "description": "This operation updates partially a PartyPrivacyAgreement entity.",
                "tags": [
                    "partyPrivacyAgreement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyAgreement",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "partyPrivacyAgreement",
                        "description": "The PartyPrivacyAgreement to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreement_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePartyPrivacyAgreement",
                "summary": "Deletes a PartyPrivacyAgreement",
                "description": "This operation deletes a PartyPrivacyAgreement entity.",
                "tags": [
                    "partyPrivacyAgreement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PartyPrivacyAgreement",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileCreateEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileCreateEvent",
                "summary": "Client listener for entity PartyPrivacyProfileCreateEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileAttributeValueChangeEvent",
                "summary": "Client listener for entity PartyPrivacyProfileAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileDeleteEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileDeleteEvent",
                "summary": "Client listener for entity PartyPrivacyProfileDeleteEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileStatusChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileStatusChangeEvent",
                "summary": "Client listener for entity PartyPrivacyProfileStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileSpecificationCreateEvent",
                "summary": "Client listener for entity PartyPrivacyProfileSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileSpecificationAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileSpecificationAttributeValueChangeEvent",
                "summary": "Client listener for entity PartyPrivacyProfileSpecificationAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecificationAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileSpecificationDeleteEvent",
                "summary": "Client listener for entity PartyPrivacyProfileSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyProfileSpecificationStatusChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyProfileSpecificationStatusChangeEvent",
                "summary": "Client listener for entity PartyPrivacyProfileSpecificationStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyProfileSpecificationStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyAgreementCreateEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyAgreementCreateEvent",
                "summary": "Client listener for entity PartyPrivacyAgreementCreateEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyAgreementCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreementCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyAgreementAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyAgreementAttributeValueChangeEvent",
                "summary": "Client listener for entity PartyPrivacyAgreementAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyAgreementAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreementAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyAgreementDeleteEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyAgreementDeleteEvent",
                "summary": "Client listener for entity PartyPrivacyAgreementDeleteEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyAgreementDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreementDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/partyPrivacyAgreementStatusChangeEvent": {
            "post": {
                "operationId": "listenToPartyPrivacyAgreementStatusChangeEvent",
                "summary": "Client listener for entity PartyPrivacyAgreementStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification PartyPrivacyAgreementStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PartyPrivacyAgreementStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "Agreement": {
            "type": "object",
            "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "required": [
                "agreementItem",
                "agreementType",
                "engagedParty",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the agreement"
                },
                "href": {
                    "type": "string",
                    "description": "Unique url identifying the agreement as a resource"
                },
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string",
                    "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the agreement"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string",
                    "description": "A string identifying the version of the agreement"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AgreementAuthorization": {
            "type": "object",
            "description": "A business participant that is responsible for approving the agreement.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date associated with the authorization state."
                },
                "signatureRepresentation": {
                    "type": "string",
                    "description": "Indication that represents whether the signature is a physical paper signature or a digital signature."
                },
                "state": {
                    "type": "string",
                    "description": "Current status of the authorization, for example in process, approved, rejected."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AgreementItem": {
            "type": "object",
            "description": "A part of the agreement expressed in terms of a product offering and possibly including specific terms and conditions.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductRef"
                    },
                    "description": "The list of products indirectly referred by this agreement item (since an agreement item refers primarily to product offerings)"
                },
                "productOffering": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductOfferingRef"
                    },
                    "description": "The list of product offerings referred by this agreement item"
                },
                "termOrCondition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementTermOrCondition"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AgreementRef": {
            "type": "object",
            "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AgreementSpecificationRef": {
            "type": "object",
            "description": "Agreement specification reference. An AgreementSpecification represents a template of an agreement that can be used when establishing partnerships.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AgreementTermOrCondition": {
            "type": "object",
            "description": "Aspects of the agreement not formally specified elsewhere in the agreement and that cannot be captured elsewhere in a formal notation, or automatically monitored and require a more human level of management.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique number assigned for reference."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "Text that explains the term or condition of the agreement."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the term or condition of the agreement applies."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Any": {},
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyAgreement": {
            "type": "object",
            "description": "A specific type of agreement that formalizes the privacy profiles requested for a party",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string",
                    "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the agreement"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string",
                    "description": "A string identifying the version of the agreement"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "partyPrivacyProfile": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileRef"
                    },
                    "description": "The privacy profiles that are the subject of the agreement"
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "description": "A list of (typically) high criticality characteristics whose chosen privacy rules are included in the agreement"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyAgreement_Create": {
            "type": "object",
            "description": "A specific type of agreement that formalizes the privacy profiles requested for a party\nSkipped properties: id,href",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string",
                    "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the agreement"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string",
                    "description": "A string identifying the version of the agreement"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "partyPrivacyProfile": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileRef"
                    },
                    "description": "The privacy profiles that are the subject of the agreement"
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "description": "A list of (typically) high criticality characteristics whose chosen privacy rules are included in the agreement"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyAgreement_Update": {
            "type": "object",
            "description": "A specific type of agreement that formalizes the privacy profiles requested for a party\nSkipped properties: id,href",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string",
                    "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the agreement"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string",
                    "description": "A string identifying the version of the agreement"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "partyPrivacyProfile": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileRef"
                    },
                    "description": "The privacy profiles that are the subject of the agreement"
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "description": "A list of (typically) high criticality characteristics whose chosen privacy rules are included in the agreement"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyAgreementRef": {
            "type": "object",
            "description": "Reference to Party Privacy Agreement resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PartyPrivacyAgreementStatusExampleType": {
            "type": "string",
            "description": "Possible values for the status of party privacy profile agreement (for example: intialized, inProgress, rejected, pendingUpdate, validated)",
            "enum": [
                "initialized",
                "inProgress",
                "rejected",
                "pendingUpdate",
                "validated"
            ]
        },
        "PartyPrivacyProfile": {
            "type": "object",
            "description": "A Party Privacy Profile represents the set of Privacy settings defined for a Party",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the privacy profile"
                },
                "href": {
                    "type": "string",
                    "description": "URI reference of the privacy profile allowing navigation to the resource"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date on which the PartyPrivacyProfile was created"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the privacy profile"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the privacy profile"
                },
                "status": {
                    "type": "string",
                    "description": "The status of this profile (for example: created, terminated, etc.)"
                },
                "agreedByParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies."
                },
                "agreement": {
                    "$ref": "#/definitions/PartyPrivacyAgreementRef",
                    "description": "An agreement under which the privacy profile was produced."
                },
                "applicableForParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies."
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "description": "List of characteristics of the privacy profile"
                },
                "partyPrivacyProfileSpecification": {
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationRef",
                    "description": "The specification from which this profile was instantiated"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyProfile_Create": {
            "type": "object",
            "description": "A Party Privacy Profile represents the set of Privacy settings defined for a Party\nSkipped properties: id,href",
            "required": [
                "agreedByParty",
                "partyPrivacyProfileCharacteristic",
                "partyPrivacyProfileSpecification"
            ],
            "properties": {
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date on which the PartyPrivacyProfile was created"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the privacy profile"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the privacy profile"
                },
                "status": {
                    "type": "string",
                    "description": "The status of this profile (for example: created, terminated, etc.)"
                },
                "agreedByParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies."
                },
                "agreement": {
                    "$ref": "#/definitions/PartyPrivacyAgreementRef",
                    "description": "An agreement under which the privacy profile was produced."
                },
                "applicableForParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies."
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "minItems": 1,
                    "description": "List of characteristics of the privacy profile"
                },
                "partyPrivacyProfileSpecification": {
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationRef",
                    "description": "The specification from which this profile was instantiated"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyProfile_Update": {
            "type": "object",
            "description": "A Party Privacy Profile represents the set of Privacy settings defined for a Party\nSkipped properties: id,href,creationDate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the privacy profile"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the privacy profile"
                },
                "status": {
                    "type": "string",
                    "description": "The status of this profile (for example: created, terminated, etc.)"
                },
                "agreedByParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies."
                },
                "agreement": {
                    "$ref": "#/definitions/PartyPrivacyAgreementRef",
                    "description": "An agreement under which the privacy profile was produced."
                },
                "applicableForParty": {
                    "$ref": "#/definitions/RelatedParty",
                    "description": "The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies."
                },
                "partyPrivacyProfileCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileCharacteristic"
                    },
                    "description": "List of characteristics of the privacy profile"
                },
                "partyPrivacyProfileSpecification": {
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationRef",
                    "description": "The specification from which this profile was instantiated"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyProfileCharacteristic": {
            "type": "object",
            "description": "A characteristic for an instantiated party profile, where the value indicates the allowed use of the characteristic",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "privacyUsagePurpose": {
                    "type": "string",
                    "description": "Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH, etc."
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of parties to which the allowed use of the characteristic applies."
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyPrivacyProfileRef": {
            "type": "object",
            "description": "Reference to Party Privacy Profile resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PartyPrivacyProfileSpecification": {
            "type": "object",
            "description": "Party Privacy Profile Specification serves as a template for creating Privacy Profiles. The specification defines characteristics for the profile. For example there might be a profile specification for residential customers, and a different specification for partners.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the specification"
                },
                "href": {
                    "type": "string",
                    "description": "URI reference of the specification allowing navigation to the resource"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the specification"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the specification was last updated"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the specification"
                },
                "status": {
                    "type": "string",
                    "description": "Lifecycle status of the specification (for example: In Design, Active, Rejected, Retired)"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the specification, in case it is desired to maintain multiple versions of profile specifications"
                },
                "applicableRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyRoleSpecification"
                    },
                    "description": "A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent."
                },
                "partyPrivacyProfileSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileSpecificationCharacteristic"
                    },
                    "description": "List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated"
                },
                "productOffering": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductOfferingRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles involved in the definition or management of the specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the specification is valid"
                }
            }
        },
        "PartyPrivacyProfileSpecification_Create": {
            "type": "object",
            "description": "Party Privacy Profile Specification serves as a template for creating Privacy Profiles. The specification defines characteristics for the profile. For example there might be a profile specification for residential customers, and a different specification for partners.\nSkipped properties: id,href",
            "required": [
                "partyPrivacyProfileSpecCharacteristic"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the specification"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the specification was last updated"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the specification"
                },
                "status": {
                    "type": "string",
                    "description": "Lifecycle status of the specification (for example: In Design, Active, Rejected, Retired)"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the specification, in case it is desired to maintain multiple versions of profile specifications"
                },
                "applicableRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyRoleSpecification"
                    },
                    "description": "A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent."
                },
                "partyPrivacyProfileSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileSpecificationCharacteristic"
                    },
                    "minItems": 1,
                    "description": "List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated"
                },
                "productOffering": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductOfferingRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles involved in the definition or management of the specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the specification is valid"
                }
            }
        },
        "PartyPrivacyProfileSpecification_Update": {
            "type": "object",
            "description": "Party Privacy Profile Specification serves as a template for creating Privacy Profiles. The specification defines characteristics for the profile. For example there might be a profile specification for residential customers, and a different specification for partners.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the specification"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the specification was last updated"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the specification"
                },
                "status": {
                    "type": "string",
                    "description": "Lifecycle status of the specification (for example: In Design, Active, Rejected, Retired)"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the specification, in case it is desired to maintain multiple versions of profile specifications"
                },
                "applicableRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyRoleSpecification"
                    },
                    "description": "A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent."
                },
                "partyPrivacyProfileSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyPrivacyProfileSpecificationCharacteristic"
                    },
                    "description": "List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated"
                },
                "productOffering": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductOfferingRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles involved in the definition or management of the specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the specification is valid"
                }
            }
        },
        "PartyPrivacyProfileSpecificationCharacteristic": {
            "type": "object",
            "description": "A characteristic of the party privacy profile, whose value(s) would be supplied at runtime. For example, email address",
            "properties": {
                "id": {
                    "type": "string"
                },
                "criticalityLevel": {
                    "type": "string",
                    "description": "Level of criticality for this characteristic of personal identifiable information (e.g. in terms of the damage if this item was breached), such as low, medium, high."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "privacyType": {
                    "type": "string",
                    "description": "Type of privacy (e.g. Internal Purpose, External Purpose, Internal Retention, External Retention)"
                },
                "privacyUsagePurpose": {
                    "type": "string",
                    "description": "Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH)."
                },
                "allowedRole": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleSpecification"
                    },
                    "description": "A list of roles in the organization who are allowed access to this characteristic"
                },
                "partyPrivacyProfileSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SpecificationCharacteristicValue"
                    },
                    "description": "List of values that can be assigned to this characteristic at runtime"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this characteristic specification is valid."
                }
            }
        },
        "PartyPrivacyProfileSpecificationRef": {
            "type": "object",
            "description": "Reference to Party Privacy Specification resource",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PartyPrivacyProfileSpecificationStatusExampleType": {
            "type": "string",
            "description": "Possible values for the status of party privacy profile Specification (for example: inDesign, active, rejected, retired)",
            "enum": [
                "inDesign",
                "active",
                "rejected",
                "retired"
            ]
        },
        "PartyPrivacyProfileStatusExampleType": {
            "type": "string",
            "description": "Possible values for the status of party privacy profile (for example: created, terminated)",
            "enum": [
                "created",
                "terminated"
            ]
        },
        "PartyPrivacyRoleSpecification": {
            "type": "object",
            "description": "A PartyPrivacyRoleSpecification represents a specification of a role defined in the context of a given privacy spesification, such as Customer, User.",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "An explanatory text documenting the role specification"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role specification. This name uniquely identifies the role specification"
                },
                "agreementSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecificationRef"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ProductOfferingRef": {
            "type": "object",
            "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RoleSpecification": {
            "type": "object",
            "description": "A RoleSpecification represents a specification of a role.",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "An explanatory text documenting the role specification"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role specification. This name uniquely identifies the role specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "SpecificationCharacteristicValue": {
            "type": "object",
            "description": "A number or text that can be assigned to a SpecificationCharacteristic",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
                },
                "rangeInterval": {
                    "type": "string",
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                },
                "regex": {
                    "type": "string",
                    "description": "A regular expression constraint for given value"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "unit of measure for the valueCould be minutes, GB, etc"
                },
                "valueFrom": {
                    "type": "integer",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "integer",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this object is valid"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "the  value that the characteristic can take on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "PartyPrivacyProfileCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfile": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfile"
                }
            }
        },
        "PartyPrivacyProfileAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileAttributeValueChangeEventPayload"
                }
            }
        },
        "PartyPrivacyProfileAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfile": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfile"
                }
            }
        },
        "PartyPrivacyProfileDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfile": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfile"
                }
            }
        },
        "PartyPrivacyProfileStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfile": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfile"
                }
            }
        },
        "PartyPrivacyProfileSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfileSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                }
            }
        },
        "PartyPrivacyProfileSpecificationAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationAttributeValueChangeEventPayload"
                }
            }
        },
        "PartyPrivacyProfileSpecificationAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfileSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                }
            }
        },
        "PartyPrivacyProfileSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfileSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                }
            }
        },
        "PartyPrivacyProfileSpecificationStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecificationStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyProfileSpecificationStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyProfileSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyProfileSpecification"
                }
            }
        },
        "PartyPrivacyAgreementCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyAgreementCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyAgreementCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyAgreement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyAgreement"
                }
            }
        },
        "PartyPrivacyAgreementAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyAgreementAttributeValueChangeEventPayload"
                }
            }
        },
        "PartyPrivacyAgreementAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyAgreement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyAgreement"
                }
            }
        },
        "PartyPrivacyAgreementDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyAgreementDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyAgreementDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyAgreement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyAgreement"
                }
            }
        },
        "PartyPrivacyAgreementStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PartyPrivacyAgreementStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PartyPrivacyAgreementStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "partyPrivacyAgreement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PartyPrivacyAgreement"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}