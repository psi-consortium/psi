{
    "swagger": "2.0",
    "info": {
        "title": "API Party",
        "description": "## TMF API Reference : TMF 632 - Party \n\n### Release : 19.0 \n\nThe party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.\n\n### Resources\n- Organization\n- Individual\n- Hub\n\nParty API performs the following operations :\n- Retrieve an organization or an individual\n- Retrieve a collection of organizations or individuals according to given criteria\n- Create a new organization or a new individual\n- Update an existing organization or an existing individual\n- Delete an existing organization or an existing individual\n- Notify events on organizatin or individual",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/party/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "individual"
        },
        {
            "name": "organization"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/individual": {
            "get": {
                "operationId": "listIndividual",
                "summary": "List or find Individual objects",
                "description": "This operation list or find Individual entities",
                "tags": [
                    "individual"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Individual"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createIndividual",
                "summary": "Creates a Individual",
                "description": "This operation creates a Individual entity.",
                "tags": [
                    "individual"
                ],
                "parameters": [
                    {
                        "name": "individual",
                        "description": "The Individual to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Individual_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Individual"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/individual/{id}": {
            "get": {
                "operationId": "retrieveIndividual",
                "summary": "Retrieves a Individual by ID",
                "description": "This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "individual"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Individual",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Individual"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchIndividual",
                "summary": "Updates partially a Individual",
                "description": "This operation updates partially a Individual entity.",
                "tags": [
                    "individual"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Individual",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "individual",
                        "description": "The Individual to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Individual_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Individual"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteIndividual",
                "summary": "Deletes a Individual",
                "description": "This operation deletes a Individual entity.",
                "tags": [
                    "individual"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Individual",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "operationId": "listOrganization",
                "summary": "List or find Organization objects",
                "description": "This operation list or find Organization entities",
                "tags": [
                    "organization"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Organization"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createOrganization",
                "summary": "Creates a Organization",
                "description": "This operation creates a Organization entity.",
                "tags": [
                    "organization"
                ],
                "parameters": [
                    {
                        "name": "organization",
                        "description": "The Organization to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Organization_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "get": {
                "operationId": "retrieveOrganization",
                "summary": "Retrieves a Organization by ID",
                "description": "This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "organization"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Organization",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchOrganization",
                "summary": "Updates partially a Organization",
                "description": "This operation updates partially a Organization entity.",
                "tags": [
                    "organization"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Organization",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "organization",
                        "description": "The Organization to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Organization_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteOrganization",
                "summary": "Deletes a Organization",
                "description": "This operation deletes a Organization entity.",
                "tags": [
                    "organization"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Organization",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/individualCreateEvent": {
            "post": {
                "operationId": "listenToIndividualCreateEvent",
                "summary": "Client listener for entity IndividualCreateEvent",
                "description": "Example of a client listener for receiving the notification IndividualCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IndividualCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/individualAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToIndividualAttributeValueChangeEvent",
                "summary": "Client listener for entity IndividualAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IndividualAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/individualStateChangeEvent": {
            "post": {
                "operationId": "listenToIndividualStateChangeEvent",
                "summary": "Client listener for entity IndividualStateChangeEvent",
                "description": "Example of a client listener for receiving the notification IndividualStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IndividualStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/individualDeleteEvent": {
            "post": {
                "operationId": "listenToIndividualDeleteEvent",
                "summary": "Client listener for entity IndividualDeleteEvent",
                "description": "Example of a client listener for receiving the notification IndividualDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/IndividualDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/organizationCreateEvent": {
            "post": {
                "operationId": "listenToOrganizationCreateEvent",
                "summary": "Client listener for entity OrganizationCreateEvent",
                "description": "Example of a client listener for receiving the notification OrganizationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OrganizationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/organizationAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToOrganizationAttributeValueChangeEvent",
                "summary": "Client listener for entity OrganizationAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OrganizationAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/organizationStateChangeEvent": {
            "post": {
                "operationId": "listenToOrganizationStateChangeEvent",
                "summary": "Client listener for entity OrganizationStateChangeEvent",
                "description": "Example of a client listener for receiving the notification OrganizationStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OrganizationStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/organizationDeleteEvent": {
            "post": {
                "operationId": "listenToOrganizationDeleteEvent",
                "summary": "Client listener for entity OrganizationDeleteEvent",
                "description": "Example of a client listener for receiving the notification OrganizationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/OrganizationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "Any": {},
        "Attachment": {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AttachmentRefOrValue": {
            "type": "object",
            "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ContactMedium": {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "mediumType": {
                    "type": "string",
                    "description": "Type of the contact medium, such as: email address, telephone number, postal address"
                },
                "preferred": {
                    "type": "boolean",
                    "description": "If true, indicates that is the preferred contact medium"
                },
                "characteristic": {
                    "$ref": "#/definitions/MediumCharacteristic",
                    "description": "Any additional characteristic(s) of this contact medium"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period that the contact medium is valid for"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Disability": {
            "type": "object",
            "description": "Lack or inadequate strength or ability.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "disabilityCode": {
                    "type": "string",
                    "description": "Code of the disability"
                },
                "disabilityName": {
                    "type": "string",
                    "description": "Name of the disability"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ExternalReference": {
            "type": "object",
            "description": "External reference of the individual or reference in other system",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "externalReferenceType": {
                    "type": "string",
                    "description": "Type of the external reference"
                },
                "name": {
                    "type": "string",
                    "description": "External reference name"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Individual": {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "aristocraticTitle": {
                    "type": "string",
                    "description": "e.g. Baron, Graf, Earl,\u2026"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Birth date"
                },
                "countryOfBirth": {
                    "type": "string",
                    "description": "Country where the individual was born"
                },
                "deathDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of death"
                },
                "familyName": {
                    "type": "string",
                    "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
                },
                "familyNamePrefix": {
                    "type": "string",
                    "description": "Family name prefix"
                },
                "formattedName": {
                    "type": "string",
                    "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,\u2026)"
                },
                "fullName": {
                    "type": "string",
                    "description": "Full name flatten (first, middle, and last names)"
                },
                "gender": {
                    "type": "string",
                    "description": "Gender"
                },
                "generation": {
                    "type": "string",
                    "description": "e.g.. Sr, Jr, III (the third),\u2026"
                },
                "givenName": {
                    "type": "string",
                    "description": "First name of the individual"
                },
                "legalName": {
                    "type": "string",
                    "description": "Legal name or birth name (name one has for official purposes)"
                },
                "location": {
                    "type": "string",
                    "description": "Temporary current location od the individual (may be used if the individual has approved its sharing)"
                },
                "maritalStatus": {
                    "type": "string",
                    "description": "Marital status (married, divorced, widow ...)"
                },
                "middleName": {
                    "type": "string",
                    "description": "Middles name or initial"
                },
                "nationality": {
                    "type": "string",
                    "description": "Nationality"
                },
                "placeOfBirth": {
                    "type": "string",
                    "description": "Reference to the place where the individual was born"
                },
                "preferredGivenName": {
                    "type": "string",
                    "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
                },
                "title": {
                    "type": "string",
                    "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "disability": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Disability"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "individualIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndividualIdentification"
                    }
                },
                "languageAbility": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LanguageAbility"
                    }
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameIndividual"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "skill": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Skill"
                    }
                },
                "status": {
                    "$ref": "#/definitions/IndividualStateType",
                    "description": "Status of the individual"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Individual_Create": {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.\nSkipped properties: id,href",
            "required": [
                "givenName",
                "familyName"
            ],
            "properties": {
                "aristocraticTitle": {
                    "type": "string",
                    "description": "e.g. Baron, Graf, Earl,\u2026"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Birth date"
                },
                "countryOfBirth": {
                    "type": "string",
                    "description": "Country where the individual was born"
                },
                "deathDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of death"
                },
                "familyName": {
                    "type": "string",
                    "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
                },
                "familyNamePrefix": {
                    "type": "string",
                    "description": "Family name prefix"
                },
                "formattedName": {
                    "type": "string",
                    "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,\u2026)"
                },
                "fullName": {
                    "type": "string",
                    "description": "Full name flatten (first, middle, and last names)"
                },
                "gender": {
                    "type": "string",
                    "description": "Gender"
                },
                "generation": {
                    "type": "string",
                    "description": "e.g.. Sr, Jr, III (the third),\u2026"
                },
                "givenName": {
                    "type": "string",
                    "description": "First name of the individual"
                },
                "legalName": {
                    "type": "string",
                    "description": "Legal name or birth name (name one has for official purposes)"
                },
                "location": {
                    "type": "string",
                    "description": "Temporary current location od the individual (may be used if the individual has approved its sharing)"
                },
                "maritalStatus": {
                    "type": "string",
                    "description": "Marital status (married, divorced, widow ...)"
                },
                "middleName": {
                    "type": "string",
                    "description": "Middles name or initial"
                },
                "nationality": {
                    "type": "string",
                    "description": "Nationality"
                },
                "placeOfBirth": {
                    "type": "string",
                    "description": "Reference to the place where the individual was born"
                },
                "preferredGivenName": {
                    "type": "string",
                    "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
                },
                "title": {
                    "type": "string",
                    "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "disability": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Disability"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "individualIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndividualIdentification"
                    }
                },
                "languageAbility": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LanguageAbility"
                    }
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameIndividual"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "skill": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Skill"
                    }
                },
                "status": {
                    "$ref": "#/definitions/IndividualStateType",
                    "description": "Status of the individual"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Individual_Update": {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.\nSkipped properties: id,href",
            "properties": {
                "aristocraticTitle": {
                    "type": "string",
                    "description": "e.g. Baron, Graf, Earl,\u2026"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Birth date"
                },
                "countryOfBirth": {
                    "type": "string",
                    "description": "Country where the individual was born"
                },
                "deathDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of death"
                },
                "familyName": {
                    "type": "string",
                    "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
                },
                "familyNamePrefix": {
                    "type": "string",
                    "description": "Family name prefix"
                },
                "formattedName": {
                    "type": "string",
                    "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,\u2026)"
                },
                "fullName": {
                    "type": "string",
                    "description": "Full name flatten (first, middle, and last names)"
                },
                "gender": {
                    "type": "string",
                    "description": "Gender"
                },
                "generation": {
                    "type": "string",
                    "description": "e.g.. Sr, Jr, III (the third),\u2026"
                },
                "givenName": {
                    "type": "string",
                    "description": "First name of the individual"
                },
                "legalName": {
                    "type": "string",
                    "description": "Legal name or birth name (name one has for official purposes)"
                },
                "location": {
                    "type": "string",
                    "description": "Temporary current location od the individual (may be used if the individual has approved its sharing)"
                },
                "maritalStatus": {
                    "type": "string",
                    "description": "Marital status (married, divorced, widow ...)"
                },
                "middleName": {
                    "type": "string",
                    "description": "Middles name or initial"
                },
                "nationality": {
                    "type": "string",
                    "description": "Nationality"
                },
                "placeOfBirth": {
                    "type": "string",
                    "description": "Reference to the place where the individual was born"
                },
                "preferredGivenName": {
                    "type": "string",
                    "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
                },
                "title": {
                    "type": "string",
                    "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "disability": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Disability"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "individualIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IndividualIdentification"
                    }
                },
                "languageAbility": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LanguageAbility"
                    }
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameIndividual"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "skill": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Skill"
                    }
                },
                "status": {
                    "$ref": "#/definitions/IndividualStateType",
                    "description": "Status of the individual"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "IndividualIdentification": {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "identificationId": {
                    "type": "string",
                    "description": "Identifier"
                },
                "identificationType": {
                    "type": "string",
                    "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
                },
                "issuingAuthority": {
                    "type": "string",
                    "description": "Authority which has issued the identifier, such as: social security, town hall"
                },
                "issuingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the identifier was issued"
                },
                "attachment": {
                    "$ref": "#/definitions/AttachmentRefOrValue"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the identification information is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "IndividualStateType": {
            "type": "string",
            "description": "Valid values for the lifecycle state of the individual",
            "enum": [
                "initialized",
                "validated",
                "deceased"
            ]
        },
        "LanguageAbility": {
            "type": "object",
            "description": "Ability of an individual to understand or converse in a language.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isFavouriteLanguage": {
                    "type": "boolean",
                    "description": "A \u201ctrue\u201d value specifies whether the language is considered by the individual as his favourite one"
                },
                "languageCode": {
                    "type": "string",
                    "description": "Language code (RFC 5646)"
                },
                "languageName": {
                    "type": "string",
                    "description": "Language name"
                },
                "listeningProficiency": {
                    "type": "string",
                    "description": "Listening proficiency evaluated for this language"
                },
                "readingProficiency": {
                    "type": "string",
                    "description": "Reading proficiency evaluated for this language"
                },
                "speakingProficiency": {
                    "type": "string",
                    "description": "Speaking proficiency evaluated for this language"
                },
                "writingProficiency": {
                    "type": "string",
                    "description": "Writing proficiency evaluated for this language"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MediumCharacteristic": {
            "type": "object",
            "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "city": {
                    "type": "string",
                    "description": "The city"
                },
                "contactType": {
                    "type": "string",
                    "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation\u2026"
                },
                "country": {
                    "type": "string",
                    "description": "The country"
                },
                "emailAddress": {
                    "type": "string",
                    "description": "Full email address in standard format"
                },
                "faxNumber": {
                    "type": "string",
                    "description": "The fax number of the contact"
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "The primary phone number of the contact"
                },
                "postCode": {
                    "type": "string",
                    "description": "Postcode"
                },
                "socialNetworkId": {
                    "type": "string",
                    "description": "Identifier as a member of a social network"
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "State or province"
                },
                "street1": {
                    "type": "string",
                    "description": "Describes the street"
                },
                "street2": {
                    "type": "string",
                    "description": "Complementary street description"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Organization": {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isHeadOffice": {
                    "type": "boolean",
                    "description": "If value is true, the organization is the head office"
                },
                "isLegalEntity": {
                    "type": "boolean",
                    "description": "If value is true, the organization is a legal entity known by a national referential."
                },
                "name": {
                    "type": "string",
                    "description": "Organization name (department name for example)"
                },
                "nameType": {
                    "type": "string",
                    "description": "Type of the name : Co, Inc, Ltd,\u2026"
                },
                "organizationType": {
                    "type": "string",
                    "description": "Type of Organization (company, department...)"
                },
                "tradingName": {
                    "type": "string",
                    "description": "Name that the organization (unit) trades under"
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "existsDuring": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "organizationChildRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationChildRelationship"
                    }
                },
                "organizationIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationIdentification"
                    }
                },
                "organizationParentRelationship": {
                    "$ref": "#/definitions/OrganizationParentRelationship"
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameOrganization"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "status": {
                    "$ref": "#/definitions/OrganizationStateType",
                    "description": "Status of the organization"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Organization_Create": {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.\nSkipped properties: id,href",
            "required": [
                "tradingName"
            ],
            "properties": {
                "isHeadOffice": {
                    "type": "boolean",
                    "description": "If value is true, the organization is the head office"
                },
                "isLegalEntity": {
                    "type": "boolean",
                    "description": "If value is true, the organization is a legal entity known by a national referential."
                },
                "name": {
                    "type": "string",
                    "description": "Organization name (department name for example)"
                },
                "nameType": {
                    "type": "string",
                    "description": "Type of the name : Co, Inc, Ltd,\u2026"
                },
                "organizationType": {
                    "type": "string",
                    "description": "Type of Organization (company, department...)"
                },
                "tradingName": {
                    "type": "string",
                    "description": "Name that the organization (unit) trades under"
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "existsDuring": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "organizationChildRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationChildRelationship"
                    }
                },
                "organizationIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationIdentification"
                    }
                },
                "organizationParentRelationship": {
                    "$ref": "#/definitions/OrganizationParentRelationship"
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameOrganization"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "status": {
                    "$ref": "#/definitions/OrganizationStateType",
                    "description": "Status of the organization"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Organization_Update": {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.\nSkipped properties: id,href",
            "properties": {
                "isHeadOffice": {
                    "type": "boolean",
                    "description": "If value is true, the organization is the head office"
                },
                "isLegalEntity": {
                    "type": "boolean",
                    "description": "If value is true, the organization is a legal entity known by a national referential."
                },
                "name": {
                    "type": "string",
                    "description": "Organization name (department name for example)"
                },
                "nameType": {
                    "type": "string",
                    "description": "Type of the name : Co, Inc, Ltd,\u2026"
                },
                "organizationType": {
                    "type": "string",
                    "description": "Type of Organization (company, department...)"
                },
                "tradingName": {
                    "type": "string",
                    "description": "Name that the organization (unit) trades under"
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "existsDuring": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "organizationChildRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationChildRelationship"
                    }
                },
                "organizationIdentification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationIdentification"
                    }
                },
                "organizationParentRelationship": {
                    "$ref": "#/definitions/OrganizationParentRelationship"
                },
                "otherName": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtherNameOrganization"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "status": {
                    "$ref": "#/definitions/OrganizationStateType",
                    "description": "Status of the organization"
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OrganizationChildRelationship": {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
                },
                "organization": {
                    "$ref": "#/definitions/OrganizationRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OrganizationIdentification": {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "identificationId": {
                    "type": "string",
                    "description": "Identifier"
                },
                "identificationType": {
                    "type": "string",
                    "description": "Type of identification information used to identify the company in a country or internationally"
                },
                "issuingAuthority": {
                    "type": "string",
                    "description": "Authority which has issued the identifier (chamber of commerce...)"
                },
                "issuingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the identifier was issued"
                },
                "attachment": {
                    "$ref": "#/definitions/AttachmentRefOrValue"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the identification information is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OrganizationParentRelationship": {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
                },
                "organization": {
                    "$ref": "#/definitions/OrganizationRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OrganizationRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "OrganizationStateType": {
            "type": "string",
            "description": "Valid values for the lifecycle state of the organization",
            "enum": [
                "initialized",
                "validated",
                "closed"
            ]
        },
        "OtherNameIndividual": {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "aristocraticTitle": {
                    "type": "string",
                    "description": "e.g. Baron, Graf, Earl,\u2026"
                },
                "familyName": {
                    "type": "string",
                    "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
                },
                "familyNamePrefix": {
                    "type": "string",
                    "description": "Family name prefix"
                },
                "formattedName": {
                    "type": "string",
                    "description": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,\u2026)"
                },
                "fullName": {
                    "type": "string",
                    "description": "Full name flatten (first, middle, and last names)"
                },
                "generation": {
                    "type": "string",
                    "description": "e.g. Sr, Jr\u2026"
                },
                "givenName": {
                    "type": "string",
                    "description": "First name"
                },
                "legalName": {
                    "type": "string",
                    "description": "Legal name or birth name (name one has for official purposes)"
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name or initial"
                },
                "preferredGivenName": {
                    "type": "string",
                    "description": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
                },
                "title": {
                    "type": "string",
                    "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,...."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "OtherNameOrganization": {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Organization name (department name for example)"
                },
                "nameType": {
                    "type": "string",
                    "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
                },
                "tradingName": {
                    "type": "string",
                    "description": "The name that the organization trades under"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Party": {
            "type": "object",
            "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the organization"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink to access the organization"
                },
                "contactMedium": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                },
                "creditRating": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PartyCreditProfile"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "partyCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "taxExemptionCertificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxExemptionCertificate"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PartyCreditProfile": {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "creditAgencyName": {
                    "type": "string",
                    "description": "Name of the credit agency giving the score"
                },
                "creditAgencyType": {
                    "type": "string",
                    "description": "Type of the credit agency giving the score"
                },
                "ratingReference": {
                    "type": "string",
                    "description": "Reference corresponding to the credit rating"
                },
                "ratingScore": {
                    "type": "integer",
                    "description": "A measure of a party\u2019s creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "Skill": {
            "type": "object",
            "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "comment": {
                    "type": "string",
                    "description": "A free text comment linked to the evaluation done"
                },
                "evaluatedLevel": {
                    "type": "string",
                    "description": "Level of expertise in a skill evaluated for an individual"
                },
                "skillCode": {
                    "type": "string",
                    "description": "Code of the skill"
                },
                "skillName": {
                    "type": "string",
                    "description": "Name of the skill such as Java language,\u2026"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TaxDefinition": {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. There are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California,\u2026).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the tax."
                },
                "jurisdictionLevel": {
                    "example": "Country",
                    "type": "string",
                    "description": "Level of the jurisdiction that levies the tax"
                },
                "jurisdictionName": {
                    "example": "USA",
                    "type": "string",
                    "description": "Name of the jurisdiction that levies the tax"
                },
                "name": {
                    "type": "string",
                    "description": "Tax name."
                },
                "taxType": {
                    "example": "VAT",
                    "type": "string",
                    "description": "Type of the tax."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the tax applies, might be set for example if it is known that the jurisdiction will cease to apply the tax after a certain date."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TaxExemptionCertificate": {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the tax exemption within list of the exemptions"
                },
                "certificateNumber": {
                    "type": "string",
                    "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
                },
                "issuingJurisdiction": {
                    "example": "USA",
                    "type": "string",
                    "description": "Name of the jurisdiction that issued the exemption"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the tax exemption"
                },
                "attachment": {
                    "$ref": "#/definitions/AttachmentRefOrValue",
                    "description": "The actual certificate contents, if such is supplied by the issuing jurisdiction"
                },
                "taxDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaxDefinition"
                    },
                    "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the exemption is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "IndividualCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IndividualCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "IndividualCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "individual": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Individual"
                }
            }
        },
        "IndividualAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IndividualAttributeValueChangeEventPayload"
                }
            }
        },
        "IndividualAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "individual": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Individual"
                }
            }
        },
        "IndividualStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IndividualStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "IndividualStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "individual": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Individual"
                }
            }
        },
        "IndividualDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/IndividualDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "IndividualDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "individual": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Individual"
                }
            }
        },
        "OrganizationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OrganizationCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OrganizationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "organization": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Organization"
                }
            }
        },
        "OrganizationAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OrganizationAttributeValueChangeEventPayload"
                }
            }
        },
        "OrganizationAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "organization": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Organization"
                }
            }
        },
        "OrganizationStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OrganizationStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OrganizationStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "organization": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Organization"
                }
            }
        },
        "OrganizationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/OrganizationDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "OrganizationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "organization": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Organization"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}