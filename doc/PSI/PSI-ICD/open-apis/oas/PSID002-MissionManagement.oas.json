{
    "openapi": "3.0.1",
    "info": {
        "title": "Mission Management",
        "description": "## PSID API Reference: PSID002 - Mission Management\n\nThe Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).",
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "https://{serverRoot}/psi-api/missionManagement/v2/",
            "variables": {
                "serverRoot": {
                    "default": "localhost:8080"
                }
            }
        }
    ],
    "tags": [
        {
            "name": "mission",
            "description": "Mission API"
        }
    ],
    "paths": {
        "/mission": {
            "get": {
                "tags": ["mission"],
                "summary": "List or find Mission objects",
                "description": "This operation list or find Mission entities",
                "operationId": "listMission",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to be provided in response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Requested index for start of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Requested number of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mission"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["mission"],
                "summary": "Creates a Mission",
                "description": "This operation creates a Mission entity.",
                "operationId": "createMission",
                "requestBody": {
                    "description": "The Mission to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mission_FVO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mission/{id}": {
            "get": {
                "tags": ["mission"],
                "summary": "Retrieves a Mission",
                "description": "This operation retrieves a Mission entity.",
                "operationId": "retrieveMission",
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Mission",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["mission"],
                "summary": "Deletes a Mission",
                "description": "This operation deletes a Mission entity.",
                "operationId": "deleteMission",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the Mission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchMission",
                "summary": "Updates partially a Mission",
                "description": "This operation updates partially a Mission entity.",
                "tags": ["mission"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Mission",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "description": "The Mission to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mission_MVO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Update Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Mission": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Mission": "#/components/schemas/Mission"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "type": "object",
                        "description": "A mission of a customer.",
                        "required": ["name"],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the mission"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the mission"
                            },
                            "category": {
                                "type": "string",
                                "description": "Category of the mission like 'Humanitarian Aid', 'Wildfire Fighting' and so on."
                            },
                            "timeframe": {
                                "$ref": "#/components/schemas/TimePeriod",
                                "description": "The timeframe for this mission"
                            },
                            "lastUpdate": {
                                "type": "string",
                                "description": "Date and time of the last update of this REST resource",
                                "format": "date-time"
                            },
                            "status": {
                                "$ref": "#/components/schemas/MissionStatusType"
                            },
                            "characteristic": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Characteristic"
                                }
                            },
                            "place": {
                                "type": "array",
                                "description": "List of places where the mission is conducted.",
                                "items": {
                                    "$ref": "#/components/schemas/PlaceRefOrValue"
                                }
                            },
                            "asset": {
                                "type": "array",
                                "description": "List of assets for this mission.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionAsset"
                                }
                            },
                            "missionRelationship": {
                                "type": "array",
                                "description": "Relation to other missions.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionRelationship"
                                }
                            },
                            "relatedParty": {
                                "type": "array",
                                "description": "A related party defines party or party role linked to a specific entity.",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedParty"
                                }
                            }
                        }
                    }
                ]
            },
            "MissionRelationship": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Mission"
                    },
                    "href": {
                        "type": "string",
                        "description": "Reference of the Mission"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Mission"
                    },
                    "relationshipType": {
                        "type": "string",
                        "description": "Type of the Mission relationship can be isChild, dependent etc..."
                    }
                }
            },
            "Mission_FVO": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Mission": "#/components/schemas/Mission_FVO"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity_FVO"
                    },
                    {
                        "type": "object",
                        "description": "A mission of a customer.\nSkipped properties: id,href,lastUpdated",
                        "required": ["name"],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the mission"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the mission"
                            },
                            "category": {
                                "type": "string",
                                "description": "Category of the mission like 'Humanitarian Aid', 'Wildfire Fighting' and so on."
                            },
                            "timeframe": {
                                "$ref": "#/components/schemas/TimePeriod",
                                "description": "The timeframe for this mission"
                            },
                            "status": {
                                "$ref": "#/components/schemas/MissionStatusType"
                            },
                            "characteristic": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Characteristic"
                                }
                            },
                            "place": {
                                "type": "array",
                                "description": "List of places where the mission is conducted.",
                                "items": {
                                    "$ref": "#/components/schemas/PlaceRefOrValue"
                                }
                            },
                            "asset": {
                                "type": "array",
                                "description": "List of assets for this mission.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionAsset"
                                }
                            },
                            "missionRelationship": {
                                "type": "array",
                                "description": "Relation to other missions.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionRelationship"
                                }
                            },
                            "relatedParty": {
                                "type": "array",
                                "description": "A related party defines party or party role linked to a specific entity.",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedParty"
                                }
                            }
                        }
                    }
                ]
            },
            "Mission_MVO": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Mission": "#/components/schemas/Mission_MVO"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity_MVO"
                    },
                    {
                        "type": "object",
                        "description": "A mission of a customer.\nSkipped properties: id,href,lastUpdated",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the mission"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the mission"
                            },
                            "category": {
                                "type": "string",
                                "description": "Category of the mission like 'Humanitarian Aid', 'Wildfire Fighting' and so on."
                            },
                            "timeframe": {
                                "$ref": "#/components/schemas/TimePeriod",
                                "description": "The timeframe for this mission"
                            },
                            "status": {
                                "$ref": "#/components/schemas/MissionStatusType"
                            },
                            "characteristic": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Characteristic"
                                }
                            },
                            "place": {
                                "type": "array",
                                "description": "List of places where the mission is conducted.",
                                "items": {
                                    "$ref": "#/components/schemas/PlaceRefOrValue"
                                }
                            },
                            "asset": {
                                "type": "array",
                                "description": "List of assets for this mission.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionAsset"
                                }
                            },
                            "missionRelationship": {
                                "type": "array",
                                "description": "Relation to other missions.",
                                "items": {
                                    "$ref": "#/components/schemas/MissionRelationship"
                                }
                            },
                            "relatedParty": {
                                "type": "array",
                                "description": "A related party defines party or party role linked to a specific entity.",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedParty"
                                }
                            }
                        }
                    }
                ]
            },
            "MissionStatusType": {
                "type": "string",
                "description": "Possible values for the status of a mission",
                "enum": ["draft", "active", "cancelled", "completed"]
            },
            "Place": {
                "type": "object",
                "description": "Place reference.",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Place": "#/components/schemas/Place",
                        "GeographicSite": "#/components/schemas/GeographicSite",
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "GeographicAddress": "#/components/schemas/GeographicAddress"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the Place"
                            }
                        }
                    }
                ]
            },
            "GeographicAddress": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Place"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "city": {
                                "type": "string",
                                "description": "City that the address is in"
                            },
                            "country": {
                                "type": "string",
                                "description": "Country that the address is in"
                            },
                            "locality": {
                                "type": "string",
                                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
                            },
                            "postcode": {
                                "type": "string",
                                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
                            },
                            "stateOrProvince": {
                                "type": "string",
                                "description": "the State or Province that the address is in"
                            },
                            "streetName": {
                                "type": "string",
                                "description": "Name of the street or other street type"
                            },
                            "streetNr": {
                                "type": "string",
                                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
                            },
                            "streetNrLast": {
                                "type": "string",
                                "description": "Last number in a range of street numbers allocated to a property"
                            },
                            "streetNrLastSuffix": {
                                "type": "string",
                                "description": "Last street number suffix for a ranged address"
                            },
                            "streetNrSuffix": {
                                "type": "string",
                                "description": "the first street number suffix"
                            },
                            "streetSuffix": {
                                "type": "string",
                                "description": "A modifier denoting a relative direction"
                            },
                            "streetType": {
                                "type": "string",
                                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
                            },
                            "countryCode": {
                                "type": "array",
                                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes.",
                                "items": {
                                    "$ref": "#/components/schemas/StandardIdentifier"
                                }
                            },
                            "externalIdentifier": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ExternalIdentifier"
                                }
                            },
                            "geographicLocation": {
                                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
                            },
                            "geographicSubAddress": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GeographicSubAddress"
                                }
                            },
                            "geographicAddressType": {
                                "type": "string",
                                "description": "Classification of the address, e.g., residential, industrial "
                            }
                        },
                        "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress"
                    }
                ]
            },
            "PlaceRef": {
                "type": "object",
                "description": "Place reference.",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PlaceRef": "#/components/schemas/PlaceRef"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    }
                ]
            },
            "PlaceRefOrValue": {
                "type": "object",
                "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/GeographicAddress"
                    },
                    {
                        "$ref": "#/components/schemas/GeographicLocation"
                    },
                    {
                        "$ref": "#/components/schemas/PlaceRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicAddress": "#/components/schemas/GeographicAddress",
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "PlaceRef": "#/components/schemas/PlaceRef"
                    }
                }
            },
            "GeographicLocation": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Place"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "geoJson": {
                                "$ref": "#/components/schemas/Geometry"
                            },
                            "bbox": {
                                "minItems": 4,
                                "type": "array",
                                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                                "items": {
                                    "type": "number"
                                }
                            }
                        },
                        "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute."
                    }
                ]
            },
            "GeographicSubAddress": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicSubAddress": "#/components/schemas/GeographicSubAddress"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "buildingName": {
                                "type": "string",
                                "description": "allows for buildings that have well-known names"
                            },
                            "href": {
                                "type": "string",
                                "description": "Link to the subAddress",
                                "format": "uri"
                            },
                            "id": {
                                "type": "string",
                                "description": "Unique Identifier of the subAddress"
                            },
                            "levelNumber": {
                                "type": "string",
                                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
                            },
                            "levelType": {
                                "type": "string",
                                "description": "describes level types within a building"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the subAddress to identify it with a meaningful identification"
                            },
                            "privateStreetName": {
                                "type": "string",
                                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
                            },
                            "privateStreetNumber": {
                                "type": "string",
                                "description": "private streets numbers internal to a private street"
                            },
                            "subUnit": {
                                "type": "array",
                                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                                "items": {
                                    "$ref": "#/components/schemas/GeographicSubAddressUnit"
                                }
                            },
                            "subAddressType": {
                                "type": "string",
                                "description": "Type of subAddress : it can be a subunit or a private street"
                            }
                        },
                        "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building."
                    }
                ]
            },
            "GeographicSubAddressUnit": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicSubAddressUnit": "#/components/schemas/GeographicSubAddressUnit"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "subUnitNumber": {
                                "type": "string",
                                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
                            },
                            "subUnitType": {
                                "type": "string",
                                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
                            }
                        },
                        "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF."
                    }
                ]
            },
            "GeographicLocationRef": {
                "type": "object",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicLocationRef": "#/components/schemas/GeographicLocationRef"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    }
                ]
            },
            "GeographicLocationRefOrValue": {
                "type": "object",
                "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/GeographicLocation"
                    },
                    {
                        "$ref": "#/components/schemas/GeographicLocationRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "GeographicLocationRef": "#/components/schemas/GeographicLocationRef"
                    }
                }
            },
            "MissionAsset": {
                "type": "object",
                "description": "Planning of a required asset in a mission. May contain any combination of user-defined characteristics for an inquiry, an ordered product or a service/resource that is already in the customer inventory.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for this asset"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this asset"
                    },
                    "targetProductSchema": {
                        "$ref": "#/components/schemas/TargetProductSchema"
                    },
                    "servicePeriod": {
                        "$ref": "#/components/schemas/RelativeTimePeriod"
                    },
                    "place": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                        }
                    },
                    "inquiredProductCharacteristic": {
                        "type": "array",
                        "description": "A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProductCharacteristic"
                        }
                    },
                    "realizingProduct": {
                        "type": "array",
                        "description": "A Product that is used to implement the defined specification. Usually set after creating a ProductOrder.",
                        "items": {
                            "$ref": "#/components/schemas/ProductRef"
                        }
                    },
                    "realizingService": {
                        "type": "array",
                        "description": "A Service that is part of the customers inventory. Either selected manually or found by the Inquiry API.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRef"
                        }
                    },
                    "realizingResource": {
                        "type": "array",
                        "description": "A Resource that is part of the customers inventory. Either selected manually or found by the Inquiry API.",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        }
                    },
                    "assetRelationship": {
                        "type": "array",
                        "description": "Relation to other assets.",
                        "items": {
                            "$ref": "#/components/schemas/MissionAssetRelationship"
                        }
                    }
                }
            },
            "MissionAssetRelationship": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related entity."
                    },
                    "relationshipType": {
                        "type": "string",
                        "description": "Type of relationship between assets such as requires, exchangableTo, partOf, usedBy"
                    }
                }
            },
            "Characteristic": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Characteristic": "#/components/schemas/Characteristic"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier of the characteristic"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the characteristic"
                            },
                            "valueType": {
                                "type": "string",
                                "description": "Data type of the value of the characteristic"
                            },
                            "characteristicRelationship": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CharacteristicRelationship"
                                }
                            },
                            "unitOfMeasure": {
                                "type": "string",
                                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                            }
                        },
                        "description": "Describes a given characteristic of an object or entity through a name/value pair."
                    }
                ]
            },
            "CharacteristicRelationship": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier of the characteristic"
                            },
                            "relationshipType": {
                                "type": "string",
                                "description": "The type of relationship"
                            }
                        },
                        "description": "Another Characteristic that is related to the current Characteristic;"
                    }
                ]
            },
            "ProductRef": {
                "type": "object",
                "description": "A Product reference",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ProductRef": "#/components/schemas/ProductRef"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    }
                ]
            },
            "ServiceRef": {
                "type": "object",
                "description": "A Service reference",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ServiceRef": "#/components/schemas/ServiceRef"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    }
                ]
            },
            "ResourceRef": {
                "type": "object",
                "description": "Resource reference, for when Resource is used by other entities.",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ResourceRef": "#/components/schemas/ResourceRef"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    }
                ]
            },
            "RelatedParty": {
                "type": "object",
                "description": "Related Party reference. A related party defines party or party role linked to a specific entity.",
                "required": ["@referredType", "id"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related entity."
                    },
                    "role": {
                        "type": "string",
                        "description": "Role played by the related party"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                }
            },
            "RelatedPlaceRefOrValue": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "RelatedPlaceRefOrValue": "#/components/schemas/RelatedPlaceRefOrValue"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "role": {
                                "type": "string"
                            },
                            "place": {
                                "$ref": "#/components/schemas/PlaceRefOrValue"
                            }
                        },
                        "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself"
                    }
                ]
            },
            "InquiredProductCharacteristic": {
                "type": "object",
                "description": "A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can take a discrete value, such as color, can take a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).",
                "required": ["id", "inquiredProductCharacteristicValue"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID for the characteristic"
                    },
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                    },
                    "priority": {
                        "type": "number",
                        "description": "Priority of this characteristic compared to others in ascending order (the most important one is 1). Multiple characteristics can be equally important. If the attribute is not set, the characteristic has lowest priority."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                    },
                    "inquiredProductCharacteristicValue": {
                        "type": "array",
                        "description": "The values of the attributes in the InquiredProductCharacteristicValue object describe the values of the attributes that the customer is requesting for the corresponding InquiredProduct.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredCharacteristicValueSpecification"
                        }
                    }
                }
            },
            "InquiredCharacteristicValueSpecification": {
                "type": "object",
                "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic.",
                "properties": {
                    "precedence": {
                        "$ref": "#/components/schemas/CharacteristicValuePrecedence",
                        "default": "preferred",
                        "description": "Precedence of this value. Responds to an inquiry should aim to fullfil the 'preferred' value(s), but may deviate in the boundaries of min/max values if specified."
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
                    },
                    "value": {}
                }
            },
            "CharacteristicValuePrecedence": {
                "type": "string",
                "description": "Possible values for the precedence of a characteristic value.",
                "enum": ["preferred", "minimum", "maximum", "alternative"]
            },
            "TargetProductSchema": {
                "type": "object",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "Class type of the target product"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "This field provides a link to the schema describing the target product",
                        "format": "uri"
                    }
                },
                "description": "The reference object to the schema and type of target product which is described by product specification"
            },
            "TimePeriod": {
                "type": "object",
                "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
                "properties": {
                    "endDateTime": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the time period, using IETC-RFC-3339 format"
                    },
                    "startDateTime": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the time period, using IETC-RFC-3339 format"
                    }
                }
            },
            "RelativeTimePeriod": {
                "type": "object",
                "description": "A period of time relative to another.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    {
                        "properties": {
                            "startOffset": {
                                "example": "P7D",
                                "type": "string",
                                "format": "duration",
                                "description": "Relative start of the time period, using IETC-RFC-3339 duration format."
                            },
                            "startAnchor": {
                                "type": "string",
                                "description": "Reference for startDateTime, e.g. 'mission.startDateTime', 'mission.endDateTime', 'self.endDateTime' or 'asset[1234].startTime'."
                            },
                            "endOffset": {
                                "example": "-P7D",
                                "type": "string",
                                "format": "duration",
                                "description": "Relative end of the time period, using IETC-RFC-3339 duration format."
                            },
                            "endAnchor": {
                                "type": "string",
                                "description": "Reference for endDateTime, e.g. 'mission.startDateTime', 'mission.endDateTime', 'self.startDateTime' or 'asset[1234].endTime'."
                            }
                        }
                    }
                ]
            },
            "Geometry": {
                "type": "object",
                "description": "A GeoJson geometry.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/LineString"
                    },
                    {
                        "$ref": "#/components/schemas/MultiLineString"
                    },
                    {
                        "$ref": "#/components/schemas/MultiPoint"
                    },
                    {
                        "$ref": "#/components/schemas/MultiPolygon"
                    },
                    {
                        "$ref": "#/components/schemas/Point"
                    },
                    {
                        "$ref": "#/components/schemas/Polygon"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "LineString": "#/components/schemas/LineString",
                        "MultiLineString": "#/components/schemas/MultiLineString",
                        "MultiPoint": "#/components/schemas/MultiPoint",
                        "MultiPolygon": "#/components/schemas/MultiPolygon",
                        "Point": "#/components/schemas/Point",
                        "Polygon": "#/components/schemas/Polygon"
                    }
                }
            },
            "Point2D": {
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "items": {
                    "type": "number"
                }
            },
            "Point": {
                "type": "object",
                "description": "A GeoJSON Point.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/Point2D"
                    }
                }
            },
            "MultiPoint": {
                "type": "object",
                "description": "A GeoJSON MultiPoint.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Point2D"
                        }
                    }
                }
            },
            "LineString": {
                "type": "object",
                "description": "A GeoJSON LineString.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/Point2D"
                        }
                    }
                }
            },
            "MultiLineString": {
                "type": "object",
                "description": "A GeoJSON MultiLineString.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                                "$ref": "#/components/schemas/Point2D"
                            }
                        }
                    }
                }
            },
            "Polygon": {
                "type": "object",
                "description": "A GeoJSON Polygon.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "minItems": 4,
                            "items": {
                                "$ref": "#/components/schemas/Point2D"
                            }
                        }
                    }
                }
            },
            "MultiPolygon": {
                "type": "object",
                "description": "A GeoJSON MultiPolygon.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "$ref": "#/components/schemas/Point2D"
                                }
                            }
                        }
                    }
                }
            },
            "Addressable": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    }
                },
                "description": "Base schema for adressable entities"
            },
            "Addressable_FVO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    }
                },
                "description": "Base schema for adressable entities"
            },
            "Entity": {
                "type": "object",
                "description": "Base entity schema for use in TMForum Open-APIs",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/Addressable"
                    }
                ]
            },
            "Entity_FVO": {
                "type": "object",
                "description": "Base entity schema for use in TMForum Open-APIs. Property.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible_FVO"
                    },
                    {
                        "$ref": "#/components/schemas/Addressable_FVO"
                    }
                ]
            },
            "Entity_MVO": {
                "type": "object",
                "description": "Base entity schema for use in TMForum Open-APIs. Property.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    }
                ]
            },
            "EntityRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/Addressable"
                    },
                    {
                        "required": ["id"],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The identifier of the referred entity."
                            },
                            "href": {
                                "type": "string",
                                "description": "The URI of the referred entity.",
                                "format": "uri"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the referred entity."
                            },
                            "@referredType": {
                                "type": "string",
                                "description": "The actual type of the target instance when needed for disambiguation."
                            }
                        },
                        "description": "Entity reference schema to be use for all entityRef class."
                    }
                ]
            },
            "Extensible": {
                "type": "object",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    }
                },
                "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
                "required": ["@type"]
            },
            "Extensible_FVO": {
                "required": ["@type"],
                "type": "object",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    }
                },
                "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type"
            },
            "StandardIdentifier": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "StandardIdentifier": "#/components/schemas/StandardIdentifier"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "format": {
                                "type": "string",
                                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                                "example": "ISO 3166-1"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                                "example": "GB"
                            }
                        },
                        "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")"
                    }
                ]
            },
            "ExternalIdentifier": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ExternalIdentifier": "#/components/schemas/ExternalIdentifier"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "owner": {
                                "type": "string",
                                "description": "Name of the external system that owns the entity.",
                                "example": "MagentoCommerce"
                            },
                            "externalIdentifierType": {
                                "type": "string",
                                "description": "Type of the identification, typically would be the type of the entity within the external system",
                                "example": "ProductOrder"
                            },
                            "id": {
                                "type": "string",
                                "description": "identification of the entity within the external system."
                            }
                        },
                        "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list."
                    }
                ]
            },
            "Error": {
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Error": "#/components/schemas/Error"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "required": ["code", "reason"],
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Application relevant detail, defined in the API or a common list."
                            },
                            "reason": {
                                "type": "string",
                                "description": "Explanation of the reason for the error which can be shown to a client user."
                            },
                            "message": {
                                "type": "string",
                                "description": "More details and corrective actions related to the error which can be shown to a client user."
                            },
                            "status": {
                                "type": "string",
                                "description": "HTTP Error code extension"
                            },
                            "referenceError": {
                                "type": "string",
                                "description": "URI of documentation describing the error."
                            }
                        }
                    }
                ]
            }
        }
    }
}
