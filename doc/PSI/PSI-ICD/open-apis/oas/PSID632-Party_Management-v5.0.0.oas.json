{
  "openapi": "3.0.1",
  "info": {
    "title": "Party Management",
    "description": "TMF API Reference : TMF 632 - Party  Release: 22.5\nThe party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role.\nFor example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information.\nResources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "/psi-api/partyManagement/v2/"
    }
  ],
  "tags": [
    {
      "name": "individual",
      "description": "Operations for Individual Resource"
    },
    {
      "name": "organization",
      "description": "Operations for Organization Resource"
    }
  ],
  "paths": {
    "/individual": {
      "get": {
        "tags": [
          "individual"
        ],
        "summary": "List or find Individual objects",
        "description": "List or find Individual objects",
        "operationId": "listIndividual",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200IndividualArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "individual"
        ],
        "summary": "Creates a Individual",
        "description": "This operation creates a Individual entity.",
        "operationId": "createIndividual",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Individual_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201Individual"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/individual/{id}": {
      "get": {
        "tags": [
          "individual"
        ],
        "summary": "Retrieves a Individual by ID",
        "description": "This operation retrieves a Individual entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveIndividual",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200Individual_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "individual"
        ],
        "summary": "Deletes a Individual",
        "description": "This operation deletes a Individual entity.",
        "operationId": "deleteIndividual",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "individual"
        ],
        "summary": "Updates partially a Individual",
        "description": "This operation updates partially a Individual entity.",
        "operationId": "patchIndividual",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Individual_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200Individual_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/organization": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "List or find Organization objects",
        "description": "List or find Organization objects",
        "operationId": "listOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200OrganizationArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Creates a Organization",
        "description": "This operation creates a Organization entity.",
        "operationId": "createOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201Organization"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Retrieves a Organization by ID",
        "description": "This operation retrieves a Organization entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200Organization_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "summary": "Deletes a Organization",
        "description": "This operation deletes a Organization entity.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "summary": "Updates partially a Organization",
        "description": "This operation updates partially a Organization entity.",
        "operationId": "patchOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200Organization_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountRef": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AccountRef": "#/components/schemas/AccountRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "AccountRef_FVO": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AccountRef": "#/components/schemas/AccountRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "AccountRef_MVO": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AccountRef": "#/components/schemas/AccountRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "Addressable": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        },
        "description": "Base schema for adressable entities"
      },
      "Addressable_FVO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        },
        "description": "Base schema for adressable entities"
      },
      "AgreementRef": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "AgreementRef_FVO": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "AgreementRef_MVO": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AgreementRef": "#/components/schemas/AgreementRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "AttachmentOrDocumentRef": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "AttachmentRef": "#/components/schemas/AttachmentOrDocumentRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "type": "string",
                "description": "Link to the attachment media/content"
              }
            },
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures"
          }
        ]
      },
      "BooleanArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "description": "A characteristic which value is an array of Boolean(s)."
          }
        ]
      },
      "BooleanArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "description": "A characteristic which value is an array of Boolean(s)."
          }
        ]
      },
      "BooleanArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            },
            "description": "A characteristic which value is an array of Boolean(s)."
          }
        ]
      },
      "BooleanCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Boolean."
          }
        ]
      },
      "BooleanCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Boolean."
          }
        ]
      },
      "BooleanCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Boolean."
          }
        ]
      },
      "BusinessPartner": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "BusinessPartner_FVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "BusinessPartner_MVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "Characteristic": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic",
            "StringCharacteristic": "#/components/schemas/StringCharacteristic",
            "StringArrayCharacteristic": "#/components/schemas/StringArrayCharacteristic",
            "ObjectCharacteristic": "#/components/schemas/ObjectCharacteristic",
            "ObjectArrayCharacteristic": "#/components/schemas/ObjectArrayCharacteristic",
            "NumberCharacteristic": "#/components/schemas/NumberCharacteristic",
            "NumberArrayCharacteristic": "#/components/schemas/NumberArrayCharacteristic",
            "IntegerCharacteristic": "#/components/schemas/IntegerCharacteristic",
            "IntegerArrayCharacteristic": "#/components/schemas/IntegerArrayCharacteristic",
            "FloatCharacteristic": "#/components/schemas/FloatCharacteristic",
            "FloatArrayCharacteristic": "#/components/schemas/FloatArrayCharacteristic",
            "BooleanCharacteristic": "#/components/schemas/BooleanCharacteristic",
            "BooleanArrayCharacteristic": "#/components/schemas/BooleanArrayCharacteristic"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              }
            },
            "description": "Describes a given characteristic of an object or entity through a name/value pair."
          }
        ]
      },
      "CharacteristicRelationship": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "description": "Another Characteristic that is related to the current Characteristic;"
          }
        ]
      },
      "CharacteristicRelationship_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "required": [
              "id",
              "relationshipType"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "description": "Another Characteristic that is related to the current Characteristic;"
          }
        ]
      },
      "CharacteristicRelationship_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "description": "Another Characteristic that is related to the current Characteristic;"
          }
        ]
      },
      "Characteristic_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_FVO",
            "StringCharacteristic": "#/components/schemas/StringCharacteristic_FVO",
            "StringArrayCharacteristic": "#/components/schemas/StringArrayCharacteristic_FVO",
            "ObjectCharacteristic": "#/components/schemas/ObjectCharacteristic_FVO",
            "ObjectArrayCharacteristic": "#/components/schemas/ObjectArrayCharacteristic_FVO",
            "NumberCharacteristic": "#/components/schemas/NumberCharacteristic_FVO",
            "NumberArrayCharacteristic": "#/components/schemas/NumberArrayCharacteristic_FVO",
            "IntegerCharacteristic": "#/components/schemas/IntegerCharacteristic_FVO",
            "IntegerArrayCharacteristic": "#/components/schemas/IntegerArrayCharacteristic_FVO",
            "FloatCharacteristic": "#/components/schemas/FloatCharacteristic_FVO",
            "FloatArrayCharacteristic": "#/components/schemas/FloatArrayCharacteristic_FVO",
            "BooleanCharacteristic": "#/components/schemas/BooleanCharacteristic_FVO",
            "BooleanArrayCharacteristic": "#/components/schemas/BooleanArrayCharacteristic_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              }
            },
            "description": "Describes a given characteristic of an object or entity through a name/value pair."
          }
        ]
      },
      "Characteristic_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic_MVO",
            "StringCharacteristic": "#/components/schemas/StringCharacteristic_MVO",
            "StringArrayCharacteristic": "#/components/schemas/StringArrayCharacteristic_MVO",
            "ObjectCharacteristic": "#/components/schemas/ObjectCharacteristic_MVO",
            "ObjectArrayCharacteristic": "#/components/schemas/ObjectArrayCharacteristic_MVO",
            "NumberCharacteristic": "#/components/schemas/NumberCharacteristic_MVO",
            "NumberArrayCharacteristic": "#/components/schemas/NumberArrayCharacteristic_MVO",
            "IntegerCharacteristic": "#/components/schemas/IntegerCharacteristic_MVO",
            "IntegerArrayCharacteristic": "#/components/schemas/IntegerArrayCharacteristic_MVO",
            "FloatCharacteristic": "#/components/schemas/FloatCharacteristic_MVO",
            "FloatArrayCharacteristic": "#/components/schemas/FloatArrayCharacteristic_MVO",
            "BooleanCharacteristic": "#/components/schemas/BooleanCharacteristic_MVO",
            "BooleanArrayCharacteristic": "#/components/schemas/BooleanArrayCharacteristic_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
              }
            },
            "description": "Describes a given characteristic of an object or entity through a name/value pair."
          }
        ]
      },
      "Consumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Consumer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Consumer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "ContactMedium": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium",
            "SocialContactMedium": "#/components/schemas/SocialContactMedium",
            "PhoneContactMedium": "#/components/schemas/PhoneContactMedium",
            "GeographicAddressContactMedium": "#/components/schemas/GeographicAddressContactMedium",
            "FaxContactMedium": "#/components/schemas/FaxContactMedium",
            "EmailContactMedium": "#/components/schemas/EmailContactMedium"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Indicates the contact medium that could be used to contact the party."
          }
        ]
      },
      "ContactMedium_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium_FVO",
            "SocialContactMedium": "#/components/schemas/SocialContactMedium_FVO",
            "PhoneContactMedium": "#/components/schemas/PhoneContactMedium_FVO",
            "GeographicAddressContactMedium": "#/components/schemas/GeographicAddressContactMedium_FVO",
            "FaxContactMedium": "#/components/schemas/FaxContactMedium_FVO",
            "EmailContactMedium": "#/components/schemas/EmailContactMedium_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Indicates the contact medium that could be used to contact the party."
          }
        ]
      },
      "ContactMedium_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ContactMedium": "#/components/schemas/ContactMedium_MVO",
            "SocialContactMedium": "#/components/schemas/SocialContactMedium_MVO",
            "PhoneContactMedium": "#/components/schemas/PhoneContactMedium_MVO",
            "GeographicAddressContactMedium": "#/components/schemas/GeographicAddressContactMedium_MVO",
            "FaxContactMedium": "#/components/schemas/FaxContactMedium_MVO",
            "EmailContactMedium": "#/components/schemas/EmailContactMedium_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Indicates the contact medium that could be used to contact the party."
          }
        ]
      },
      "CreditProfile": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "description": "The date the profile was established",
                "format": "date-time"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one."
          }
        ]
      },
      "CreditProfile_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "description": "The date the profile was established",
                "format": "date-time"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one."
          }
        ]
      },
      "CreditProfile_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CreditProfile": "#/components/schemas/CreditProfile_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "description": "The date the profile was established",
                "format": "date-time"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one."
          }
        ]
      },
      "Disability": {
        "type": "object",
        "properties": {
          "disabilityCode": {
            "type": "string",
            "description": "Code of the disability"
          },
          "disabilityName": {
            "type": "string",
            "description": "Name of the disability"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "Lack or inadequate strength or ability."
      },
      "EmailContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium"
          },
          {
            "type": "object",
            "properties": {
              "emailAddress": {
                "type": "string",
                "description": "Full email address in standard format"
              }
            },
            "description": "Describes an email that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "EmailContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_FVO"
          },
          {
            "type": "object",
            "properties": {
              "emailAddress": {
                "type": "string",
                "description": "Full email address in standard format"
              }
            },
            "description": "Describes an email that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "EmailContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_MVO"
          },
          {
            "type": "object",
            "properties": {
              "emailAddress": {
                "type": "string",
                "description": "Full email address in standard format"
              }
            },
            "description": "Describes an email that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity.",
                "format": "uri"
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            },
            "description": "Entity reference schema to be use for all entityRef class."
          }
        ]
      },
      "EntityRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Addressable_FVO"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity.",
                "format": "uri"
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            },
            "description": "Entity reference schema to be use for all entityRef class."
          }
        ]
      },
      "Entity_FVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Addressable_FVO"
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Extensible": {
        "required": [
          "@type"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type"
      },
      "Extensible_FVO": {
        "required": [
          "@type"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type"
      },
      "ExternalIdentifier": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list."
          }
        ]
      },
      "ExternalIdentifier_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list."
          }
        ]
      },
      "ExternalIdentifier_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ExternalIdentifier": "#/components/schemas/ExternalIdentifier_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list."
          }
        ]
      },
      "FaxContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium"
          },
          {
            "type": "object",
            "properties": {
              "faxNumber": {
                "type": "string",
                "description": "The fax number of the contact"
              }
            },
            "description": "Describes a fax that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "FaxContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_FVO"
          },
          {
            "type": "object",
            "properties": {
              "faxNumber": {
                "type": "string",
                "description": "The fax number of the contact"
              }
            },
            "description": "Describes a fax that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "FaxContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_MVO"
          },
          {
            "type": "object",
            "properties": {
              "faxNumber": {
                "type": "string",
                "description": "The fax number of the contact"
              }
            },
            "description": "Describes a fax that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "FloatCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic",
                "format": "float"
              }
            },
            "description": "A characteristic which value is a Float."
          }
        ]
      },
      "FloatCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic",
                "format": "float"
              }
            },
            "description": "A characteristic which value is a Float."
          }
        ]
      },
      "FloatCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic",
                "format": "float"
              }
            },
            "description": "A characteristic which value is a Float."
          }
        ]
      },
      "GeographicAddressContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium"
          },
          {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "description": "The city"
              },
              "country": {
                "type": "string",
                "description": "The country"
              },
              "postCode": {
                "type": "string",
                "description": "Postcode"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "State or province"
              },
              "street1": {
                "type": "string",
                "description": "Describes the street"
              },
              "street2": {
                "type": "string",
                "description": "Complementary street description"
              },
              "geographicAddress": {
                "$ref": "#/components/schemas/GeographicAddressRef"
              }
            },
            "description": "Describes a geographical address that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "GeographicAddressContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_FVO"
          },
          {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "description": "The city"
              },
              "country": {
                "type": "string",
                "description": "The country"
              },
              "postCode": {
                "type": "string",
                "description": "Postcode"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "State or province"
              },
              "street1": {
                "type": "string",
                "description": "Describes the street"
              },
              "street2": {
                "type": "string",
                "description": "Complementary street description"
              },
              "geographicAddress": {
                "$ref": "#/components/schemas/GeographicAddressRef_FVO"
              }
            },
            "description": "Describes a geographical address that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "GeographicAddressContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_MVO"
          },
          {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "description": "The city"
              },
              "country": {
                "type": "string",
                "description": "The country"
              },
              "postCode": {
                "type": "string",
                "description": "Postcode"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "State or province"
              },
              "street1": {
                "type": "string",
                "description": "Describes the street"
              },
              "street2": {
                "type": "string",
                "description": "Complementary street description"
              },
              "geographicAddress": {
                "$ref": "#/components/schemas/GeographicAddressRef_MVO"
              }
            },
            "description": "Describes a geographical address that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "GeographicAddressRef": {
        "type": "object",
        "description": "Reference to a Geographic Address.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRef": "#/components/schemas/GeographicAddressRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "GeographicAddressRef_FVO": {
        "type": "object",
        "description": "Reference to a Geographic Address.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRef": "#/components/schemas/GeographicAddressRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "GeographicAddressRef_MVO": {
        "type": "object",
        "description": "Reference to a Geographic Address.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "GeographicAddressRef": "#/components/schemas/GeographicAddressRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "Individual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "description": "Birth date",
                "format": "date-time"
              },
              "deathDate": {
                "type": "string",
                "description": "Date of death",
                "format": "date-time"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of other names by which this individual is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                }
              },
              "individualIdentification": {
                "type": "array",
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification"
                }
              },
              "disability": {
                "type": "array",
                "description": "List of disabilities suffered by the individual",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                }
              },
              "languageAbility": {
                "type": "array",
                "description": "List of national languages known by the individual",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                }
              },
              "skill": {
                "type": "array",
                "description": "List of skills exhibited by the individual",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                }
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            },
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about."
          }
        ]
      },
      "IndividualIdentification": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "IndividualIdentification": "#/components/schemas/IndividualIdentification"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)"
          }
        ]
      },
      "IndividualIdentification_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "IndividualIdentification": "#/components/schemas/IndividualIdentification_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)"
          }
        ]
      },
      "IndividualIdentification_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "IndividualIdentification": "#/components/schemas/IndividualIdentification_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)"
          }
        ]
      },
      "IndividualStateType": {
        "type": "string",
        "description": "Valid values for the lifecycle state of the individual",
        "enum": [
          "initialized",
          "validated",
          "deceased"
        ]
      },
      "Individual_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "required": [
              "familyName",
              "givenName"
            ],
            "type": "object",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "description": "Birth date",
                "format": "date-time"
              },
              "deathDate": {
                "type": "string",
                "description": "Date of death",
                "format": "date-time"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of other names by which this individual is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                }
              },
              "individualIdentification": {
                "type": "array",
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_FVO"
                }
              },
              "disability": {
                "type": "array",
                "description": "List of disabilities suffered by the individual",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                }
              },
              "languageAbility": {
                "type": "array",
                "description": "List of national languages known by the individual",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                }
              },
              "skill": {
                "type": "array",
                "description": "List of skills exhibited by the individual",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                }
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            },
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about."
          }
        ]
      },
      "Individual_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "description": "Birth date",
                "format": "date-time"
              },
              "deathDate": {
                "type": "string",
                "description": "Date of death",
                "format": "date-time"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of other names by which this individual is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                }
              },
              "individualIdentification": {
                "type": "array",
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_MVO"
                }
              },
              "disability": {
                "type": "array",
                "description": "List of disabilities suffered by the individual",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                }
              },
              "languageAbility": {
                "type": "array",
                "description": "List of national languages known by the individual",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                }
              },
              "skill": {
                "type": "array",
                "description": "List of skills exhibited by the individual",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                }
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            },
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about."
          }
        ]
      },
      "IntegerArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "description": "A characteristic which value is an array of Integer(s)."
          }
        ]
      },
      "IntegerArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "description": "A characteristic which value is an array of Integer(s)."
          }
        ]
      },
      "IntegerArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "description": "A characteristic which value is an array of Integer(s)."
          }
        ]
      },
      "IntegerCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Integer."
          }
        ]
      },
      "IntegerCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Integer."
          }
        ]
      },
      "IntegerCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Integer."
          }
        ]
      },
      "LanguageAbility": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Language code (RFC 5646)"
          },
          "languageName": {
            "type": "string",
            "description": "Language name"
          },
          "isFavouriteLanguage": {
            "type": "boolean",
            "description": "A “true” value specifies whether the language is considered by the individual as his favourite one"
          },
          "writingProficiency": {
            "type": "string",
            "description": "Writing proficiency evaluated for this language"
          },
          "readingProficiency": {
            "type": "string",
            "description": "Reading proficiency evaluated for this language"
          },
          "speakingProficiency": {
            "type": "string",
            "description": "Speaking proficiency evaluated for this language"
          },
          "listeningProficiency": {
            "type": "string",
            "description": "Listening proficiency evaluated for this language"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "Ability of an individual to understand or converse in a language."
      },
      "NumberArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "description": "A characteristic which value is an array of Number(s)."
          }
        ]
      },
      "NumberArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "description": "A characteristic which value is an array of Number(s)."
          }
        ]
      },
      "NumberArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "description": "A characteristic which value is an array of Number(s)."
          }
        ]
      },
      "NumberCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Number."
          }
        ]
      },
      "NumberCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Number."
          }
        ]
      },
      "NumberCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Number."
          }
        ]
      },
      "ObjectArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            },
            "description": "A characteristic which value is an array of Object(s)."
          }
        ]
      },
      "ObjectArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            },
            "description": "A characteristic which value is an array of Object(s)."
          }
        ]
      },
      "ObjectArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            },
            "description": "A characteristic which value is an array of Object(s)."
          }
        ]
      },
      "ObjectCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Object."
          }
        ]
      },
      "ObjectCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Object."
          }
        ]
      },
      "ObjectCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a Object."
          }
        ]
      },
      "Organization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of additional names by which the organization is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization"
                }
              },
              "organizationIdentification": {
                "type": "array",
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification"
                }
              },
              "organizationChildRelationship": {
                "type": "array",
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship"
                }
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            },
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data."
          }
        ]
      },
      "OrganizationChildRelationship": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            },
            "description": "Child references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationChildRelationship_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_FVO"
              }
            },
            "description": "Child references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationChildRelationship_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationChildRelationship": "#/components/schemas/OrganizationChildRelationship_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            },
            "description": "Child references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationIdentification": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an organization"
          }
        ]
      },
      "OrganizationIdentification_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an organization"
          }
        ]
      },
      "OrganizationIdentification_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationIdentification": "#/components/schemas/OrganizationIdentification_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "description": "Date at which the identifier was issued",
                "format": "date-time"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "Represents our registration of information used as proof of identity by an organization"
          }
        ]
      },
      "OrganizationParentRelationship": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            },
            "description": "Parent references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationParentRelationship_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_FVO"
              }
            },
            "description": "Parent references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationParentRelationship_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationParentRelationship": "#/components/schemas/OrganizationParentRelationship_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            },
            "description": "Parent references of an organization in a structure of organizations."
          }
        ]
      },
      "OrganizationRef": {
        "type": "object",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationRef": "#/components/schemas/OrganizationRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "OrganizationRef_FVO": {
        "type": "object",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationRef": "#/components/schemas/OrganizationRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "OrganizationRef_MVO": {
        "type": "object",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OrganizationRef": "#/components/schemas/OrganizationRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "OrganizationStateType": {
        "type": "string",
        "description": "Valid values for the lifecycle state of the organization",
        "enum": [
          "initialized",
          "validated",
          "closed"
        ]
      },
      "Organization_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of additional names by which the organization is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization_FVO"
                }
              },
              "organizationIdentification": {
                "type": "array",
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_FVO"
                }
              },
              "organizationChildRelationship": {
                "type": "array",
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship_FVO"
                }
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship_FVO"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            },
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data."
          }
        ]
      },
      "Organization_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "description": "List of additional names by which the organization is known",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization_MVO"
                }
              },
              "organizationIdentification": {
                "type": "array",
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_MVO"
                }
              },
              "organizationChildRelationship": {
                "type": "array",
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship_MVO"
                }
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship_MVO"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            },
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data."
          }
        ]
      },
      "OtherNameIndividual": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,...."
          },
          "aristocraticTitle": {
            "type": "string",
            "description": "e.g. Baron, Graf, Earl, etc."
          },
          "generation": {
            "type": "string",
            "description": "e.g. Sr, Jr, etc."
          },
          "givenName": {
            "type": "string",
            "description": "First name"
          },
          "preferredGivenName": {
            "type": "string",
            "description": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
          },
          "familyNamePrefix": {
            "type": "string",
            "description": "Family name prefix"
          },
          "familyName": {
            "type": "string",
            "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name or birth name (name one has for official purposes)"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial"
          },
          "fullName": {
            "type": "string",
            "description": "Full name flatten (first, middle, and last names)"
          },
          "formattedName": {
            "type": "string",
            "description": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean, etc.)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name."
      },
      "OtherNameOrganization": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Keeps track of other names, for example the old name of an organization."
          }
        ]
      },
      "OtherNameOrganization_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Keeps track of other names, for example the old name of an organization."
          }
        ]
      },
      "OtherNameOrganization_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "OtherNameOrganization": "#/components/schemas/OtherNameOrganization_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "Keeps track of other names, for example the old name of an organization."
          }
        ]
      },
      "Party": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party",
            "Organization": "#/components/schemas/Organization",
            "Individual": "#/components/schemas/Individual"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "externalReference": {
                "type": "array",
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "partyCharacteristic": {
                "type": "array",
                "description": "List of additional characteristics that a Party can take on.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "taxExemptionCertificate": {
                "type": "array",
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate"
                }
              },
              "creditRating": {
                "type": "array",
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "List of parties and/or party roles related to this party",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "List of means for contacting the party, e.g. mobile phone, email address",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              }
            },
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization."
          }
        ]
      },
      "PartyCreditProfile": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                "format": "int32"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency."
          }
        ]
      },
      "PartyCreditProfile_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                "format": "int32"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency."
          }
        ]
      },
      "PartyCreditProfile_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyCreditProfile": "#/components/schemas/PartyCreditProfile_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                "format": "int32"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency."
          }
        ]
      },
      "PartyOrPartyRole": {
        "type": "object",
        "description": "",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef",
            "Individual": "#/components/schemas/Individual",
            "Organization": "#/components/schemas/Organization",
            "PartyRole": "#/components/schemas/PartyRole",
            "Supplier": "#/components/schemas/Supplier",
            "BusinessPartner": "#/components/schemas/BusinessPartner",
            "Consumer": "#/components/schemas/Consumer",
            "Producer": "#/components/schemas/Producer"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          },
          {
            "$ref": "#/components/schemas/Individual"
          },
          {
            "$ref": "#/components/schemas/Organization"
          },
          {
            "$ref": "#/components/schemas/PartyRole"
          },
          {
            "$ref": "#/components/schemas/Supplier"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner"
          },
          {
            "$ref": "#/components/schemas/Consumer"
          },
          {
            "$ref": "#/components/schemas/Producer"
          }
        ]
      },
      "PartyOrPartyRole_FVO": {
        "type": "object",
        "description": "",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_FVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_FVO",
            "Individual": "#/components/schemas/Individual_FVO",
            "Organization": "#/components/schemas/Organization_FVO",
            "PartyRole": "#/components/schemas/PartyRole_FVO",
            "Supplier": "#/components/schemas/Supplier_FVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_FVO",
            "Consumer": "#/components/schemas/Consumer_FVO",
            "Producer": "#/components/schemas/Producer_FVO"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_FVO"
          },
          {
            "$ref": "#/components/schemas/Individual_FVO"
          },
          {
            "$ref": "#/components/schemas/Organization_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_FVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_FVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_FVO"
          },
          {
            "$ref": "#/components/schemas/Producer_FVO"
          }
        ]
      },
      "PartyOrPartyRole_MVO": {
        "type": "object",
        "description": "",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_MVO",
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO",
            "Individual": "#/components/schemas/Individual_MVO",
            "Organization": "#/components/schemas/Organization_MVO",
            "PartyRole": "#/components/schemas/PartyRole_MVO",
            "Supplier": "#/components/schemas/Supplier_MVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_MVO",
            "Consumer": "#/components/schemas/Consumer_MVO",
            "Producer": "#/components/schemas/Producer_MVO"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Individual_MVO"
          },
          {
            "$ref": "#/components/schemas/Organization_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_MVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_MVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_MVO"
          },
          {
            "$ref": "#/components/schemas/Producer_MVO"
          }
        ]
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRef_FVO": {
        "type": "object",
        "description": "A Party reference",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRef": "#/components/schemas/PartyRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRole": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole",
            "Supplier": "#/components/schemas/Supplier",
            "Producer": "#/components/schemas/Producer",
            "Consumer": "#/components/schemas/Consumer",
            "BusinessPartner": "#/components/schemas/BusinessPartner"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef"
              },
              "characteristic": {
                "type": "array",
                "description": "Describes the characteristic of a party role.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "The part played by a party in a given context."
          }
        ]
      },
      "PartyRoleRef": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleRef": "#/components/schemas/PartyRoleRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            },
            "description": "Party role reference. A party role represents the part played by a party in a given context."
          }
        ]
      },
      "PartyRoleRef_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            },
            "description": "Party role reference. A party role represents the part played by a party in a given context."
          }
        ]
      },
      "PartyRoleRef_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleRef": "#/components/schemas/PartyRoleRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            },
            "description": "Party role reference. A party role represents the part played by a party in a given context."
          }
        ]
      },
      "PartyRoleSpecificationRef": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRoleSpecificationRef_FVO": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PartyRoleSpecificationRef_MVO": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRoleSpecificationRef": "#/components/schemas/PartyRoleSpecificationRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PartyRole_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole_FVO",
            "Supplier": "#/components/schemas/Supplier_FVO",
            "Producer": "#/components/schemas/Producer_FVO",
            "Consumer": "#/components/schemas/Consumer_FVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "required": [
              "engagedParty",
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef_FVO"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef_FVO"
              },
              "characteristic": {
                "type": "array",
                "description": "Describes the characteristic of a party role.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef_FVO"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef_FVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_FVO"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef_FVO"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "The part played by a party in a given context."
          }
        ]
      },
      "PartyRole_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PartyRole": "#/components/schemas/PartyRole_MVO",
            "Supplier": "#/components/schemas/Supplier_MVO",
            "Producer": "#/components/schemas/Producer_MVO",
            "Consumer": "#/components/schemas/Consumer_MVO",
            "BusinessPartner": "#/components/schemas/BusinessPartner_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "required": [
              "engagedParty",
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef_MVO"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef_MVO"
              },
              "characteristic": {
                "type": "array",
                "description": "Describes the characteristic of a party role.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "account": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountRef_MVO"
                }
              },
              "agreement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef_MVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                }
              },
              "paymentMethod": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef_MVO"
                }
              },
              "creditProfile": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "description": "The part played by a party in a given context."
          }
        ]
      },
      "Party_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party_FVO",
            "Organization": "#/components/schemas/Organization_FVO",
            "Individual": "#/components/schemas/Individual_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "type": "object",
            "properties": {
              "externalReference": {
                "type": "array",
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "partyCharacteristic": {
                "type": "array",
                "description": "List of additional characteristics that a Party can take on.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "taxExemptionCertificate": {
                "type": "array",
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_FVO"
                }
              },
              "creditRating": {
                "type": "array",
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "List of parties and/or party roles related to this party",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "List of means for contacting the party, e.g. mobile phone, email address",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_FVO"
                }
              }
            },
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization."
          }
        ]
      },
      "Party_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Party": "#/components/schemas/Party_MVO",
            "Organization": "#/components/schemas/Organization_MVO",
            "Individual": "#/components/schemas/Individual_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "type": "object",
            "properties": {
              "externalReference": {
                "type": "array",
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "partyCharacteristic": {
                "type": "array",
                "description": "List of additional characteristics that a Party can take on.",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "taxExemptionCertificate": {
                "type": "array",
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_MVO"
                }
              },
              "creditRating": {
                "type": "array",
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "List of parties and/or party roles related to this party",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "List of means for contacting the party, e.g. mobile phone, email address",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                }
              }
            },
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization."
          }
        ]
      },
      "PaymentMethodRef": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PaymentMethodRef_FVO": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ]
      },
      "PaymentMethodRef_MVO": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PaymentMethodRef": "#/components/schemas/PaymentMethodRef_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ]
      },
      "PhoneContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the contact"
              }
            },
            "description": "Describes a phone number that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "PhoneContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_FVO"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the contact"
              }
            },
            "description": "Describes a phone number that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "PhoneContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_MVO"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the contact"
              }
            },
            "description": "Describes a phone number that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "Producer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Producer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Producer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "RelatedPartyOrPartyRole": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole"
              }
            },
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity"
          }
        ]
      },
      "RelatedPartyOrPartyRole_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "required": [
              "role"
            ],
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_FVO"
              }
            },
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity"
          }
        ]
      },
      "RelatedPartyOrPartyRole_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedPartyOrPartyRole": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "required": [
              "role"
            ],
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_MVO"
              }
            },
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity"
          }
        ]
      },
      "Skill": {
        "type": "object",
        "properties": {
          "skillCode": {
            "type": "string",
            "description": "Code of the skill"
          },
          "skillName": {
            "type": "string",
            "description": "Name of the skill, such as Java language"
          },
          "evaluatedLevel": {
            "type": "string",
            "description": "Level of expertise in a skill evaluated for an individual"
          },
          "comment": {
            "type": "string",
            "description": "A free text comment linked to the evaluation done"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level)."
      },
      "SocialContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium"
          },
          {
            "type": "object",
            "properties": {
              "socialNetworkId": {
                "type": "string",
                "description": "Identifier as a member of a social network"
              }
            },
            "description": "Describes a social media identifier that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "SocialContactMedium_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_FVO"
          },
          {
            "type": "object",
            "properties": {
              "socialNetworkId": {
                "type": "string",
                "description": "Identifier as a member of a social network"
              }
            },
            "description": "Describes a social media identifier that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "SocialContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMedium_MVO"
          },
          {
            "type": "object",
            "properties": {
              "socialNetworkId": {
                "type": "string",
                "description": "Identifier as a member of a social network"
              }
            },
            "description": "Describes a social media identifier that could be used to contact a party (an individual or an organization)"
          }
        ]
      },
      "StringArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "A characteristic which value is an array of String(s)."
          }
        ]
      },
      "StringArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "A characteristic which value is an array of String(s)."
          }
        ]
      },
      "StringArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "A characteristic which value is an array of String(s)."
          }
        ]
      },
      "StringCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a String."
          }
        ]
      },
      "StringCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a String."
          }
        ]
      },
      "StringCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            },
            "description": "A characteristic which value is a String."
          }
        ]
      },
      "Supplier": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Supplier_FVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Supplier_MVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "TaxDefinition": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            },
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.)."
          }
        ]
      },
      "TaxDefinition_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            },
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.)."
          }
        ]
      },
      "TaxDefinition_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxDefinition": "#/components/schemas/TaxDefinition_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            },
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.)."
          }
        ]
      },
      "TaxExemptionCertificate": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%).",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition"
                }
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition."
          }
        ]
      },
      "TaxExemptionCertificate_FVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate_FVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%).",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition_FVO"
                }
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition."
          }
        ]
      },
      "TaxExemptionCertificate_MVO": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "TaxExemptionCertificate": "#/components/schemas/TaxExemptionCertificate_MVO"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%).",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition_MVO"
                }
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentOrDocumentRef"
              }
            },
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition."
          }
        ]
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "Error": {
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Error": "#/components/schemas/Error"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "required": [
              "code",
              "reason"
            ],
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ]
      },
      "JsonPatch": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        },
        "description": "A JSONPatch document as defined by RFC 6902"
      },
      "JsonPatchOperations": {
        "type": "array",
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      },
      "FloatArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "description": "A characteristic which value is an array of Float(s)."
          }
        ]
      },
      "FloatArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "description": "A characteristic which value is an array of Float(s)."
          }
        ]
      },
      "FloatArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "description": "A characteristic which value is an array of Float(s)."
          }
        ]
      }
    },
    "responses": {
      "202": {
        "description": "Accepted"
      },
      "204": {
        "description": "Deleted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "405": {
        "description": "Method Not allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "200IndividualArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Individual"
              }
            },
            "examples": {
              "Individual_list_example": {
                "$ref": "#/components/examples/Individual_list_example_response"
              }
            }
          }
        }
      },
      "200Individual_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Individual"
            },
            "examples": {
              "Individual_retrieve_example": {
                "$ref": "#/components/examples/Individual_retrieve_example_response"
              }
            }
          }
        }
      },
      "200Individual_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Individual"
            },
            "examples": {
              "Individual_update_example_Implicit_Merge": {
                "$ref": "#/components/examples/Individual_update_example_Implicit_Merge_response"
              }
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/Individual"
            },
            "examples": {
              "Individual_update_example_Patch_Merge": {
                "$ref": "#/components/examples/Individual_update_example_Patch_Merge_response"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Individual"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Individual"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "Individual_update_example_JSON_Patch": {
                "$ref": "#/components/examples/Individual_update_example_JSON_Patch_response"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Individual"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Individual"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "Individual_update_example_JSON_Patch_Query": {
                "$ref": "#/components/examples/Individual_update_example_JSON_Patch_Query_response"
              }
            }
          }
        }
      },
      "201Individual": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Individual"
            },
            "examples": {
              "Individual_create_example": {
                "$ref": "#/components/examples/Individual_create_example_response"
              }
            }
          }
        }
      },
      "200OrganizationArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Organization"
              }
            },
            "examples": {
              "Organization_list_example": {
                "$ref": "#/components/examples/Organization_list_example_response"
              }
            }
          }
        }
      },
      "200Organization_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            },
            "examples": {
              "Organization_retrieve_example": {
                "$ref": "#/components/examples/Organization_retrieve_example_response"
              }
            }
          }
        }
      },
      "200Organization_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            },
            "examples": {
              "Organization_update_example_Patch_Merge": {
                "$ref": "#/components/examples/Organization_update_example_Patch_Merge_response"
              },
              "Organization_update_example_Implicit_Merge": {
                "$ref": "#/components/examples/Organization_update_example_Implicit_Merge_response"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Organization"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "Organization_update_example_JSON_Patch": {
                "$ref": "#/components/examples/Organization_update_example_JSON_Patch_response"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Organization"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            },
            "examples": {
              "Organization_update_example_JSON_Patch_Query": {
                "$ref": "#/components/examples/Organization_update_example_JSON_Patch_Query_response"
              }
            }
          }
        }
      },
      "201Organization": {
        "description": "OK/Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            },
            "examples": {
              "Organization_create_example": {
                "$ref": "#/components/examples/Organization_create_example_response"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "Id": {
        "name": "id",
        "in": "path",
        "description": "Identifier of the Resource",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "Comma-separated properties to be provided in response",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "description": "Requested index for start of resources to be provided in response",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Requested number of resources to be provided in response",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "examples": {
      "Individual_list_example_response": {
        "description": "Here is an example of a response for retrieving multiple Individuals.",
        "value": [
          {
            "id": "42",
            "href": "https://serverRoot/tmf-api/party/v5/individual/42",
            "@type": "Individual",
            "@baseType": "Party",
            "givenName": "Jane",
            "familyName": "Lamborgizzia"
          },
          {
            "id": "52",
            "href": "https://serverRoot/tmf-api/party/v5/individual/52",
            "@type": "Individual",
            "@baseType": "Party",
            "givenName": "Paul",
            "familyName": "Newman"
          }
        ]
      },
      "Individual_retrieve_example_response": {
        "description": "Here is an example of a response for retrieving a specific Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "gender": "female",
          "countryOfBirth": "United States",
          "nationality": "American",
          "maritalStatus": "married",
          "birthDate": "1967-09-26T05:00:00.246Z",
          "givenName": "Jane",
          "preferredGivenName": "Lamborgizzia",
          "familyName": "Lamborgizzia",
          "legalName": "Smith",
          "middleName": "JL",
          "fullName": "Jane Smith ep Lamborgizzia",
          "formattedName": "Jane Smith ep Lamborgizzia",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://facebook.com/17263635",
              "externalIdentifierType": "facebookId",
              "@type": "ExternalIdentifier"
            },
            {
              "name": "http://google.com/17263635",
              "externalIdentifierType": "googleId",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "hobby",
              "value": [
                "Modern Jazz",
                "Cinema"
              ],
              "valueType": "array",
              "@type": "StringArrayCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameIndividual",
              "givenName": "Jane",
              "familyName": "Smith",
              "validFor": {
                "startDateTime": "1967-09-26T00:00:00.246Z",
                "endDateTime": "2015-06-15T00:00:00.246Z"
              }
            }
          ],
          "individualIdentification": [
            {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "id": "6662326757667",
                "href": "https://serverRoot/tmf-api/document/v5/attachment/6662326757667",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "98765432345",
              "issuingJurisdiction": "USA",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "id": "5565734535",
                "href": "https://serverRoot/tmf-api/document/v5/attachment/5565734535",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-566655.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-566655.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref123",
              "ratingScore": 680,
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "employer",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "128",
                "href": "https://serverRoot/tmf-api/party/v5/organization/128",
                "name": "Coffee Do Brazil Fair Trade Marketing Department",
                "@type": "PartyRef",
                "@referredType": "Organization"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@gmail.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower - 10th Floor"
            }
          ],
          "disability": [
            {
              "disabilityCode": "BLD",
              "disabilityName": "Blind",
              "validFor": {
                "startDateTime": "1967-09-26T07:49:25.246Z"
              }
            }
          ],
          "languageAbility": [
            {
              "languageCode": "FR",
              "languageName": "French",
              "isFavouriteLanguage": true,
              "writingProficiency": "advanced",
              "readingProficiency": "advanced",
              "speakingProficiency": "intermediate",
              "listeningProficiency": "intermediate",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "languageCode": "SP",
              "languageName": "Spanish",
              "isFavouriteLanguage": false,
              "writingProficiency": "scholar",
              "readingProficiency": "scholar",
              "speakingProficiency": "scholar",
              "listeningProficiency": "scholar",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "skill": [
            {
              "skillCode": "SK001",
              "skillName": "marketing",
              "evaluatedLevel": "Advanced",
              "comment": "Ten years experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "skillCode": "SK002",
              "skillName": "Project Management",
              "evaluatedLevel": "newbie",
              "comment": "First work experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ]
        }
      },
      "Organization_list_example_response": {
        "description": "Here is an example of a response for retrieving multiple Organizations.",
        "value": [
          {
            "id": "128",
            "href": "https://serverRoot/tmf-api/party/v5/organization/128",
            "@type": "Organization",
            "@baseType": "Party",
            "name": "Coffee Do Brazil Fair Trade"
          },
          {
            "id": "1882",
            "href": "https://serverRoot/tmf-api/party/v5/organization/1882",
            "@type": "Organization",
            "@baseType": "Party",
            "name": "Joe's Pizza"
          }
        ]
      },
      "Organization_retrieve_example_response": {
        "description": "Here is an example of a response for retrieving a specific Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "isLegalEntity": true,
          "isHeadOffice": true,
          "organizationType": "company",
          "existsDuring": {
            "startDateTime": "2015-10-22T08:31:52.026Z"
          },
          "name": "Coffee Do Brazil",
          "tradingName": "Coffee Do Brazil Fair Trade",
          "nameType": "inc",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://coffeedobrazil.com",
              "externalIdentifierType": "internetSite",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "number of employees",
              "value": 125,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            },
            {
              "name": "market segment",
              "value": "Food wholesale",
              "valueType": "string",
              "@type": "StringCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameOrganization",
              "nameType": "inc",
              "tradingName": "General Coffee",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.026Z",
                "endDateTime": "2017-10-22T08:31:52.026Z"
              }
            }
          ],
          "organizationIdentification": [
            {
              "@type": "OrganizationIdentification",
              "identificationType": "commercialRegistration",
              "identificationId": "12345678",
              "issuingAuthority": "US Government",
              "issuingDate": "2015-10-22T08:31:52.028Z",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "RegistrationCertificate421.pdf",
                "description": "Scanned copy of the registration certificate",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/421/RegistrationCertificate421.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "9875755432345",
              "issuingJurisdiction": "USA",
              "reason": "Voluntary Body",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-233322.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-233322.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref456",
              "ratingScore": 400,
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "director",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "54",
                "href": "https://serverRoot/tmf-api/party/v5/individual/54",
                "name": "Carlos Mafalda",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            },
            {
              "role": "employee",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "42",
                "href": "https://serverRoot/tmf-api/party/v5/individual/42",
                "name": "Jane Lamborgizzia",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@coffeedobrazil.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower 10th Floor"
            }
          ],
          "organizationParentRelationship": {
            "@type": "OrganizationParentRelationship",
            "relationshipType": "juridical",
            "organization": {
              "@type": "OrganizationRef",
              "id": "800",
              "href": "https://serverRoot/tmf-api/party/v5/organization/800"
            }
          },
          "organizationChildRelationship": [
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "149",
                "href": "https://serverRoot/tmf-api/party/v5/organization/149"
              }
            },
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "150",
                "href": "https://serverRoot/tmf-api/party/v5/organization/150"
              }
            }
          ]
        }
      },
      "Individual_create_example_request": {
        "description": "Here is an example of a request for creating an Individual.",
        "value": {
          "@type": "Individual",
          "@baseType": "Party",
          "givenName": "Jane",
          "familyName": "Lamborgizzia"
        }
      },
      "Individual_create_example_response": {
        "description": "Here is an example of a response for creating an Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "givenName": "Jane",
          "familyName": "Lamborgizzia",
          "status": "initialized"
        }
      },
      "Organization_create_example_request": {
        "description": "Here is an example of a request for creating an Organization.",
        "value": {
          "@type": "Organization",
          "@baseType": "Party",
          "name": "Coffee Do Brazil"
        }
      },
      "Organization_create_example_response": {
        "description": "Here is an example of a response for creating an Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "name": "Coffee Do Brazil",
          "status": "initialized"
        }
      },
      "Individual_update_example_Patch_Merge_request": {
        "description": "Here is an example of a request for updating an Individual with patch merge",
        "value": {
          "@type": "Individual",
          "maritalStatus": "divorced"
        }
      },
      "Individual_update_example_Patch_Merge_response": {
        "description": "Here is an example of a response for updating an Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "gender": "female",
          "countryOfBirth": "United States",
          "nationality": "American",
          "maritalStatus": "divorced",
          "birthDate": "1967-09-26T05:00:00.246Z",
          "givenName": "Jane",
          "preferredGivenName": "Lamborgizzia",
          "familyName": "Lamborgizzia",
          "legalName": "Smith",
          "middleName": "JL",
          "fullName": "Jane Smith ep Lamborgizzia",
          "formattedName": "Jane Smith ep Lamborgizzia",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://facebook.com/17263635",
              "externalIdentifierType": "facebookId",
              "@type": "ExternalIdentifier"
            },
            {
              "name": "http://google.com/17263635",
              "externalIdentifierType": "googleId",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "hobby",
              "value": [
                "Modern Jazz",
                "Cinema"
              ],
              "valueType": "array",
              "@type": "StringArrayCharacteristic"
            },
            {
              "name": "childrenNumber",
              "value": 1,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameIndividual",
              "givenName": "Jane",
              "familyName": "Smith",
              "validFor": {
                "startDateTime": "1967-09-26T00:00:00.246Z",
                "endDateTime": "2015-06-15T00:00:00.246Z"
              }
            }
          ],
          "individualIdentification": [
            {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "98765432345",
              "issuingJurisdiction": "USA",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-566655.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-566655.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref123",
              "ratingScore": 680,
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "employer",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "128",
                "href": "https://serverRoot/tmf-api/party/v5/organization/128",
                "name": "Coffee Do Brazil Fair Trade Marketing Department",
                "@type": "PartyRef",
                "@referredType": "Organization"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@gmail.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower - 10th Floor"
            }
          ],
          "disability": [
            {
              "disabilityCode": "BLD",
              "disabilityName": "Blind",
              "validFor": {
                "startDateTime": "1967-09-26T07:49:25.246Z"
              }
            }
          ],
          "languageAbility": [
            {
              "languageCode": "FR",
              "languageName": "French",
              "isFavouriteLanguage": true,
              "writingProficiency": "advanced",
              "readingProficiency": "advanced",
              "speakingProficiency": "intermediate",
              "listeningProficiency": "intermediate",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "languageCode": "SP",
              "languageName": "Spanish",
              "isFavouriteLanguage": false,
              "writingProficiency": "scholar",
              "readingProficiency": "scholar",
              "speakingProficiency": "scholar",
              "listeningProficiency": "scholar",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "skill": [
            {
              "skillCode": "SK001",
              "skillName": "marketing",
              "evaluatedLevel": "Advanced",
              "comment": "Ten years experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "skillCode": "SK002",
              "skillName": "Project Management",
              "evaluatedLevel": "newbie",
              "comment": "First work experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ]
        }
      },
      "Individual_update_example_Implicit_Merge_request": {
        "description": "Here is an example of a request for updating an Individual with patch merge",
        "value": {
          "@type": "Individual",
          "maritalStatus": "divorced"
        }
      },
      "Individual_update_example_Implicit_Merge_response": {
        "description": "Here is an example of a response for updating an Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "gender": "female",
          "countryOfBirth": "United States",
          "nationality": "American",
          "maritalStatus": "divorced",
          "birthDate": "1967-09-26T05:00:00.246Z",
          "givenName": "Jane",
          "preferredGivenName": "Lamborgizzia",
          "familyName": "Lamborgizzia",
          "legalName": "Smith",
          "middleName": "JL",
          "fullName": "Jane Smith ep Lamborgizzia",
          "formattedName": "Jane Smith ep Lamborgizzia",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://facebook.com/17263635",
              "externalIdentifierType": "facebookId",
              "@type": "ExternalIdentifier"
            },
            {
              "name": "http://google.com/17263635",
              "externalIdentifierType": "googleId",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "hobby",
              "value": [
                "Modern Jazz",
                "Cinema"
              ],
              "valueType": "array",
              "@type": "StringArrayCharacteristic"
            },
            {
              "name": "childrenNumber",
              "value": 1,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameIndividual",
              "givenName": "Jane",
              "familyName": "Smith",
              "validFor": {
                "startDateTime": "1967-09-26T00:00:00.246Z",
                "endDateTime": "2015-06-15T00:00:00.246Z"
              }
            }
          ],
          "individualIdentification": [
            {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "98765432345",
              "issuingJurisdiction": "USA",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-566655.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-566655.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref123",
              "ratingScore": 680,
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "employer",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "128",
                "href": "https://serverRoot/tmf-api/party/v5/organization/128",
                "name": "Coffee Do Brazil Fair Trade Marketing Department",
                "@type": "PartyRef",
                "@referredType": "Organization"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@gmail.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower - 10th Floor"
            }
          ],
          "disability": [
            {
              "disabilityCode": "BLD",
              "disabilityName": "Blind",
              "validFor": {
                "startDateTime": "1967-09-26T07:49:25.246Z"
              }
            }
          ],
          "languageAbility": [
            {
              "languageCode": "FR",
              "languageName": "French",
              "isFavouriteLanguage": true,
              "writingProficiency": "advanced",
              "readingProficiency": "advanced",
              "speakingProficiency": "intermediate",
              "listeningProficiency": "intermediate",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "languageCode": "SP",
              "languageName": "Spanish",
              "isFavouriteLanguage": false,
              "writingProficiency": "scholar",
              "readingProficiency": "scholar",
              "speakingProficiency": "scholar",
              "listeningProficiency": "scholar",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "skill": [
            {
              "skillCode": "SK001",
              "skillName": "marketing",
              "evaluatedLevel": "Advanced",
              "comment": "Ten years experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "skillCode": "SK002",
              "skillName": "Project Management",
              "evaluatedLevel": "newbie",
              "comment": "First work experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ]
        }
      },
      "Individual_update_example_JSON_Patch_request": {
        "description": "Here is an example of a request for updating an Individual with JSON Patch",
        "value": [
          {
            "op": "add",
            "path": "/individualIdentification/-",
            "value": {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          }
        ]
      },
      "Individual_update_example_JSON_Patch_response": {
        "description": "Here is an example of a response for updating an Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "gender": "female",
          "countryOfBirth": "United States",
          "nationality": "American",
          "maritalStatus": "married",
          "birthDate": "1967-09-26T05:00:00.246Z",
          "givenName": "Jane",
          "preferredGivenName": "Lamborgizzia",
          "familyName": "Lamborgizzia",
          "legalName": "Smith",
          "middleName": "JL",
          "fullName": "Jane Smith ep Lamborgizzia",
          "formattedName": "Jane Smith ep Lamborgizzia",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://facebook.com/17263635",
              "externalIdentifierType": "facebookId",
              "@type": "ExternalIdentifier"
            },
            {
              "name": "http://google.com/17263635",
              "externalIdentifierType": "googleId",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "hobby",
              "value": [
                "Modern Jazz",
                "Cinema"
              ],
              "valueType": "array",
              "@type": "StringArrayCharacteristic"
            },
            {
              "name": "childrenNumber",
              "value": 1,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameIndividual",
              "givenName": "Jane",
              "familyName": "Smith",
              "validFor": {
                "startDateTime": "1967-09-26T00:00:00.246Z",
                "endDateTime": "2015-06-15T00:00:00.246Z"
              }
            }
          ],
          "individualIdentification": [
            {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "98765432345",
              "issuingJurisdiction": "USA",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-566655.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-566655.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref123",
              "ratingScore": 680,
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "employer",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "128",
                "href": "https://serverRoot/tmf-api/party/v5/organization/128",
                "name": "Coffee Do Brazil Fair Trade Marketing Department",
                "@type": "PartyRef",
                "@referredType": "Organization"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@gmail.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower - 10th Floor"
            }
          ],
          "disability": [
            {
              "disabilityCode": "BLD",
              "disabilityName": "Blind",
              "validFor": {
                "startDateTime": "1967-09-26T07:49:25.246Z"
              }
            }
          ],
          "languageAbility": [
            {
              "languageCode": "FR",
              "languageName": "French",
              "isFavouriteLanguage": true,
              "writingProficiency": "advanced",
              "readingProficiency": "advanced",
              "speakingProficiency": "intermediate",
              "listeningProficiency": "intermediate",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "languageCode": "SP",
              "languageName": "Spanish",
              "isFavouriteLanguage": false,
              "writingProficiency": "scholar",
              "readingProficiency": "scholar",
              "speakingProficiency": "scholar",
              "listeningProficiency": "scholar",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "skill": [
            {
              "skillCode": "SK001",
              "skillName": "marketing",
              "evaluatedLevel": "Advanced",
              "comment": "Ten years experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "skillCode": "SK002",
              "skillName": "Project Management",
              "evaluatedLevel": "newbie",
              "comment": "First work experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ]
        }
      },
      "Individual_update_example_JSON_Patch_Query_request": {
        "description": "Here is an example of a request for updating an Individual with JSON Patch",
        "value": [
          {
            "op": "replace",
            "path": "/partyCharacteristic/value?/partyCharacteristic/name=childrenNumber",
            "value": 2
          }
        ]
      },
      "Individual_update_example_JSON_Patch_Query_response": {
        "description": "Here is an example of a response for updating an Individual.",
        "value": {
          "id": "42",
          "href": "https://serverRoot/tmf-api/party/v5/individual/42",
          "@type": "Individual",
          "@baseType": "Party",
          "gender": "female",
          "countryOfBirth": "United States",
          "nationality": "American",
          "maritalStatus": "married",
          "birthDate": "1967-09-26T05:00:00.246Z",
          "givenName": "Jane",
          "preferredGivenName": "Lamborgizzia",
          "familyName": "Lamborgizzia",
          "legalName": "Smith",
          "middleName": "JL",
          "fullName": "Jane Smith ep Lamborgizzia",
          "formattedName": "Jane Smith ep Lamborgizzia",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://facebook.com/17263635",
              "externalIdentifierType": "facebookId",
              "@type": "ExternalIdentifier"
            },
            {
              "name": "http://google.com/17263635",
              "externalIdentifierType": "googleId",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "hobby",
              "value": [
                "Modern Jazz",
                "Cinema"
              ],
              "valueType": "array",
              "@type": "StringArrayCharacteristic"
            },
            {
              "name": "childrenNumber",
              "value": 2,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameIndividual",
              "givenName": "Jane",
              "familyName": "Smith",
              "validFor": {
                "startDateTime": "1967-09-26T00:00:00.246Z",
                "endDateTime": "2015-06-15T00:00:00.246Z"
              }
            }
          ],
          "individualIdentification": [
            {
              "@type": "IndividualIdentification",
              "identificationType": "passport",
              "identificationId": "51DD1234",
              "issuingAuthority": "US Government",
              "issuingDate": "2017-10-22T07:49:25.246Z",
              "validFor": {
                "startDateTime": "2017-10-22T07:49:25.246Z",
                "endDateTime": "2027-10-21T07:49:25.246Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "passportCopy",
                "name": "PassportCopy321.pdf",
                "description": "Scanned copy of the passport",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/321/PassportCopy321.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "98765432345",
              "issuingJurisdiction": "USA",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-566655.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-566655.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref123",
              "ratingScore": 680,
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "employer",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "128",
                "href": "https://serverRoot/tmf-api/party/v5/organization/128",
                "name": "Coffee Do Brazil Fair Trade Marketing Department",
                "@type": "PartyRef",
                "@referredType": "Organization"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@gmail.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2017-03-15T07:49:25.246Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower - 10th Floor"
            }
          ],
          "disability": [
            {
              "disabilityCode": "BLD",
              "disabilityName": "Blind",
              "validFor": {
                "startDateTime": "1967-09-26T07:49:25.246Z"
              }
            }
          ],
          "languageAbility": [
            {
              "languageCode": "FR",
              "languageName": "French",
              "isFavouriteLanguage": true,
              "writingProficiency": "advanced",
              "readingProficiency": "advanced",
              "speakingProficiency": "intermediate",
              "listeningProficiency": "intermediate",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "languageCode": "SP",
              "languageName": "Spanish",
              "isFavouriteLanguage": false,
              "writingProficiency": "scholar",
              "readingProficiency": "scholar",
              "speakingProficiency": "scholar",
              "listeningProficiency": "scholar",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ],
          "skill": [
            {
              "skillCode": "SK001",
              "skillName": "marketing",
              "evaluatedLevel": "Advanced",
              "comment": "Ten years experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            },
            {
              "skillCode": "SK002",
              "skillName": "Project Management",
              "evaluatedLevel": "newbie",
              "comment": "First work experience",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              }
            }
          ]
        }
      },
      "Organization_update_example_Patch_Merge_request": {
        "description": "Here is an example of a request for updating an Organization with patch merge",
        "value": {
          "@type": "Organization",
          "isHeadOffice": false
        }
      },
      "Organization_update_example_Patch_Merge_response": {
        "description": "Here is an example of a response for updating an Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "isLegalEntity": true,
          "isHeadOffice": false,
          "organizationType": "company",
          "existsDuring": {
            "startDateTime": "2015-10-22T08:31:52.026Z"
          },
          "name": "Coffee Do Brazil",
          "tradingName": "Coffee Do Brazil Fair Trade",
          "nameType": "inc",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://coffeedobrazil.com",
              "externalIdentifierType": "internetSite",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "number of employees",
              "value": 125,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            },
            {
              "name": "market segment",
              "value": "Food wholesale",
              "valueType": "string",
              "@type": "StringCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameOrganization",
              "nameType": "inc",
              "tradingName": "General Coffee",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.026Z",
                "endDateTime": "2017-10-22T08:31:52.026Z"
              }
            }
          ],
          "organizationIdentification": [
            {
              "@type": "OrganizationIdentification",
              "identificationType": "commercialRegistration",
              "identificationId": "12345678",
              "issuingAuthority": "US Government",
              "issuingDate": "2015-10-22T08:31:52.028Z",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "RegistrationCertificate421.pdf",
                "description": "Scanned copy of the registration certificate",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/421/RegistrationCertificate421.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "9875755432345",
              "issuingJurisdiction": "USA",
              "reason": "Voluntary Body",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-233322.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-233322.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref456",
              "ratingScore": 400,
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "director",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "54",
                "href": "https://serverRoot/tmf-api/party/v5/individual/54",
                "name": "Carlos Mafalda",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            },
            {
              "role": "employee",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "42",
                "href": "https://serverRoot/tmf-api/party/v5/individual/42",
                "name": "Jane Lamborgizzia",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@coffeedobrazil.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower 10th Floor"
            }
          ],
          "organizationParentRelationship": {
            "@type": "OrganizationParentRelationship",
            "relationshipType": "juridical",
            "organization": {
              "@type": "OrganizationRef",
              "id": "800",
              "href": "https://serverRoot/tmf-api/party/v5/organization/800"
            }
          },
          "organizationChildRelationship": [
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "149",
                "href": "https://serverRoot/tmf-api/party/v5/organization/149"
              }
            },
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "150",
                "href": "https://serverRoot/tmf-api/party/v5/organization/150"
              }
            }
          ]
        }
      },
      "Organization_update_example_Implicit_Merge_request": {
        "description": "Here is an example of a request for updating an Organization with patch merge",
        "value": {
          "@type": "Organization",
          "isHeadOffice": false
        }
      },
      "Organization_update_example_Implicit_Merge_response": {
        "description": "Here is an example of a response for updating an Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "isLegalEntity": true,
          "isHeadOffice": false,
          "organizationType": "company",
          "existsDuring": {
            "startDateTime": "2015-10-22T08:31:52.026Z"
          },
          "name": "Coffee Do Brazil",
          "tradingName": "Coffee Do Brazil Fair Trade",
          "nameType": "inc",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://coffeedobrazil.com",
              "externalIdentifierType": "internetSite",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "number of employees",
              "value": 125,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            },
            {
              "name": "market segment",
              "value": "Food wholesale",
              "valueType": "string",
              "@type": "StringCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameOrganization",
              "nameType": "inc",
              "tradingName": "General Coffee",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.026Z",
                "endDateTime": "2017-10-22T08:31:52.026Z"
              }
            }
          ],
          "organizationIdentification": [
            {
              "@type": "OrganizationIdentification",
              "identificationType": "commercialRegistration",
              "identificationId": "12345678",
              "issuingAuthority": "US Government",
              "issuingDate": "2015-10-22T08:31:52.028Z",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "RegistrationCertificate421.pdf",
                "description": "Scanned copy of the registration certificate",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/421/RegistrationCertificate421.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "9875755432345",
              "issuingJurisdiction": "USA",
              "reason": "Voluntary Body",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-233322.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-233322.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref456",
              "ratingScore": 400,
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "director",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "54",
                "href": "https://serverRoot/tmf-api/party/v5/individual/54",
                "name": "Carlos Mafalda",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            },
            {
              "role": "employee",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "42",
                "href": "https://serverRoot/tmf-api/party/v5/individual/42",
                "name": "Jane Lamborgizzia",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@coffeedobrazil.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower 10th Floor"
            }
          ],
          "organizationParentRelationship": {
            "@type": "OrganizationParentRelationship",
            "relationshipType": "juridical",
            "organization": {
              "@type": "OrganizationRef",
              "id": "800",
              "href": "https://serverRoot/tmf-api/party/v5/organization/800"
            }
          },
          "organizationChildRelationship": [
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "149",
                "href": "https://serverRoot/tmf-api/party/v5/organization/149"
              }
            },
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "150",
                "href": "https://serverRoot/tmf-api/party/v5/organization/150"
              }
            }
          ]
        }
      },
      "Organization_update_example_JSON_Patch_request": {
        "description": "Here is an example of a request for updating an Organization with JSON Patch",
        "value": [
          {
            "op": "add",
            "path": "/organizationIdentification/-",
            "value": {
              "@type": "OrganizationIdentification",
              "identificationType": "Business Permit",
              "identificationId": "966935345345",
              "issuingAuthority": "State of New Jersey",
              "issuingDate": "2016-01-22T09:31:52.028Z",
              "validFor": {
                "startDateTime": "2016-01-22T09:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "BusinessPermitCertificate888441.pdf",
                "description": "Scanned copy of the business permit",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/888441/BusinessPermitCertificate888441.pdf"
              }
            }
          }
        ]
      },
      "Organization_update_example_JSON_Patch_response": {
        "description": "Here is an example of a response for updating an Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "isLegalEntity": true,
          "isHeadOffice": true,
          "organizationType": "company",
          "existsDuring": {
            "startDateTime": "2015-10-22T08:31:52.026Z"
          },
          "name": "Coffee Do Brazil",
          "tradingName": "Coffee Do Brazil Fair Trade",
          "nameType": "inc",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://coffeedobrazil.com",
              "externalIdentifierType": "internetSite",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "number of employees",
              "value": 125,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            },
            {
              "name": "market segment",
              "value": "Food wholesale",
              "valueType": "string",
              "@type": "StringCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameOrganization",
              "nameType": "inc",
              "tradingName": "General Coffee",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.026Z",
                "endDateTime": "2017-10-22T08:31:52.026Z"
              }
            }
          ],
          "organizationIdentification": [
            {
              "@type": "OrganizationIdentification",
              "identificationType": "commercialRegistration",
              "identificationId": "12345678",
              "issuingAuthority": "US Government",
              "issuingDate": "2015-10-22T08:31:52.028Z",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "RegistrationCertificate421.pdf",
                "description": "Scanned copy of the registration certificate",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/421/RegistrationCertificate421.pdf"
              }
            },
            {
              "identificationType": "Business Permit",
              "identificationId": "966935345345",
              "issuingAuthority": "State of New Jersey",
              "issuingDate": "2016-01-22T09:31:52.028Z",
              "validFor": {
                "startDateTime": "2016-01-22T09:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "BusinessPermitCertificate888441.pdf",
                "description": "Scanned copy of the business permit",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/888441/BusinessPermitCertificate888441.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "9875755432345",
              "issuingJurisdiction": "USA",
              "reason": "Voluntary Body",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-233322.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-233322.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref456",
              "ratingScore": 400,
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "director",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "54",
                "href": "https://serverRoot/tmf-api/party/v5/individual/54",
                "name": "Carlos Mafalda",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            },
            {
              "role": "employee",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "42",
                "href": "https://serverRoot/tmf-api/party/v5/individual/42",
                "name": "Jane Lamborgizzia",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@coffeedobrazil.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower 10th Floor"
            }
          ],
          "organizationParentRelationship": {
            "@type": "OrganizationParentRelationship",
            "relationshipType": "juridical",
            "organization": {
              "@type": "OrganizationRef",
              "id": "800",
              "href": "https://serverRoot/tmf-api/party/v5/organization/800"
            }
          },
          "organizationChildRelationship": [
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "149",
                "href": "https://serverRoot/tmf-api/party/v5/organization/149"
              }
            },
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "150",
                "href": "https://serverRoot/tmf-api/party/v5/organization/150"
              }
            }
          ]
        }
      },
      "Organization_update_example_JSON_Patch_Query_request": {
        "description": "Here is an example of a request for updating an Organization with JSON Patch",
        "value": [
          {
            "op": "replace",
            "path": "/partyCharacteristic/value?/partyCharacteristic/name=market segment",
            "value": "Food retail"
          }
        ]
      },
      "Organization_update_example_JSON_Patch_Query_response": {
        "description": "Here is an example of a response for updating an Organization.",
        "value": {
          "id": "128",
          "href": "https://serverRoot/tmf-api/party/v5/organization/128",
          "@type": "Organization",
          "@baseType": "Party",
          "isLegalEntity": true,
          "isHeadOffice": true,
          "organizationType": "company",
          "existsDuring": {
            "startDateTime": "2015-10-22T08:31:52.026Z"
          },
          "name": "Coffee Do Brazil",
          "tradingName": "Coffee Do Brazil Fair Trade",
          "nameType": "inc",
          "status": "validated",
          "externalReference": [
            {
              "name": "http://coffeedobrazil.com",
              "externalIdentifierType": "internetSite",
              "@type": "ExternalIdentifier"
            }
          ],
          "partyCharacteristic": [
            {
              "name": "number of employees",
              "value": 125,
              "valueType": "number",
              "@type": "IntegerCharacteristic"
            },
            {
              "name": "market segment",
              "value": "Food retail",
              "valueType": "string",
              "@type": "StringCharacteristic"
            }
          ],
          "otherName": [
            {
              "@type": "OtherNameOrganization",
              "nameType": "inc",
              "tradingName": "General Coffee",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.026Z",
                "endDateTime": "2017-10-22T08:31:52.026Z"
              }
            }
          ],
          "organizationIdentification": [
            {
              "@type": "OrganizationIdentification",
              "identificationType": "commercialRegistration",
              "identificationId": "12345678",
              "issuingAuthority": "US Government",
              "issuingDate": "2015-10-22T08:31:52.028Z",
              "validFor": {
                "startDateTime": "2015-10-22T08:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "RegistrationCertificate421.pdf",
                "description": "Scanned copy of the registration certificate",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/421/RegistrationCertificate421.pdf"
              }
            },
            {
              "identificationType": "Business Permit",
              "identificationId": "966935345345",
              "issuingAuthority": "State of New Jersey",
              "issuingDate": "2016-01-22T09:31:52.028Z",
              "validFor": {
                "startDateTime": "2016-01-22T09:31:52.028Z"
              },
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "documentCopy",
                "name": "BusinessPermitCertificate888441.pdf",
                "description": "Scanned copy of the business permit",
                "mimeType": "application/pdf",
                "url": "http://DocumentManager/888441/BusinessPermitCertificate888441.pdf"
              }
            }
          ],
          "taxExemptionCertificate": [
            {
              "@type": "TaxExemptionCertificate",
              "id": "1",
              "validFor": {
                "startDateTime": "2018-10-22T07:49:25.246Z"
              },
              "certificateNumber": "9875755432345",
              "issuingJurisdiction": "USA",
              "reason": "Voluntary Body",
              "taxDefinition": [
                {
                  "@type": "TaxDefinitionRef",
                  "id": "96",
                  "name": "Value Added Tax",
                  "taxType": "federalVat"
                }
              ],
              "attachment": {
                "@type": "Attachment",
                "attachmentType": "taxExemptionCertificate",
                "name": "TaxExemptionCertificate-233322.pdf",
                "description": "Electronic version of the tax exemption certificate",
                "mimeType": "application/pdf",
                "url": "https://mycsp.com:8080/DocumentManager/666/TaxExemptionCertificate-233322.pdf"
              }
            }
          ],
          "creditRating": [
            {
              "@type": "CreditRating",
              "creditAgencyName": "Experian",
              "creditAgencyType": "externalAgency",
              "ratingReference": "ref456",
              "ratingScore": 400,
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              }
            }
          ],
          "relatedParty": [
            {
              "role": "director",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "54",
                "href": "https://serverRoot/tmf-api/party/v5/individual/54",
                "name": "Carlos Mafalda",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            },
            {
              "role": "employee",
              "@type": "RelatedPartyRefOrPartyRoleRef",
              "partyOrPartyRole": {
                "id": "42",
                "href": "https://serverRoot/tmf-api/party/v5/individual/42",
                "name": "Jane Lamborgizzia",
                "@type": "PartyRef",
                "@referredType": "Individual"
              }
            }
          ],
          "contactMedium": [
            {
              "preferred": true,
              "mediumType": "email",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "EmailContactMedium",
              "emailAddress": "jane.lamborgizzia@coffeedobrazil.com"
            },
            {
              "preferred": false,
              "mediumType": "postalAddress",
              "validFor": {
                "startDateTime": "2018-10-22T08:31:52.028Z"
              },
              "@type": "GeographicAddressContactMedium",
              "city": "Morristown",
              "country": "USA",
              "postCode": "07960",
              "stateOrProvince": "New Jersey",
              "street1": "240 Headquarters Plazza",
              "street2": "East Tower 10th Floor"
            }
          ],
          "organizationParentRelationship": {
            "@type": "OrganizationParentRelationship",
            "relationshipType": "juridical",
            "organization": {
              "@type": "OrganizationRef",
              "id": "800",
              "href": "https://serverRoot/tmf-api/party/v5/organization/800"
            }
          },
          "organizationChildRelationship": [
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "149",
                "href": "https://serverRoot/tmf-api/party/v5/organization/149"
              }
            },
            {
              "@type": "OrganizationChildRelationship",
              "relationshipType": "juridical",
              "organization": {
                "@type": "OrganizationRef",
                "id": "150",
                "href": "https://serverRoot/tmf-api/party/v5/organization/150"
              }
            }
          ]
        }
      }
    },
    "requestBodies": {
      "Individual_FVO": {
        "description": "The Individual to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Individual_FVO"
            },
            "examples": {
              "Individual_create_example": {
                "$ref": "#/components/examples/Individual_create_example_request"
              }
            }
          }
        },
        "required": true
      },
      "Individual_MVO": {
        "description": "The Individual to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Individual_MVO"
            },
            "examples": {
              "Individual_update_example_Implicit_Merge": {
                "$ref": "#/components/examples/Individual_update_example_Implicit_Merge_request"
              }
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/Individual_MVO"
            },
            "examples": {
              "Individual_update_example_Patch_Merge": {
                "$ref": "#/components/examples/Individual_update_example_Patch_Merge_request"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "Individual_update_example_JSON_Patch": {
                "$ref": "#/components/examples/Individual_update_example_JSON_Patch_request"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "Individual_update_example_JSON_Patch_Query": {
                "$ref": "#/components/examples/Individual_update_example_JSON_Patch_Query_request"
              }
            }
          }
        },
        "required": true
      },
      "Organization_FVO": {
        "description": "The Organization to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization_FVO"
            },
            "examples": {
              "Organization_create_example": {
                "$ref": "#/components/examples/Organization_create_example_request"
              }
            }
          }
        },
        "required": true
      },
      "Organization_MVO": {
        "description": "The Organization to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/Organization_MVO"
            },
            "examples": {
              "Organization_update_example_Patch_Merge": {
                "$ref": "#/components/examples/Organization_update_example_Patch_Merge_request"
              },
              "Organization_update_example_Implicit_Merge": {
                "$ref": "#/components/examples/Organization_update_example_Implicit_Merge_request"
              }
            }
          },
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "Organization_update_example_JSON_Patch": {
                "$ref": "#/components/examples/Organization_update_example_JSON_Patch_request"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchOperations"
            },
            "examples": {
              "Organization_update_example_JSON_Patch_Query": {
                "$ref": "#/components/examples/Organization_update_example_JSON_Patch_Query_request"
              }
            }
          }
        },
        "required": true
      }
    },
    "headers": {
      "X-Total-Count": {
        "description": "Total number of items matching criteria",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "integer"
        }
      },
      "X-Result-Count": {
        "description": "Actual number of items returned in the response body",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": { }
  }
}