{
    "openapi": "3.0.1",
    "tags": [
        {
            "name": "keyIndicator",
            "description": "Key Indicator API"
        }
    ],
    "paths": {
        "/keyIndicator": {
            "get": {
                "tags": ["keyIndicator"],
                "summary": "List or find KeyIndicator objects",
                "description": "This operation retrieves KeyIndicator entities. Attribute selection enabled for all first level attributes.",
                "operationId": "listKeyIndicator",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to be provided in response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Requested index for start of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Requested number of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/KeyIndicator"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["keyIndicator"],
                "summary": "Creates a KeyIndicator",
                "description": "This operation creates a KeyIndicator entity.",
                "operationId": "createKeyIndicator",
                "requestBody": {
                    "description": "The KeyIndicator to be created",
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyIndicator_Create"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyIndicator"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/keyIndicator/{id}": {
            "get": {
                "tags": ["keyIndicator"],
                "summary": "Retrieves a KeyIndicator by ID",
                "description": "This operation retrieves a KeyIndicator entity. Attribute selection is enabled for all first level attributes.",
                "operationId": "retrieveKeyIndicator",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "description": "Identifier of the Resource"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to be provided in response",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyIndicator"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["keyIndicator"],
                "summary": "Deletes a KeyIndicator",
                "description": "This operation deletes a KeyIndicator entity.",
                "operationId": "deleteKeyIndicator",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "description": "Identifier of the Resource"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["keyIndicator"],
                "summary": "Updates partially a KeyIndicator",
                "description": "This operation updates partially a KeyIndicator entity.",
                "operationId": "patchKeyIndicator",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "description": "Identifier of the Resource"
                    }
                ],
                "requestBody": {
                    "description": "The KeyIndicator to be updated",
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyIndicator_Update"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyIndicator"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },

    "components": {
        "schemas": {
            "ServiceLevelObjective": {
                "type": "object",
                "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances associated with the parameters.",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "The hyperlink reference",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier"
                    },
                    "conformancePeriod": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "conformanceTarget": {
                        "type": "string",
                        "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
                    },
                    "graceTimes": {
                        "type": "string",
                        "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service level objectives."
                    },
                    "thresholdTarget": {
                        "type": "string",
                        "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
                    },
                    "tolerancePeriod": {
                        "$ref": "#/components/schemas/TimeInterval"
                    },
                    "toleranceTarget": {
                        "type": "string",
                        "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "keyIndicator": {
                        "$ref": "#/components/schemas/KeyIndicator"
                    },
                    "consequence": {
                        "type": "array",
                        "description": "A list of consequences for this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                        }
                    },
                    "threshold": {
                        "type": "array",
                        "description": "A list of thresholds that applies to this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold"
                        },
                        "minItems": 1
                    },
                    "applicability": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicableTimePeriod"
                        },
                        "description": "The SLO applicability in terms of timing."
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class extensible name."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    }
                }
            },
            "ServiceLevelObjective_Create": {
                "type": "object",
                "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances associated with the parameters.",
                "required": ["conformanceTarget", "keyIndicator"],
                "properties": {
                    "conformancePeriod": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "conformanceTarget": {
                        "type": "string",
                        "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
                    },
                    "graceTimes": {
                        "type": "string",
                        "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service level objectives."
                    },
                    "thresholdTarget": {
                        "type": "string",
                        "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
                    },
                    "tolerancePeriod": {
                        "$ref": "#/components/schemas/TimeInterval"
                    },
                    "toleranceTarget": {
                        "type": "string",
                        "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "keyIndicator": {
                        "$ref": "#/components/schemas/KeyIndicator"
                    },
                    "consequence": {
                        "type": "array",
                        "description": "A list of consequences for this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                        }
                    },
                    "threshold": {
                        "type": "array",
                        "description": "A list of thresholds that applies to this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold"
                        },
                        "minItems": 1
                    },
                    "applicability": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicableTimePeriod"
                        },
                        "description": "The SLO applicability in terms of timing."
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    }
                }
            },
            "ServiceLevelObjective_Update": {
                "type": "object",
                "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances associated with the parameters.",
                "properties": {
                    "conformancePeriod": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "conformanceTarget": {
                        "type": "string",
                        "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
                    },
                    "graceTimes": {
                        "type": "string",
                        "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service level objectives."
                    },
                    "thresholdTarget": {
                        "type": "string",
                        "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
                    },
                    "tolerancePeriod": {
                        "$ref": "#/components/schemas/TimeInterval"
                    },
                    "toleranceTarget": {
                        "type": "string",
                        "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
                    },
                    "keyIndicator": {
                        "$ref": "#/components/schemas/KeyIndicator"
                    },
                    "consequence": {
                        "type": "array",
                        "description": "A list of consequences for this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                        }
                    },
                    "threshold": {
                        "type": "array",
                        "description": "A list of Thresholds that applies to this objective.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelObjectiveThreshold"
                        },
                        "minItems": 1
                    },
                    "applicability": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicableTimePeriod"
                        },
                        "description": "The SLO applicability in terms of timing."
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    }
                }
            },
            "KeyIndicator": {
                "type": "object",
                "description": "KeyIndicators are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "The hyperlink reference.",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the key indicator."
                    },
                    "category": {
                        "type": "string",
                        "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent."
                    },
                    "isBundled": {
                        "type": "boolean",
                        "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)."
                    },
                    "transformationAlgorithmOfKQI": {
                        "type": "string",
                        "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI."
                    },
                    "indicatorType": {
                        "type": "string",
                        "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI).",
                        "enum": ["KQI", "KPI"]
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "keyIndicatorRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyIndicatorRelationship"
                        },
                        "description": "A list of key indicator relationships related to this object."
                    },
                    "relatedEntity": {
                        "type": "array",
                        "description": "A list of entities related to this parameter.",
                        "items": {
                            "$ref": "#/components/schemas/RelatedEntity"
                        }
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    }
                }
            },
            "KeyIndicator_Create": {
                "type": "object",
                "description": "KeyIndicator are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the key indicator"
                    },
                    "category": {
                        "type": "string",
                        "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent"
                    },
                    "isBundled": {
                        "type": "boolean",
                        "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)"
                    },
                    "transformationAlgorithmOfKQI": {
                        "type": "string",
                        "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
                    },
                    "indicatorType": {
                        "type": "string",
                        "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI)",
                        "enum": ["KQI", "KPI"]
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "keyIndicatorRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyIndicatorRelationship"
                        },
                        "description": "A list of key indicator relationships related to this object"
                    },
                    "relatedEntity": {
                        "type": "array",
                        "description": "A list of entities related to this parameter",
                        "items": {
                            "$ref": "#/components/schemas/RelatedEntity"
                        }
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    }
                }
            },
            "KeyIndicator_Update": {
                "type": "object",
                "description": "KeyIndicator are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the key indicator."
                    },
                    "category": {
                        "type": "string",
                        "description": "A string that specifies whether the key indicator is technology specific, service specific, or technology/service independent"
                    },
                    "isBundled": {
                        "type": "boolean",
                        "description": "A boolean that specifies whether the key indicator represents a single key indicator (false) or a key indicator that represents an aggregation (true)"
                    },
                    "transformationAlgorithmOfKQI": {
                        "type": "string",
                        "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
                    },
                    "indicatorType": {
                        "type": "string",
                        "description": "Type of Key Indicator are Key Quality Indicator (KQI) or Key Performance Indicator (KPI)",
                        "enum": ["KQI", "KPI"]
                    },
                    "keyIndicatorRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyIndicatorRelationship"
                        },
                        "description": "A list of key indicator relationships related to this object"
                    },
                    "relatedEntity": {
                        "type": "array",
                        "description": "A list of entities related to this parameter",
                        "items": {
                            "$ref": "#/components/schemas/RelatedEntity"
                        }
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    }
                }
            },
            "KeyIndicatorRelationship": {
                "type": "object",
                "description": "A uni-directionmal relationship from this entity to a target entity instance.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string"
                    },
                    "relationshipType": {
                        "type": "string",
                        "description": "Type of relationship such as \"contains\", \"required\", ..."
                    },
                    "role": {
                        "type": "string",
                        "description": "The association role for this entity."
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "associationSpec": {
                        "$ref": "#/components/schemas/EntityRef"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    },
                    "@referredType": {
                        "type": "string"
                    },
                    "@type": {
                        "type": "string"
                    }
                },
                "required": ["relationshipType", "associationSpec", "@referredType"]
            },
            "ApplicableTimePeriod": {
                "type": "object",
                "description": "The period of time for which Capacity or CapacityDemand applies.",
                "properties": {
                    "dayOfWeek": {
                        "type": "string",
                        "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
                    },
                    "fromToDateTime": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "rangeInterval": {
                        "type": "string",
                        "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    },
                    "@type": {
                        "type": "string"
                    }
                }
            },
            "ServiceLevelObjectiveThreshold": {
                "type": "object",
                "description": "A threshold base entity containing threshold rules.This entity is mandatory.",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the threshold."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier."
                    },
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which a threshold is known and distinguished from other thresholds."
                    },
                    "thresholdType": {
                        "type": "string",
                        "description": "The Threshold Type may be either LogicDefinition or PreDefined.",
                        "enum": ["LogicDefinition", "PreDefined"]
                    },
                    "consequence": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLevelSpecConsequence"
                        },
                        "description": "A threshold crossing or a threshold ceased to be crossing results in a consequence."
                    },
                    "thresholdCondition": {
                        "type": "string",
                        "enum": ["Raise", "Clear"],
                        "description": "A concrete threshold may have two possible values: \\\"Raise\\\" - a threshold was crossed or \\\"Clear\\\" - a threshold ceased crossing."
                    },
                    "applicability": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicableTimePeriod"
                        },
                        "description": "The threshold applicability in terms of timing."
                    },
                    "upperBound": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "lowerBound": {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    },
                    "@type": {
                        "type": "string"
                    }
                }
            },
            "Quantity": {
                "type": "object",
                "description": "An amount in a given unit.",
                "properties": {
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "default": 1,
                        "description": "Numeric value in a given unit."
                    },
                    "units": {
                        "type": "string",
                        "description": "Unit"
                    }
                }
            },
            "ServiceLevelSpecConsequence": {
                "type": "object",
                "description": "A target/threshold crossing or a target/threshold ceased to be crossing results in a consequence.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which a Consequence is known and distinguished from other measurements."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of a Consequence."
                    },
                    "prescribedAction": {
                        "type": "string",
                        "description": "Contains information on a prescribed action that should be applied."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    },
                    "@type": {
                        "type": "string"
                    }
                }
            },
            "TimeInterval": {
                "required": ["startTime", "endTime"],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "pattern": "^([0]?[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]",
                        "description": "Start of the time interval in hours, minutes and seconds.",
                        "format": "time",
                        "example": "00:00:00"
                    },
                    "endTime": {
                        "type": "string",
                        "pattern": "^([0]?[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]",
                        "description": "End of the time interval in hours, minutes and seconds.",
                        "format": "time",
                        "example": "23:59:59"
                    }
                },
                "description": "An interval of time from start- to endTime. If a time zone is required, it must be determined from the context."
            }
        }
    }
}
