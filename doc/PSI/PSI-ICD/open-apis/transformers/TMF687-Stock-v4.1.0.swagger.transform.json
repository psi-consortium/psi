{
    "@jdt.replace": [
        {
            "@jdt.path": "$.servers[*].url",
            "@jdt.value": "/psi-api/stock/v1/"
        },

        {
            "@jdt.path": "$.components.schemas.ChannelRef.required",
            "@jdt.value": ["id"]
        },
        {
            "@jdt.path": "$.components.schemas.MarketSegmentRef.required",
            "@jdt.value": ["id"]
        },
        {
            "@jdt.path": "$.components.schemas.CheckProductStockItem.properties['availabilityResult']",
            "@jdt.value": {
                "$ref": "#/components/schemas/AvailabilityResultType",
                "description": "The result of the availability check (available, notAvailable, alternate)."
            }
        }
    ],
    "@jdt.remove": [
        {
            "@jdt.path": "$.tags[?(@.name!='checkProductStock')]"
        },

        {
            "@jdt.path": "$.paths['/listener/productStockCreateEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/productStockAttributeValueChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/productStockStateChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/productStockBatchEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/productStockDeleteEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/adjustProductStockCreateEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/adjustProductStockAttributeValueChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/adjustProductStockStateChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/adjustProductStockBatchEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/checkProductStockCreateEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/checkProductStockAttributeValueChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/checkProductStockStateChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/checkProductStockBatchEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/reserveProductStockCreateEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/reserveProductStockAttributeValueChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/reserveProductStockStateChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/reserveProductStockBatchEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/queryProductStockCreateEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/queryProductStockAttributeValueChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/queryProductStockStateChangeEvent']"
        },
        {
            "@jdt.path": "$.paths['/listener/queryProductStockBatchEvent']"
        },

        {
            "@jdt.path": "$.paths['/productStock', '/productStock/{id}']"
        },
        {
            "@jdt.path": "$.paths['/checkProductStock'].get"
        },
        {
            "@jdt.path": "$.paths['/adjustProductStock', '/adjustProductStock/{id}']"
        },
        {
            "@jdt.path": "$.paths['/reserveProductStock', '/reserveProductStock/{id}']"
        },
        {
            "@jdt.path": "$.paths['/queryProductStock', '/queryProductStock/{id}']"
        },
        {
            "@jdt.path": "$.paths['/hub', '/hub/{id}']"
        },

        {
            "@jdt.path": "$.components.schemas.Addressable"
        },
        {
            "@jdt.path": "$.components.schemas['AdjustProductStock', 'AdjustProductStock_Create', 'AdjustProductStockItem']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStock_Create', 'ProductStock_Update']"
        },
        {
            "@jdt.path": "$.components.schemas['QueryProductStock', 'QueryProductStock_Create']"
        },
        {
            "@jdt.path": "$.components.schemas['ReserveProductStock', 'ReserveProductStock_Create', 'ReserveProductStockItem']"
        },

        {
            "@jdt.path": "$.components.schemas.['Entity', 'EntityRef', 'RelatedEntity']"
        },
        {
            "@jdt.path": "$.components.schemas.Extensible"
        },

        {
            "@jdt.path": "$.components.schemas['EventSubscription', 'EventSubscriptionInput']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStockCreateEvent', 'ProductStockCreateEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStockAttributeValueChangeEvent', 'ProductStockAttributeValueChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStockStateChangeEvent', 'ProductStockStateChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStockBatchEvent', 'ProductStockBatchEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ProductStockDeleteEvent', 'ProductStockDeleteEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['AdjustProductStockCreateEvent', 'AdjustProductStockCreateEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['AdjustProductStockAttributeValueChangeEvent', 'AdjustProductStockAttributeValueChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['AdjustProductStockStateChangeEvent', 'AdjustProductStockStateChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['AdjustProductStockBatchEvent', 'AdjustProductStockBatchEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['CheckProductStockCreateEvent', 'CheckProductStockCreateEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['CheckProductStockAttributeValueChangeEvent', 'CheckProductStockAttributeValueChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['CheckProductStockStateChangeEvent', 'CheckProductStockStateChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['CheckProductStockBatchEvent', 'CheckProductStockBatchEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ReserveProductStockCreateEvent', 'ReserveProductStockCreateEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ReserveProductStockAttributeValueChangeEvent', 'ReserveProductStockAttributeValueChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ReserveProductStockStateChangeEvent', 'ReserveProductStockStateChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['ReserveProductStockBatchEvent', 'ReserveProductStockBatchEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas.*.properties.randomAtt"
        },
        {
            "@jdt.path": "$.components.schemas['QueryProductStockCreateEvent', 'QueryProductStockCreateEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['QueryProductStockAttributeValueChangeEvent', 'QueryProductStockAttributeValueChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['QueryProductStockStateChangeEvent', 'QueryProductStockStateChangeEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas['QueryProductStockBatchEvent', 'QueryProductStockBatchEventPayload']"
        },
        {
            "@jdt.path": "$.components.schemas.Price.properties['id', 'href']"
        },
        {
            "@jdt.path": "$.components.schemas.PriceAlteration.properties['id', 'href']"
        },
        {
            "@jdt.path": "$.components.schemas.ProductPrice.properties['id', 'href']"
        },
        {
            "@jdt.path": "$.components.schemas.ProductRelationship.properties['id', 'href']"
        },
        {
            "@jdt.path": "$.components.schemas.ProductTerm.properties['id', 'href']"
        },
        {
            "@jdt.path": "$.components.schemas.RelatedProductOrderItem.properties['id', 'href']"
        },

        {
            "@jdt.path": "$.components.schemas.Quantity.required"
        },
        {
            "@jdt.path": "$.components.schemas.RelatedPlaceRefOrValue.required[?(@ == '@referredType')]"
        },
        {
            "@jdt.path": "$.components.schemas.PlaceRefOrValue"
        },

        {
            "@jdt.path": "$.components.schemas.CheckProductStock_Create.properties['requestedAvailabilityDate']"
        },
        {
            "@jdt.path": "$.components.schemas.CheckProductStock.properties['requestedAvailabilityDate']"
        },

        {
            "@jdt.path": "$.components.schemas.CheckProductStock_Create.properties['state', 'creationDate', 'completedCheckProductStockDate']"
        }
    ],

    "@jdt.merge": [
        {
            "@jdt.path": "$.tags[?(@.name=='checkProductStock')]",
            "@jdt.value": {
                "description": "Stock Check API"
            }
        },

        {
            "@jdt.path": "$.components.schemas.*.properties.href",
            "@jdt.value": {
                "format": "uri"
            }
        },
        {
            "@jdt.path": "$.components.schemas.Characteristic.properties",
            "@jdt.value": {
                "unitOfMeasure": {
                    "type": "string",
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                }
            }
        },
        {
            "@jdt.path": "$.components.schemas.ResourceRef.properties",
            "@jdt.value": {
                "value": {
                    "type": "string",
                    "description": "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)."
                }
            }
        },

        {
            "@jdt.path": "$.components.schemas.CheckProductStock_Create.properties",
            "@jdt.value": {
                "requestedAvailability": {
                    "$ref": "#/components/schemas/TimePeriod",
                    "description": "Period for which the product is to be booked, i.e. the stock has to be available."
                }
            }
        },
        {
            "@jdt.path": "$.components.schemas.CheckProductStock.properties",
            "@jdt.value": {
                "requestedAvailability": {
                    "$ref": "#/components/schemas/TimePeriod",
                    "description": "Period for which the product is to be booked, i.e. the stock has to be available."
                }
            }
        },
        {
            "@jdt.path": "$.components.schemas['AlternateProductStock','CheckProductStock','CheckProductStock_Create'].properties.['alternatePlace','place']",
            "@jdt.value": {
                "$ref": "#/components/schemas/PlaceRef"
            }
        },

        {
            "@jdt.path": "$.components.schemas",
            "@jdt.value": {
                "AvailabilityResultType": {
                    "type": "string",
                    "description": "Possible values of the availability result check for CheckProductStockItem.",
                    "enum": ["available", "notAvailable", "alternate"]
                }
            }
        }
    ]
}
