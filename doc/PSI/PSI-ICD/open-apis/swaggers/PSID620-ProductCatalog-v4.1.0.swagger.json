{
  "openapi": "3.0.1",
  "info": {
    "title": "Product Catalog Management",
    "description": "## TMF API Reference: TMF620 - Product Catalog Management\n\n### Release : 20.5 - March 2021\n\nProduct Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products. \n\n### Operations\nProduct Catalog API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity\n- Manage notification of events",
    "version": "4.1.0"
  },
  "servers": [
    {
      "url": "/psi-api/productCatalog/v1/"
    }
  ],
  "tags": [
    {
      "name": "productOffering",
      "description": "Product Offering API"
    },
    {
      "name": "productSpecification",
      "description": "Product Specification API"
    },
    {
      "name": "productTemplate",
      "description": "Product Template API"
    }
  ],
  "paths": {
    "/productOffering": {
      "get": {
        "tags": [
          "productOffering"
        ],
        "summary": "List or find ProductOffering objects",
        "description": "This operation list or find ProductOffering entities",
        "operationId": "listProductOffering",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductOffering"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productOffering"
        ],
        "summary": "Creates a ProductOffering",
        "description": "This operation creates a ProductOffering entity.",
        "operationId": "createProductOffering",
        "requestBody": {
          "description": "The ProductOffering to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductOffering_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOffering"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productOffering"
      }
    },
    "/productOffering/{id}": {
      "get": {
        "tags": [
          "productOffering"
        ],
        "summary": "Retrieves a ProductOffering by ID",
        "description": "This operation retrieves a ProductOffering entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveProductOffering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOffering"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productOffering"
        ],
        "summary": "Deletes a ProductOffering",
        "description": "This operation deletes a ProductOffering entity.",
        "operationId": "deleteProductOffering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "productOffering"
        ],
        "summary": "Updates partially a ProductOffering",
        "description": "This operation updates partially a ProductOffering entity.",
        "operationId": "patchProductOffering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ProductOffering to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductOffering_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOffering"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productOffering"
      }
    },
    "/productSpecification": {
      "get": {
        "tags": [
          "productSpecification"
        ],
        "summary": "List or find ProductSpecification objects",
        "description": "This operation list or find ProductSpecification entities",
        "operationId": "listProductSpecification",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Creates a ProductSpecification",
        "description": "This operation creates a ProductSpecification entity.",
        "operationId": "createProductSpecification",
        "requestBody": {
          "description": "The ProductSpecification to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productSpecification"
      }
    },
    "/productSpecification/{id}": {
      "get": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Retrieves a ProductSpecification by ID",
        "description": "This operation retrieves a ProductSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveProductSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Deletes a ProductSpecification",
        "description": "This operation deletes a ProductSpecification entity.",
        "operationId": "deleteProductSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Updates partially a ProductSpecification",
        "description": "This operation updates partially a ProductSpecification entity.",
        "operationId": "patchProductSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ProductSpecification to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productSpecification"
      }
    },
    "/productTemplate": {
      "get": {
        "tags": [
          "productTemplate"
        ],
        "summary": "List or find ProductTemplate objects",
        "description": "This operation lists or find ProductTemplate entities.",
        "operationId": "listProductTemplate",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productTemplate"
        ],
        "summary": "Creates a ProductTemplate",
        "description": "This operation creates a ProductTemplate entity.",
        "operationId": "createProductTemplate",
        "requestBody": {
          "description": "The ProductTemplate to be created.",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productTemplate"
      }
    },
    "/productTemplate/{id}": {
      "get": {
        "tags": [
          "productTemplate"
        ],
        "summary": "Retrieves a ProductTemplate by ID.",
        "description": "This operation retrieves a ProductTemplate entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveProductTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ProductTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productTemplate"
        ],
        "summary": "Deletes a ProductTemplate",
        "description": "This operation deletes a ProductTemplate entity.",
        "operationId": "deleteProductTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ProductTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "productTemplate"
        ],
        "summary": "Updates partially a ProductTemplate",
        "description": "This operation updates partially a ProductTemplate entity.",
        "operationId": "patchProductTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ProductTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ProductTemplate to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productTemplate"
      }
    }
  },
  "components": {
    "schemas": {
      "AgreementRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the agreement"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
      },
      "Any": {
        "type": "object"
      },
      "AttachmentOrDocumentRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this particular attachment",
            "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "href": {
            "type": "string",
            "description": "URI for this Attachment",
            "format": "uri",
            "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType": {
            "type": "string",
            "description": "Attachment type such as video, picture",
            "example": "video"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment",
            "example": "Photograph of the Product"
          },
          "mimeType": {
            "type": "string",
            "description": "Attachment mime type such as extension file for video, picture and document"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "url": {
            "type": "string",
            "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
            "format": "uri",
            "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Reference to an attachment or a document. A document comprises of multiple attachments, while a single attachment has uri, mimeType, size, etc."
      },
      "BundledProductOffering": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the BundledProductOffering"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the BundledProductOffering",
            "format": "uri"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the BundledProductOffering"
          },
          "bundledProductOfferingOption": {
            "$ref": "#/components/schemas/BundledProductOfferingOption"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering."
      },
      "BundledProductOfferingOption": {
        "type": "object",
        "properties": {
          "numberRelOfferDefault": {
            "type": "integer",
            "description": "Default number of produc offereings that should be procured as part of the related BundledProductOffering"
          },
          "numberRelOfferLowerLimit": {
            "type": "integer",
            "description": "lower limit for a product offering that can be procured as part of the related BundledProductOffering"
          },
          "numberRelOfferUpperLimit": {
            "type": "integer",
            "description": "upper limit for a product offering that can be procured as part of the related BundledProductOffering"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded"
      },
      "BundledProductSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product specification"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product specification",
            "format": "uri"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the product specification"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification."
      },
      "CategoryRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Category version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "The category for grouping recommendations"
      },
      "ChannelRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc.."
      },
      "CharacteristicValueSpecification": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
          },
          "rangeInterval": {
            "type": "string",
            "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
          },
          "regex": {
            "type": "string",
            "description": "A regular expression constraint for given value"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
          },
          "valueFrom": {
            "type": "integer",
            "description": "The low range value that a characteristic can take on"
          },
          "valueTo": {
            "type": "integer",
            "description": "The upper range value that a characteristic can take on"
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic."
      },
      "ConstraintRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "constraint version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
      },
      "Duration": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Time interval (number of seconds, minutes, hours, etc.)"
          },
          "units": {
            "type": "string",
            "description": "Unit of time (seconds, minutes, hours, etc.)"
          }
        },
        "description": "A time interval in a given unit of time"
      },
      "MarketSegmentRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the market segment"
          },
          "href": {
            "type": "string",
            "description": "Reference of the market segment",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the market segment"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "(Class) type of the referred market segment"
          }
        },
        "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth."
      },
      "Money": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          "value": {
            "type": "number",
            "description": "A positive floating point number",
            "format": "float"
          }
        },
        "description": "A base / value business entity used to represent money"
      },
      "POPAlteration": {
        "required": [
          "price",
          "priceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail the semantics of this order item price alteration"
          },
          "name": {
            "type": "string",
            "description": "Name given to this price alteration"
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price such as recurring, one time and usage."
          },
          "priority": {
            "type": "integer",
            "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "Could be month, week..."
          },
          "applicationDuration": {
            "$ref": "#/components/schemas/Duration"
          },
          "price": {
            "$ref": "#/components/schemas/ProductPriceValue"
          },
          "unitOfMeasure": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Is an amount, usually of money, that modifies the price charged for an order item."
      },
      "PlaceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered."
      },
      "ProductOffering": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the productOffering"
          },
          "href": {
            "type": "string",
            "description": "Reference of the ProductOffering",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of the productOffering"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          "isSellable": {
            "type": "boolean",
            "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the productOffering"
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing a complementary information on the value of the lifecycle status attribute."
          },
          "version": {
            "type": "string",
            "description": "ProductOffering version"
          },
          "agreement": {
            "type": "array",
            "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "items": {
              "$ref": "#/components/schemas/AgreementRef"
            }
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductOffering": {
            "type": "array",
            "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
            "items": {
              "$ref": "#/components/schemas/BundledProductOffering"
            }
          },
          "category": {
            "type": "array",
            "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
            "items": {
              "$ref": "#/components/schemas/CategoryRef"
            }
          },
          "channel": {
            "type": "array",
            "description": "The channel defines the channel for selling product offerings.",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "place": {
            "type": "array",
            "description": "Place defines the places where the products are sold or delivered.",
            "items": {
              "$ref": "#/components/schemas/PlaceRef"
            }
          },
          "prodSpecCharValueUse": {
            "type": "array",
            "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristicValueUse"
            }
          },
          "productOfferingPrice": {
            "type": "array",
            "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingPriceRefOrValue"
            }
          },
          "productOfferingRelationship": {
            "type": "array",
            "description": "A relationship between this product offering and other product offerings.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingRelationship"
            }
          },
          "productOfferingTerm": {
            "type": "array",
            "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingTerm"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "resourceCandidate": {
            "$ref": "#/components/schemas/ResourceCandidateRef"
          },
          "serviceCandidate": {
            "$ref": "#/components/schemas/ServiceCandidateRef"
          },
          "serviceLevelAgreement": {
            "$ref": "#/components/schemas/SLARef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "accessProbability": {
            "type": "integer",
            "description": "Probability that an order of this offering can be fulfilled (in %).",
            "minimum": 0.0,
            "maximum": 1.0,
            "default": 1.0,
            "example": 0.75
          },
          "bundledGroupProductOffering": {
            "type": "array",
            "description": "A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.",
            "items": {
              "$ref": "#/components/schemas/BundledGroupProductOffering"
            }
          }
        },
        "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
      },
      "ProductOffering_Create": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the productOffering"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          "isSellable": {
            "type": "boolean",
            "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the productOffering"
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing a complementary information on the value of the lifecycle status attribute."
          },
          "version": {
            "type": "string",
            "description": "ProductOffering version"
          },
          "agreement": {
            "type": "array",
            "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "items": {
              "$ref": "#/components/schemas/AgreementRef"
            }
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductOffering": {
            "type": "array",
            "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
            "items": {
              "$ref": "#/components/schemas/BundledProductOffering"
            }
          },
          "category": {
            "type": "array",
            "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
            "items": {
              "$ref": "#/components/schemas/CategoryRef"
            }
          },
          "channel": {
            "type": "array",
            "description": "The channel defines the channel for selling product offerings.",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "place": {
            "type": "array",
            "description": "Place defines the places where the products are sold or delivered.",
            "items": {
              "$ref": "#/components/schemas/PlaceRef"
            }
          },
          "prodSpecCharValueUse": {
            "type": "array",
            "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristicValueUse"
            }
          },
          "productOfferingPrice": {
            "type": "array",
            "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingPriceRefOrValue"
            }
          },
          "productOfferingRelationship": {
            "type": "array",
            "description": "A relationship between this product offering and other product offerings.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingRelationship"
            }
          },
          "productOfferingTerm": {
            "type": "array",
            "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingTerm"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "resourceCandidate": {
            "$ref": "#/components/schemas/ResourceCandidateRef"
          },
          "serviceCandidate": {
            "$ref": "#/components/schemas/ServiceCandidateRef"
          },
          "serviceLevelAgreement": {
            "$ref": "#/components/schemas/SLARef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "accessProbability": {
            "type": "integer",
            "description": "Probability that an order of this offering can be fulfilled (in %).",
            "minimum": 0.0,
            "maximum": 1.0,
            "default": 1.0,
            "example": 0.75
          },
          "bundledGroupProductOffering": {
            "type": "array",
            "description": "A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.",
            "items": {
              "$ref": "#/components/schemas/BundledGroupProductOffering"
            }
          }
        },
        "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href"
      },
      "ProductOffering_Update": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the productOffering"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          "isSellable": {
            "type": "boolean",
            "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the productOffering"
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing a complementary information on the value of the lifecycle status attribute."
          },
          "version": {
            "type": "string",
            "description": "ProductOffering version"
          },
          "agreement": {
            "type": "array",
            "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "items": {
              "$ref": "#/components/schemas/AgreementRef"
            }
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductOffering": {
            "type": "array",
            "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
            "items": {
              "$ref": "#/components/schemas/BundledProductOffering"
            }
          },
          "category": {
            "type": "array",
            "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
            "items": {
              "$ref": "#/components/schemas/CategoryRef"
            }
          },
          "channel": {
            "type": "array",
            "description": "The channel defines the channel for selling product offerings.",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "place": {
            "type": "array",
            "description": "Place defines the places where the products are sold or delivered.",
            "items": {
              "$ref": "#/components/schemas/PlaceRef"
            }
          },
          "prodSpecCharValueUse": {
            "type": "array",
            "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristicValueUse"
            }
          },
          "productOfferingPrice": {
            "type": "array",
            "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingPriceRefOrValue"
            }
          },
          "productOfferingRelationship": {
            "type": "array",
            "description": "A relationship between this product offering and other product offerings.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingRelationship"
            }
          },
          "productOfferingTerm": {
            "type": "array",
            "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
            "items": {
              "$ref": "#/components/schemas/ProductOfferingTerm"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "resourceCandidate": {
            "$ref": "#/components/schemas/ResourceCandidateRef"
          },
          "serviceCandidate": {
            "$ref": "#/components/schemas/ServiceCandidateRef"
          },
          "serviceLevelAgreement": {
            "$ref": "#/components/schemas/SLARef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "accessProbability": {
            "type": "integer",
            "description": "Probability that an order of this offering can be fulfilled (in %).",
            "minimum": 0.0,
            "maximum": 1.0,
            "default": 1.0,
            "example": 0.75
          },
          "bundledGroupProductOffering": {
            "type": "array",
            "description": "A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.",
            "items": {
              "$ref": "#/components/schemas/BundledGroupProductOffering"
            }
          }
        },
        "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href,lastUpdate,@type,@baseType"
      },
      "ProductOfferingPriceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased"
      },
      "ProductOfferingPriceRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of the productOfferingPrice"
          },
          "lastUpdate": {
            "type": "string",
            "description": "the last update time of this ProductOfferingPrice",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "the lifecycle status of this ProductOfferingPrice"
          },
          "name": {
            "type": "string",
            "description": "Name of the productOfferingPrice"
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price charge, such as recurring, penalty, One time fee and so forth."
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "The period type to repeat the application of the price\nCould be month, week..."
          },
          "recurringChargePeriodLength": {
            "type": "integer",
            "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
          },
          "version": {
            "type": "string",
            "description": "ProductOffering version"
          },
          "constraint": {
            "type": "array",
            "description": "The Constraint resource represents a policy/rule applied to ProductOfferingPrice.",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "price": {
            "$ref": "#/components/schemas/ProductPriceValue"
          },
          "priceAlteration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POPAlteration"
            }
          },
          "unitOfMeasure": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A new product offering price being created by value or a reference to an existing product offering price that alreasy created. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product offering price and not to this ReforValue structure"
      },
      "ProductOfferingRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
      },
      "ProductOfferingRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship between product offerings such as requires, exchangableTo, optionalFor"
          },
          "role": {
            "type": "string",
            "description": "The association role for the source product offering"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A relationship between two product Offerings."
      },
      "ProductOfferingTerm": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the productOfferingTerm"
          },
          "name": {
            "type": "string",
            "description": "Name of the productOfferingTerm"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods."
      },
      "ProductPriceValue": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "description": "Percentage to apply for ProdOfferPriceAlteration",
            "format": "float"
          },
          "taxCategory": {
            "type": "string",
            "description": "Tax category"
          },
          "taxRate": {
            "type": "number",
            "description": "Tax rate",
            "format": "float"
          },
          "dutyFreeAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "taxIncludedAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration."
      },
      "ProductSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product specification"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product specification",
            "format": "uri"
          },
          "brand": {
            "type": "string",
            "description": "The manufacturer or trademark of the specification"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail what the product specification is"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the product specification"
          },
          "productNumber": {
            "type": "string",
            "description": "An identification number assigned to uniquely identity the specification"
          },
          "version": {
            "type": "string",
            "description": "Product specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductSpecification": {
            "type": "array",
            "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/BundledProductSpecification"
            }
          },
          "productSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristic"
            }
          },
          "productSpecificationRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationRelationship"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "The ResourceSpecification is required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceSpecification": {
            "type": "array",
            "description": "ServiceSpecification(s) required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecificationRef"
            }
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
      },
      "ProductSpecification_Create": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "The manufacturer or trademark of the specification"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail what the product specification is"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the product specification"
          },
          "productNumber": {
            "type": "string",
            "description": "An identification number assigned to uniquely identity the specification"
          },
          "version": {
            "type": "string",
            "description": "Product specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductSpecification": {
            "type": "array",
            "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/BundledProductSpecification"
            }
          },
          "productSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristic"
            }
          },
          "productSpecificationRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationRelationship"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "The ResourceSpecification is required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceSpecification": {
            "type": "array",
            "description": "ServiceSpecification(s) required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecificationRef"
            }
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href"
      },
      "ProductSpecification_Update": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "The manufacturer or trademark of the specification"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail what the product specification is"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status"
          },
          "name": {
            "type": "string",
            "description": "Name of the product specification"
          },
          "productNumber": {
            "type": "string",
            "description": "An identification number assigned to uniquely identity the specification"
          },
          "version": {
            "type": "string",
            "description": "Product specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "bundledProductSpecification": {
            "type": "array",
            "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/BundledProductSpecification"
            }
          },
          "productSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristic"
            }
          },
          "productSpecificationRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationRelationship"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "The ResourceSpecification is required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceSpecification": {
            "type": "array",
            "description": "ServiceSpecification(s) required to realize a ProductSpecification.",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecificationRef"
            }
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          }
        },
        "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href,lastUpdate,@type,@baseType"
      },
      "ProductSpecificationCharacteristic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "productSpecCharRelationship": {
            "type": "array",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
            "items": {
              "$ref": "#/components/schemas/ProductSpecificationCharacteristicRelationship"
            }
          },
          "productSpecCharacteristicValue": {
            "type": "array",
            "description": "A ProductSpecificationCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ProductSpecificationCharacteristic object. The values of the attributes in the ProductSpecificationCharacteristicValue object describe the values of the attributes that a corresponding ProductSpecificationCharacteristic object can take on.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
      },
      "ProductSpecificationCharacteristicRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identifier of the associated product specification"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference to the target product specification",
            "format": "uri"
          },
          "charSpecSeq": {
            "type": "integer",
            "description": "The order in which a CharacteristicSpecification appears within another CharacteristicSpecification that defines a grouping of CharacteristicSpecifications.\n\nFor example, a grouping may represent the name of an individual. The given name is first, the middle name is second, and the last name is third."
          },
          "name": {
            "type": "string",
            "description": "Name of the target product specification characteristic"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecificationCharacteristics."
      },
      "ProductSpecificationCharacteristicValueUse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail what the productSpecificationCharacteristic is"
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "Name of the associated productSpecificationCharacteristic"
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "productSpecCharacteristicValue": {
            "type": "array",
            "description": "A number or text that can be assigned to a ProductSpecificationCharacteristic.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics."
      },
      "ProductSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Version of the product specification"
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
      },
      "ProductSpecificationRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications."
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Numeric value in a given unit",
            "format": "float",
            "default": 1.0
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        },
        "description": "An amount in a given unit"
      },
      "RelatedParty": {
        "required": [
          "@referredType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Party reference. A related party defines party or party role linked to a specific entity."
      },
      "ResourceCandidateRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "the version of resource candidate"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
      },
      "ResourceSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
      },
      "SLARef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of service level agreement"
          },
          "href": {
            "type": "string",
            "description": "Reference of the service level agreement"
          },
          "name": {
            "type": "string",
            "description": "Name of the service level agreement"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service."
      },
      "ServiceCandidateRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Version of the service candidate"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog."
      },
      "ServiceSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Service specification version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification."
      },
      "TargetProductSchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target product",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          }
        },
        "description": "The reference object to the schema and type of target product which is described by product specification"
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "Error": {
        "required": [
          "code",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "description": "URI of documentation describing the error.",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        },
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Geometry": {
        "type": "object",
        "description": "A GeoJson geometry.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Point": "#/components/schemas/Point",
            "Polygon": "#/components/schemas/Polygon"
          }
        },
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "Point2D": {
        "type": "array",
        "maxItems": 2,
        "minItems": 2,
        "items": {
          "type": "number"
        }
      },
      "Point": {
        "type": "object",
        "description": "A GeoJSon geometry.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Geometry"
          },
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/Point2D"
              }
            }
          }
        ]
      },
      "Polygon": {
        "type": "object",
        "description": "A GeoJSon geometry.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Geometry"
          },
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Point2D"
                  }
                }
              }
            }
          }
        ]
      },
      "BundledGroupProductOffering": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the BundledGroupProductOffering."
          },
          "href": {
            "type": "string",
            "description": "The unique reference of the BundledGroupProductOffering.",
            "format": "uri"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status."
          },
          "name": {
            "type": "string",
            "description": "The name of the BundledGroupProductOffering."
          },
          "bundledGroupProductOfferingOption": {
            "$ref": "#/components/schemas/BundledGroupProductOfferingOption"
          },
          "bundledGroupProductOffering": {
            "type": "array",
            "description": "A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.",
            "items": {
              "$ref": "#/components/schemas/BundledGroupProductOffering"
            }
          },
          "bundledProductOffering": {
            "type": "array",
            "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market.",
            "items": {
              "$ref": "#/components/schemas/BundledProductOffering"
            }
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships.",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name."
          }
        },
        "description": "Defines a group between a parent product offering and multiple child offerings, allowing (for example) choosing a minimum of 2 and a maximum of 6 offerings from within the list of child offerings. And optionally specifying offerings that would be selected by default. For example facilitate the choice of between 2 and 7 channel packs from a list, and cause certain items to be selected by default."
      },
      "BundledGroupProductOfferingOption": {
        "type": "object",
        "properties": {
          "numberRelOfferLowerLimit": {
            "type": "integer",
            "description": "The lower limit for offerings that can be procured as part of the related BundledGroupProductOffering."
          },
          "numberRelOfferUpperLimit": {
            "type": "integer",
            "description": "The upper limit for offerings that can be procured as part of the related BundledGroupProductOffering."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships.",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name."
          }
        },
        "description": "A set of numbers that specifies the lower and upper limits for a ProductOfferingGroup that can be procured as part of the related BundledGroupProductOffering. Values can range from 0 to unbounded"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}