{
  "openapi": "3.0.1",
  "info": {
    "title": "Service Catalog Management",
    "description": "## TMF API Reference: TMF633 - Service Catalog Management\n\n Version 4.0 \n\nThe Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services. \nService Catalog API performs the following operations on the resource :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events. .\n\nCopyright Â© TM Forum 2020. All Rights Reserved. ",
    "version": "4.0.0"
  },
  "servers": [
    {
      "url": "/psi-api/serviceCatalog/v1/"
    }
  ],
  "tags": [
    {
      "name": "serviceSpecification",
      "description": "Service Specification API"
    },
    {
      "name": "serviceTemplate",
      "description": "Service Template API"
    }
  ],
  "paths": {
    "/serviceSpecification": {
      "get": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "List or find ServiceSpecification objects",
        "description": "This operation list or find ServiceSpecification entities",
        "operationId": "listServiceSpecification",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Creates a ServiceSpecification",
        "description": "This operation creates a ServiceSpecification entity.",
        "operationId": "createServiceSpecification",
        "requestBody": {
          "description": "The ServiceSpecification to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "serviceSpecification"
      }
    },
    "/serviceSpecification/{id}": {
      "get": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Retrieves a ServiceSpecification by ID",
        "description": "This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Deletes a ServiceSpecification",
        "description": "This operation deletes a ServiceSpecification entity.",
        "operationId": "deleteServiceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Updates partially a ServiceSpecification",
        "description": "This operation updates partially a ServiceSpecification entity.",
        "operationId": "patchServiceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ServiceSpecification to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "serviceSpecification"
      }
    },
    "/serviceTemplate": {
      "get": {
        "operationId": "listServiceTemplate",
        "summary": "List or find ServiceTemplate objects",
        "description": "This operation lists or finds ServiceTemplate entities.",
        "tags": [
          "serviceTemplate"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The requested index for start of resources to be provided in response.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The requested number of resources to be provided in response.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "The actual number of items returned in the response body.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "The total number of items matching criteria.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createServiceTemplate",
        "summary": "Creates a ServiceTemplate",
        "description": "This operation creates a ServiceTemplate entity.",
        "tags": [
          "serviceTemplate"
        ],
        "requestBody": {
          "description": "The ServiceTemplate to be created.",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/serviceTemplate/{id}": {
      "get": {
        "operationId": "retrieveServiceTemplate",
        "summary": "Retrieves a ServiceTemplate by ID",
        "description": "This operation retrieves a ServiceTemplate entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "serviceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ServiceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchServiceTemplate",
        "summary": "Updates partially a ServiceTemplate",
        "description": "This operation updates partially a ServiceTemplate entity.",
        "tags": [
          "serviceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ServiceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ServiceTemplate to be updated.",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceTemplate",
        "summary": "Deletes a ServiceTemplate",
        "description": "This operation deletes a ServiceTemplate entity.",
        "tags": [
          "serviceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ServiceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Any": {
        "type": "object"
      },
      "AssociationSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "reference to an AssociationSpecification object"
      },
      "AttachmentOrDocumentRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this particular attachment",
            "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "href": {
            "type": "string",
            "description": "URI for this Attachment",
            "format": "uri",
            "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType": {
            "type": "string",
            "description": "Attachment type such as video, picture",
            "example": "video"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment",
            "example": "Photograph of the Product"
          },
          "mimeType": {
            "type": "string",
            "description": "Attachment mime type such as extension file for video, picture and document"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "url": {
            "type": "string",
            "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
            "format": "uri",
            "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Reference to an attachment or a document. A document comprises of multiple attachments, while a single attachment has uri, mimeType, size, etc."
      },
      "CharacteristicSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "charSpecRelationship": {
            "type": "array",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecificationRelationship"
            }
          },
          "characteristicValueSpecification": {
            "type": "array",
            "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "This class defines a characteristic specification."
      },
      "CharacteristicSpecificationRelationship": {
        "type": "object",
        "properties": {
          "characteristicSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the characteristic within the specification"
          },
          "name": {
            "type": "string",
            "description": "Name of the target characteristic within the specification"
          },
          "parentSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the parent specification containing the target characteristic",
            "format": "uri"
          },
          "parentSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the parent specification containing the target characteristic"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID."
      },
      "CharacteristicValueSpecification": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
          },
          "rangeInterval": {
            "type": "string",
            "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
          },
          "regex": {
            "type": "string",
            "description": "A regular expression constraint for given value"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
          },
          "valueFrom": {
            "type": "integer",
            "description": "The low range value that a characteristic can take on"
          },
          "valueTo": {
            "type": "integer",
            "description": "The upper range value that a characteristic can take on"
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic."
      },
      "ConstraintRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "constraint version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
      },
      "EntitySpecificationRelationship": {
        "required": [
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity specification"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/AssociationSpecificationRef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications."
      },
      "FeatureSpecificationRelationship": {
        "required": [
          "name",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the target feature specification."
          },
          "parentSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the parent specification containing the target feature",
            "format": "uri"
          },
          "parentSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the parent specification containing the target feature"
          },
          "relationshipType": {
            "type": "string",
            "description": "This is the type of the feature specification relationship."
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "description": "The hyperlink reference."
          }
        },
        "description": "Relationship between feature specifications"
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Numeric value in a given unit",
            "format": "float",
            "default": 1.0
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        },
        "description": "An amount in a given unit"
      },
      "RelatedParty": {
        "required": [
          "@referredType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Party reference. A related party defines a party or a party role linked to a specific entity."
      },
      "ResourceSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
      },
      "ServiceCandidateRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Version of the service candidate"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog."
      },
      "ServiceFeatureSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "isBundle": {
            "type": "boolean",
            "description": "A flag indicating if this is a feature group (true) or not (false)"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "A flag indicating if the feature is enabled (true) or not (false)"
          },
          "name": {
            "type": "string",
            "description": "Unique name given to the feature specification"
          },
          "version": {
            "type": "string",
            "description": "Version of the feature specification"
          },
          "constraint": {
            "type": "array",
            "description": "A list of feature constraints/rules",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "featureSpecCharacteristic": {
            "type": "array",
            "description": "This is a list of characteristics for a particular feature",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "featureSpecRelationship": {
            "type": "array",
            "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecificationRelationship"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Specification for service features"
      },
      "ServiceLevelSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications."
      },
      "ServiceSpecRelationship": {
        "required": [
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as dependency, substitution or exclusivity"
          },
          "role": {
            "type": "string",
            "description": "The association role for this service specification"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A dependency, substitution or exclusivity relationship between/among service specifications."
      },
      "ServiceSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of the specification"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of the specification",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to the specification"
          },
          "version": {
            "type": "string",
            "description": "specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "entitySpecRelationship": {
            "type": "array",
            "description": "Relationship to another specification",
            "items": {
              "$ref": "#/components/schemas/EntitySpecificationRelationship"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/ServiceFeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceLevelSpecification": {
            "type": "array",
            "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationRef"
            }
          },
          "serviceSpecRelationship": {
            "type": "array",
            "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecRelationship"
            }
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the entity can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetEntitySchema": {
            "$ref": "#/components/schemas/TargetEntitySchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "category": {
            "type": "string",
            "description": "Category of the target service like Telephony, InternetAccess, IP-Trunk and so on."
          }
        },
        "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics."
      },
      "ServiceSpecification_Create": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the specification"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of the specification",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to the specification"
          },
          "version": {
            "type": "string",
            "description": "specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "entitySpecRelationship": {
            "type": "array",
            "description": "Relationship to another specification",
            "items": {
              "$ref": "#/components/schemas/EntitySpecificationRelationship"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/ServiceFeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceLevelSpecification": {
            "type": "array",
            "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationRef"
            }
          },
          "serviceSpecRelationship": {
            "type": "array",
            "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecRelationship"
            }
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the entity can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetEntitySchema": {
            "$ref": "#/components/schemas/TargetEntitySchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "category": {
            "type": "string",
            "description": "Category of the target service like Telephony, InternetAccess, IP-Trunk and so on."
          }
        },
        "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href"
      },
      "ServiceSpecification_Update": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the specification"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to the specification"
          },
          "version": {
            "type": "string",
            "description": "specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "entitySpecRelationship": {
            "type": "array",
            "description": "Relationship to another specification",
            "items": {
              "$ref": "#/components/schemas/EntitySpecificationRelationship"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/ServiceFeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecification": {
            "type": "array",
            "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRef"
            }
          },
          "serviceLevelSpecification": {
            "type": "array",
            "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelSpecificationRef"
            }
          },
          "serviceSpecRelationship": {
            "type": "array",
            "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
            "items": {
              "$ref": "#/components/schemas/ServiceSpecRelationship"
            }
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the entity can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetEntitySchema": {
            "$ref": "#/components/schemas/TargetEntitySchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "category": {
            "type": "string",
            "description": "Category of the target service like Telephony, InternetAccess, IP-Trunk and so on."
          }
        },
        "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,lastUpdate"
      },
      "ServiceSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Service specification version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification."
      },
      "TargetEntitySchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target entity"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target entity"
          }
        },
        "description": "The reference object to the schema and type of target entity which is described by a specification"
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "Error": {
        "required": [
          "code",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "description": "URI of documentation describing the error.",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        },
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Geometry": {
        "type": "object",
        "description": "GeoJson geometry",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Point": "#/components/schemas/Point",
            "Polygon": "#/components/schemas/Polygon"
          }
        },
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "Point2D": {
        "type": "array",
        "maxItems": 2,
        "minItems": 2,
        "items": {
          "type": "number"
        }
      },
      "Point": {
        "type": "object",
        "description": "GeoJSon geometry",
        "allOf": [
          {
            "$ref": "#/components/schemas/Geometry"
          },
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/Point2D"
              }
            }
          }
        ]
      },
      "Polygon": {
        "type": "object",
        "description": "GeoJSon geometry",
        "allOf": [
          {
            "$ref": "#/components/schemas/Geometry"
          },
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Point2D"
                  }
                }
              }
            }
          }
        ]
      }
    }
  },
  "x-original-swagger-version": "2.0"
}