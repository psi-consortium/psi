{
  "openapi": "3.0.1",
  "info": {
    "title": "Resource Catalog Management",
    "description": "## TMF API Reference: TMF634 - Resource Catalog Management\n\n### December 2019\n\nResource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources. \n\n### Operations\nResource Catalog API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity\n- Manage notification of events",
    "version": "4.1.0"
  },
  "servers": [
    {
      "url": "/psi-api/resourceCatalog/v1/"
    }
  ],
  "tags": [
    {
      "name": "resourceSpecification",
      "description": "Resource Specification API"
    },
    {
      "name": "resourceTemplate",
      "description": "Resource Template API"
    }
  ],
  "paths": {
    "/resourceSpecification": {
      "get": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "List or find ResourceSpecification objects",
        "description": "This operation list or find ResourceSpecification entities",
        "operationId": "listResourceSpecification",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "Creates a ResourceSpecification",
        "description": "This operation creates a ResourceSpecification entity.",
        "operationId": "createResourceSpecification",
        "requestBody": {
          "description": "The ResourceSpecification to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ResourceSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "resourceSpecification"
      }
    },
    "/resourceSpecification/{id}": {
      "get": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "Retrieves a ResourceSpecification by ID",
        "description": "This operation retrieves a ResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "Deletes a ResourceSpecification",
        "description": "This operation deletes a ResourceSpecification entity.",
        "operationId": "deleteResourceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "Updates partially a ResourceSpecification",
        "description": "This operation updates partially a ResourceSpecification entity.",
        "operationId": "patchResourceSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ResourceSpecification to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ResourceSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "resourceSpecification"
      }
    },
    "/resourceTemplate": {
      "get": {
        "operationId": "listResourceTemplate",
        "summary": "List or find ResourceTemplate objects",
        "description": "This operation lists or finds ResourceTemplate entities.",
        "tags": [
          "resourceTemplate"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The requested index for start of resources to be provided in response.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The requested number of resources to be provided in response.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "The total number of items matching criteria.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createResourceTemplate",
        "summary": "Creates a ResourceTemplate",
        "description": "This operation creates a ResourceTemplate entity.",
        "tags": [
          "resourceTemplate"
        ],
        "requestBody": {
          "description": "The ResourceTemplate to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ResourceSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/resourceTemplate/{id}": {
      "get": {
        "operationId": "retrieveResourceTemplate",
        "summary": "Retrieves a ResourceTemplate by ID",
        "description": "This operation retrieves a ResourceTemplate entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "resourceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ResourceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchResourceTemplate",
        "summary": "Updates partially a ResourceTemplate",
        "description": "This operation updates partially a ResourceTemplate entity.",
        "tags": [
          "resourceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ResourceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ResourceTemplate to be updated.",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ResourceSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteResourceTemplate",
        "summary": "Deletes a ResourceTemplate",
        "description": "This operation deletes a ResourceTemplate entity.",
        "tags": [
          "resourceTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the ResourceTemplate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Any": {
        "type": "object"
      },
      "AttachmentOrDocumentRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this particular attachment",
            "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "href": {
            "type": "string",
            "description": "URI for this Attachment",
            "format": "uri",
            "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType": {
            "type": "string",
            "description": "Attachment type such as video, picture",
            "example": "video"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment",
            "example": "Photograph of the Product"
          },
          "mimeType": {
            "type": "string",
            "description": "Attachment mime type such as extension file for video, picture and document"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "url": {
            "type": "string",
            "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
            "format": "uri",
            "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Reference to an attachment or a document. A document comprises of multiple attachments, while a single attachment has uri, mimeType, size, etc."
      },
      "CharacteristicValueSpecification": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
          },
          "rangeInterval": {
            "type": "string",
            "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
          },
          "regex": {
            "type": "string",
            "description": "A regular expression constraint for given value"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
          },
          "valueFrom": {
            "type": "integer",
            "description": "The low range value that a characteristic can take on"
          },
          "valueTo": {
            "type": "integer",
            "description": "The upper range value that a characteristic can take on"
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic."
      },
      "ConstraintRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "constraint version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
      },
      "FeatureSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "isBundle": {
            "type": "boolean",
            "description": "A flag indicating if this is a feature group (true) or not (false)"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "A flag indicating if the feature is enabled (true) or not (false)"
          },
          "name": {
            "type": "string",
            "description": "Unique name given to the feature specification"
          },
          "version": {
            "type": "string",
            "description": "Version of the feature specification"
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of feature constraints",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "featureSpecCharacteristic": {
            "type": "array",
            "description": "This is a list of characteristics for a particular feature",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecificationCharacteristic"
            }
          },
          "featureSpecRelationship": {
            "type": "array",
            "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecificationRelationship"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Specification for resource, service or product features"
      },
      "FeatureSpecificationCharacteristic": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "featureSpecCharRelationship": {
            "type": "array",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecificationCharacteristicRelationship"
            }
          },
          "featureSpecCharacteristicValue": {
            "type": "array",
            "description": "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "Configuration feature characteristic specification."
      },
      "FeatureSpecificationCharacteristicRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "characteristicId": {
            "type": "string",
            "description": "Unique identifier of the characteristic within the the target feature specification"
          },
          "featureId": {
            "type": "string",
            "description": "Unique identifier of the target feature specification within the resource specification."
          },
          "name": {
            "type": "string",
            "description": "Name of the target characteristic"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "resourceSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the resource specification containing the target feature and feature characteristic",
            "format": "uri"
          },
          "resourceSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the resource specification containing the target feature and feature characteristic"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics."
      },
      "FeatureSpecificationRelationship": {
        "required": [
          "name",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "This is the name of the target feature specification."
          },
          "parentSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the parent specification containing the target feature",
            "format": "uri"
          },
          "parentSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the parent specification containing the target feature"
          },
          "relationshipType": {
            "type": "string",
            "description": "This is the type of the feature specification relationship."
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Relationship between feature specifications"
      },
      "LogicalResourceSpecification": {
        "type": "object",
        "properties": {},
        "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceSpecification"
          }
        ]
      },
      "PhysicalResourceSpecification": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
          },
          "part": {
            "type": "string",
            "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
          },
          "sku": {
            "type": "string",
            "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
          },
          "vendor": {
            "type": "string",
            "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
          }
        },
        "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceSpecification"
          }
        ]
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Numeric value in a given unit",
            "format": "float",
            "default": 1.0
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        },
        "description": "An amount in a given unit"
      },
      "RelatedParty": {
        "required": [
          "@referredType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Party reference. A related party defines a party or a party role linked to a specific entity."
      },
      "ResourceCandidateRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "the version of resource candidate"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
      },
      "ResourceSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this REST resource",
            "example": "6c088cf7f1bc"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference to this REST resource",
            "format": "uri",
            "example": "http://host/resourceSpecification/6c088cf7f1bc"
          },
          "category": {
            "type": "string",
            "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of the resource specification"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "resourceSpecRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRelationship"
            }
          },
          "targetResourceSchema": {
            "$ref": "#/components/schemas/TargetResourceSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ResourceSpecification_Create": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of the resource specification"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "resourceSpecRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRelationship"
            }
          },
          "targetResourceSchema": {
            "$ref": "#/components/schemas/TargetResourceSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "model": {
            "type": "string",
            "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
          },
          "part": {
            "type": "string",
            "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
          },
          "sku": {
            "type": "string",
            "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
          },
          "vendor": {
            "type": "string",
            "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href"
      },
      "ResourceSpecification_Update": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of the resource specification"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrDocumentRef"
            }
          },
          "featureSpecification": {
            "type": "array",
            "description": "A list of Features for this specification.",
            "items": {
              "$ref": "#/components/schemas/FeatureSpecification"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A related party defines party or party role linked to a specific entity.",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecCharacteristic": {
            "type": "array",
            "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "resourceSpecRelationship": {
            "type": "array",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationRelationship"
            }
          },
          "targetResourceSchema": {
            "$ref": "#/components/schemas/TargetResourceSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "model": {
            "type": "string",
            "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
          },
          "part": {
            "type": "string",
            "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
          },
          "sku": {
            "type": "string",
            "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
          },
          "vendor": {
            "type": "string",
            "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identifies different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href"
      },
      "ResourceSpecificationCharacteristic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "resourceSpecCharRelationship": {
            "type": "array",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationCharacteristicRelationship"
            }
          },
          "resourceSpecCharacteristicValue": {
            "type": "array",
            "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecificationCharacteristic object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding ResourceSpecificationCharacteristic object can take on.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and\nrelationships, which distinguish a resource specification from other resource specifications."
      },
      "ResourceSpecificationCharacteristicRelationship": {
        "type": "object",
        "properties": {
          "characteristicSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the characteristic within the specification"
          },
          "name": {
            "type": "string",
            "description": "Name of the target characteristic within the specification"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "resourceSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the resource specification containing the target characteristic",
            "format": "uri"
          },
          "resourceSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the resource specification containing the target characteristic"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among ResourceSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID."
      },
      "ResourceSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Resource Specification version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
      },
      "ResourceSpecificationRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of target ResourceSpecification"
          },
          "href": {
            "type": "string",
            "description": "Reference of the target ResourceSpecification",
            "format": "uri"
          },
          "defaultQuantity": {
            "type": "integer",
            "description": "The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more."
          },
          "maximumQuantity": {
            "type": "integer",
            "description": "The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards"
          },
          "minimumQuantity": {
            "type": "integer",
            "description": "The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card"
          },
          "name": {
            "type": "string",
            "description": "The name given to the target resource specification instance"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "role": {
            "type": "string",
            "description": "The association role for this resource specification"
          },
          "characteristic": {
            "type": "array",
            "description": "A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory",
            "items": {
              "$ref": "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
      },
      "TargetResourceSchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target resource",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target resource"
          }
        },
        "description": "The reference object to the schema and type of target resource which is described by resource specification"
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "Error": {
        "required": [
          "code",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "description": "URI of documentation describing the error.",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        },
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "GeoJson": {
        "type": "object",
        "description": "GeoJson",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Feature": "#/components/schemas/GeoJsonFeature",
            "FeatureCollection": "#/components/schemas/GeoJsonFeatureCollection"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Feature",
              "FeatureCollection"
            ],
            "description": "The GeoJson features type."
          }
        }
      },
      "GeoJsonFeatureCollection": {
        "type": "object",
        "description": "The GeoJSon FeatureCollection.",
        "required": [
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GeoJson"
          },
          {
            "type": "object",
            "properties": {
              "features": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeoJsonFeature"
                },
                "description": "This is a list of GeoJson Features."
              }
            }
          }
        ]
      },
      "GeoJsonFeature": {
        "type": "object",
        "description": "GeoJSon Feature",
        "required": [
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GeoJson"
          },
          {
            "type": "object",
            "properties": {
              "geometry": {
                "$ref": "#/components/schemas/Geometry",
                "description": "The geometry for the GeoJson Feature."
              },
              "properties": {
                "$ref": "#/components/schemas/Any",
                "description": "Generic properties are what make geometric objects a feature object."
              }
            }
          }
        ]
      },
      "Geometry": {
        "type": "object",
        "description": "A GeoJson geometry.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/LineString"
          },
          {
            "$ref": "#/components/schemas/MultiLineString"
          },
          {
            "$ref": "#/components/schemas/MultiPoint"
          },
          {
            "$ref": "#/components/schemas/MultiPolygon"
          },
          {
            "$ref": "#/components/schemas/Point"
          },
          {
            "$ref": "#/components/schemas/Polygon"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "LineString": "#/components/schemas/LineString",
            "MultiLineString": "#/components/schemas/MultiLineString",
            "MultiPoint": "#/components/schemas/MultiPoint",
            "MultiPolygon": "#/components/schemas/MultiPolygon",
            "Point": "#/components/schemas/Point",
            "Polygon": "#/components/schemas/Polygon"
          }
        }
      },
      "Point2D": {
        "type": "array",
        "maxItems": 2,
        "minItems": 2,
        "items": {
          "type": "number"
        }
      },
      "Point": {
        "type": "object",
        "description": "A GeoJSON Point.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Point2D"
          }
        }
      },
      "MultiPoint": {
        "type": "object",
        "description": "A GeoJSON MultiPoint.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            }
          }
        }
      },
      "LineString": {
        "type": "object",
        "description": "A GeoJSON LineString.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "minItems": 2,
            "items": {
              "$ref": "#/components/schemas/Point2D"
            }
          }
        }
      },
      "MultiLineString": {
        "type": "object",
        "description": "A GeoJSON MultiLineString.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 2,
              "items": {
                "$ref": "#/components/schemas/Point2D"
              }
            }
          }
        }
      },
      "Polygon": {
        "type": "object",
        "description": "A GeoJSON Polygon.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 4,
              "items": {
                "$ref": "#/components/schemas/Point2D"
              }
            }
          }
        }
      },
      "MultiPolygon": {
        "type": "object",
        "description": "A GeoJSON MultiPolygon.",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 4,
                "items": {
                  "$ref": "#/components/schemas/Point2D"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}