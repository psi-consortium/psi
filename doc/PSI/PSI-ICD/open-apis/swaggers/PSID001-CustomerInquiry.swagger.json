{
    "openapi": "3.0.1",
    "info": {
        "title": "Customer Inquiry Management",
        "description": "## PSID API Reference: PSID001 - Customer Inquiry Management\n\nCustomer Inquiry API is wrapping the Catalog Management APIs to provide results based on an inquiry send by the customer.\n### Asynchronous Processing\nThe results of an inquiry can either be calculated by an algorithm in short time or be answered by a provider after some minutes or days. To accommodate for that, the inquiry has a state to signal if it is processed. The result endpoints can either block in case a result is expected shortly, or return a 204 status code to signal that waiting or polling is not expedient.",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://{serverRoot}/psi-api/customerInquiry/v1/",
            "variables": {
                "serverRoot": {
                    "default": "localhost:8080"
                }
            }
        }
    ],
    "tags": [
        {
            "name": "customerInquiry",
            "description": "Customer Inquiry API"
        }
    ],
    "paths": {
        "/customerInquiry": {
            "post": {
                "tags": ["customerInquiry"],
                "summary": "Creates a CustomerInquiry",
                "description": "This operation creates a CustomerInquiry entity.",
                "operationId": "createCustomerInquiry",
                "requestBody": {
                    "description": "The CustomerInquiry to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerInquiry_Create"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerInquiry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customerInquiry/{id}": {
            "get": {
                "tags": ["customerInquiry"],
                "summary": "Retrieves a CustomerInquiry",
                "description": "This operation retrieves a CustomerInquiry entity.",
                "operationId": "retrieveCustomerInquiry",
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the CustomerInquiry",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerInquiry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchCustomerInquiry",
                "summary": "Updates partially a CustomerInquiry",
                "description": "This operation updates partially a CustomerInquiry entity.",
                "tags": ["customerInquiry"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the CustomerInquiry",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "description": "The CustomerInquiry to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerInquiry_Update"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Update Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerInquiry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteCustomerInquiry",
                "summary": "Cancels a CustomerInquiry",
                "description": "This operation cancels a CustomerInquiry entity.",
                "tags": ["customerInquiry"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the CustomerInquiry",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customerInquiry/{id}/results": {
            "get": {
                "tags": ["customerInquiry"],
                "summary": "Retrieves the InquiryResults matching the CustomerInquiry",
                "description": "This operation retrieves all InquiryResults matching the CustomerInquiry. The results are fetched from the ProductCatalog, therefore its datamodel applies.",
                "operationId": "retrieveCustomerInquiryResults",
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the CustomerInquiry",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InquiryResult"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No content can be provided, because the inquiry is not yet processed.",
                        "links": {
                            "CheckInquiryStatus": {
                                "operationId": "retrieveCustomerInquiry",
                                "parameters": {
                                    "id": "$request.path.id"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "InquiredCharacteristicValueSpecification": {
                "type": "object",
                "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic.",
                "properties": {
                    "precedence": {
                        "$ref": "#/components/schemas/CharacteristicValuePrecedence",
                        "default": "preferred",
                        "description": "Precedence of this value. Responds to an inquiry should aim to fullfil the 'preferred' value(s), but may deviate in the boundaries of min/max values if specified."
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
                    },
                    "value": {
                        "type": "object",
                        "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                    }
                }
            },
            "CharacteristicValuePrecedence": {
                "type": "string",
                "description": "Possible values for the precedence of a characteristic value.",
                "enum": ["preferred", "minimum", "maximum", "alternative"]
            },
            "CustomerCharacteristic": {
                "type": "object",
                "description": "A characteristic describing the customer. Used to scope results of a CustomerInquiry.",
                "required": ["name"],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications.",
                        "example": "country | securityGrade | ..."
                    },
                    "description": {
                        "type": "string",
                        "description": "A narrative that explains the CustomerCharacteristic."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                    },
                    "value": {
                        "type": "string",
                        "description": "The actual value of the characteristic",
                        "example": "DE, ES, FR, ... | UNCLASSIFIED, RESTRICTED, CONFIDENTIAL, SECRET, TOP_SECRET"
                    }
                }
            },
            "CustomerInquiry": {
                "type": "object",
                "description": "A request for information (resources, services, products and offerings) from a Customer.",
                "required": ["id", "state", "responseTime"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "description": "Reference of the CustomerInquiry",
                        "format": "uri"
                    },
                    "state": {
                        "$ref": "#/components/schemas/InquiryStateType",
                        "description": "Tracks the lifecycle status of the inquiry, such as Acknowledged, pending, InProgress and Completed or Cancelled."
                    },
                    "responseTime": {
                        "$ref": "#/components/schemas/ResponseTime"
                    },
                    "customerProfile": {
                        "type": "array",
                        "description": "Characteristics describing the customer. Used to scope results of a CustomerInquiry.",
                        "items": {
                            "$ref": "#/components/schemas/CustomerCharacteristic"
                        }
                    },
                    "bundlesOnly": {
                        "type": "boolean",
                        "description": "Whether or not to return only products/offerings which include all requested products. If set to false, the response may contain results which only partially satisfy the inquiry.",
                        "default": "true"
                    },
                    "customerResource": {
                        "type": "array",
                        "description": "List of ResourceSpecifications the customer already posseses and wants to re-use.",
                        "items": {
                            "$ref": "./PSID634-ResourceCatalog-v4.1.0.swagger.json#/components/schemas/ResourceSpecification"
                        }
                    },
                    "place": {
                        "type": "array",
                        "description": "List of places where the products are needed.",
                        "items": {
                            "$ref": "#/components/schemas/PlaceRefOrValue"
                        }
                    },
                    "inquiredProduct": {
                        "type": "array",
                        "description": "List of inquired products.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProduct"
                        }
                    },
                    "inquiredProvider": {
                        "type": "array",
                        "description": "The list of providers that are inquired to respond with a product offering.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProvider"
                        }
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name."
                    }
                }
            },
            "CustomerInquiry_Create": {
                "type": "object",
                "description": "A request for information (resources, services, products and offerings) from a Customer.\nSkipped properties: id,href,state,responseTime",
                "properties": {
                    "customerProfile": {
                        "type": "array",
                        "description": "Characteristics describing the customer. Used to scope results of a CustomerInquiry.",
                        "items": {
                            "$ref": "#/components/schemas/CustomerCharacteristic"
                        }
                    },
                    "bundlesOnly": {
                        "type": "boolean",
                        "description": "Whether or not to return only products/offerings which include all requested products. If set to false, the response may contain results which only partially satisfy the inquiry.",
                        "default": "true"
                    },
                    "customerResource": {
                        "type": "array",
                        "description": "List of ResourceSpecifications the customer already posseses and wants to re-use.",
                        "items": {
                            "$ref": "./PSID634-ResourceCatalog-v4.1.0.swagger.json#/components/schemas/ResourceSpecification"
                        }
                    },
                    "place": {
                        "type": "array",
                        "description": "List of places where the products are needed.",
                        "items": {
                            "$ref": "#/components/schemas/PlaceRefOrValue"
                        }
                    },
                    "inquiredProduct": {
                        "type": "array",
                        "description": "List of inquired products.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProduct"
                        }
                    },
                    "inquiredProvider": {
                        "type": "array",
                        "description": "The list of providers that are inquired to respond with a product offering.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProvider"
                        }
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name."
                    }
                }
            },
            "CustomerInquiry_Update": {
                "type": "object",
                "description": "An update request of a customer inquiry that allows to change the inquired providers.",
                "properties": {
                    "inquiredProvider": {
                        "type": "array",
                        "description": "The list of providers that are inquired to respond with a product offering.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProvider"
                        }
                    }
                }
            },
            "Duration": {
                "type": "object",
                "description": "A time interval in a given unit of time",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Time interval (number of seconds, minutes, hours, etc.)"
                    },
                    "units": {
                        "type": "string",
                        "description": "Unit of time (seconds, minutes, hours, etc.)"
                    }
                }
            },
            "InquiredProduct": {
                "type": "object",
                "description": "A product inquired by the customer.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Optional: Unique identifier of a known product specification this inquiry is based on."
                    },
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "description": "Optional: Reference of the product specification this inquiry is based on."
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional: Name of the product specification this inquiry is based on."
                    },
                    "targetProductSchema": {
                        "$ref": "#/components/schemas/TargetProductSchema"
                    },
                    "servicePeriod": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "place": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                        }
                    },
                    "inquiredProductCharacteristic": {
                        "type": "array",
                        "description": "A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProductCharacteristic"
                        }
                    },
                    "estimatedUsage": {
                        "type": "array",
                        "description": "The estimated usage of a product. The customer may provide this to allow the provider to optimize the returned products.",
                        "items": {
                            "$ref": "#/components/schemas/UsageEstimation"
                        }
                    }
                }
            },
            "InquiredProductCharacteristic": {
                "type": "object",
                "description": "A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can take a discrete value, such as color, can take a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).",
                "required": ["id", "inquiredProductCharacteristicValue"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID for the characteristic"
                    },
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                    },
                    "priority": {
                        "type": "number",
                        "description": "Priority of this characteristic compared to others in ascending order (the most important one is 1). Multiple characteristics can be equally important. If the attribute is not set, the characteristic has lowest priority."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                    },
                    "inquiredProductCharacteristicValue": {
                        "type": "array",
                        "description": "The values of the attributes in the InquiredProductCharacteristicValue object describe the values of the attributes that the customer is requesting for the corresponding InquiredProduct.",
                        "items": {
                            "$ref": "#/components/schemas/InquiredCharacteristicValueSpecification"
                        }
                    }
                }
            },
            "TargetProductSchema": {
                "type": "object",
                "description": "The reference object to the schema and type of target product which is described by product specification",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "Class type of the target product"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "format": "uri",
                        "description": "This field provides a link to the schema describing the target product"
                    }
                },
                "required": ["@type", "@schemaLocation"]
            },
            "TimePeriod": {
                "type": "object",
                "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
                "properties": {
                    "endDateTime": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the time period, using IETC-RFC-3339 format"
                    },
                    "startDateTime": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the time period, using IETC-RFC-3339 format"
                    }
                }
            },
            "ResponseTime": {
                "type": "object",
                "description": "The response time for an inquiry. At least the maximum estimated time must be filled on creation, the actual value is filled on completion.",
                "required": ["maximum"],
                "properties": {
                    "minimum": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "The minimum estimated response time"
                    },
                    "average": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "The average estimated response time"
                    },
                    "maximum": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "The maximum estimated response time"
                    },
                    "actual": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "The actual response time"
                    }
                }
            },
            "UsageEstimation": {
                "type": "object",
                "description": "The estimated usage of a product. The customer may provide this to allow the provider to optimize the returned products.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which this usage type is known and distinguished from other usage types.",
                        "example": "bandwidth"
                    },
                    "value": {
                        "type": "integer",
                        "description": "The value of the estimated usage.",
                        "example": "500"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot.",
                        "example": "MB"
                    },
                    "recurringChargePeriod": {
                        "type": "string",
                        "description": "Could be month, week...",
                        "example": "month"
                    },
                    "recurringChargePeriodLength": {
                        "type": "integer",
                        "description": "How many months, weeks...",
                        "default": 1
                    }
                }
            },
            "InquiredProvider": {
                "type": "object",
                "description": "A provider to which the customer inquiry will be sent.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "description": "Hyperlink reference"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related provider."
                    },
                    "state": {
                        "$ref": "#/components/schemas/InquiryStateType",
                        "description": "Tracks the individual lifecycle status of the inquiry for the provider, such as Acknowledged, pending, InProgress and Completed or Cancelled."
                    },
                    "actualResponseTime": {
                        "example": "1985-04-12T23:20:50.52Z",
                        "type": "string",
                        "format": "date-time",
                        "description": "The actual response time of the provider for the inquiry"
                    }
                }
            },
            "InquiryStateType": {
                "type": "string",
                "description": "Possible values for the state of the customer inquiry",
                "enum": ["pending", "inProgress", "cancelled", "completed"]
            },
            "InquiryResult": {
                "type": "object",
                "description": "A ranked result of an inquiry. Must contain at least one ProductSpecification, optionally complemented by an offering.",
                "required": ["id", "productSpecification"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier of the result within its containing inquiry (may or may not be globally unique, depending on provider implementation)"
                    },
                    "priority": {
                        "type": "number",
                        "description": "Rank of a InquiryResult compared to others in ascending order (the best result is 1)."
                    },
                    "note": {
                        "type": "array",
                        "description": "The note(s) that are associated to the result.",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    },
                    "totalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TotalPrice"
                        }
                    },
                    "inquiredProductRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InquiredProductRelationship"
                        }
                    },
                    "productSpecification": {
                        "type": "array",
                        "items": {
                            "$ref": "./PSID620-ProductCatalog-v4.1.0.swagger.json#/components/schemas/ProductSpecification"
                        }
                    },
                    "product": {
                        "type": "array",
                        "items": {
                            "$ref": "./PSID637-ProductInventory-v4.0.0.swagger.json#/components/schemas/Product"
                        }
                    },
                    "productOffering": {
                        "type": "array",
                        "items": {
                            "$ref": "./PSID620-ProductCatalog-v4.1.0.swagger.json#/components/schemas/ProductOffering"
                        }
                    }
                }
            },
            "Note": {
                "type": "object",
                "description": "Extra information about a given entity",
                "required": ["text"],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "description": "Hyperlink reference"
                    },
                    "author": {
                        "type": "string",
                        "description": "Author of the note"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of the note"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the note"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    }
                }
            },
            "Place": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the place"
                    },
                    "href": {
                        "type": "string",
                        "description": "Unique reference of the place",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships."
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name."
                    }
                },
                "description": "Place reference. Place defines the places where the products are sold or delivered.",
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Place": "#/components/schemas/Place",
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "GeographicAddress": "#/components/schemas/GeographicAddress"
                    }
                }
            },
            "GeographicAddress": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Place"
                    },
                    {
                        "type": "object",
                        "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
                        "properties": {
                            "city": {
                                "type": "string",
                                "description": "City that the address is in"
                            },
                            "country": {
                                "type": "string",
                                "description": "Country that the address is in"
                            },
                            "locality": {
                                "type": "string",
                                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
                            },
                            "postcode": {
                                "type": "string",
                                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
                            },
                            "stateOrProvince": {
                                "type": "string",
                                "description": "the State or Province that the address is in"
                            },
                            "streetName": {
                                "type": "string",
                                "description": "Name of the street or other street type"
                            },
                            "streetNr": {
                                "type": "string",
                                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
                            },
                            "streetNrLast": {
                                "type": "string",
                                "description": "Last number in a range of street numbers allocated to a property"
                            },
                            "streetNrLastSuffix": {
                                "type": "string",
                                "description": "Last street number suffix for a ranged address"
                            },
                            "streetNrSuffix": {
                                "type": "string",
                                "description": "the first street number suffix"
                            },
                            "streetSuffix": {
                                "type": "string",
                                "description": "A modifier denoting a relative direction"
                            },
                            "streetType": {
                                "type": "string",
                                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
                            },
                            "geographicLocation": {
                                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
                            },
                            "geographicAddressType": {
                                "type": "string",
                                "description": "Classification of the address, e.g., residential, industrial "
                            }
                        }
                    }
                ]
            },
            "PlaceRef": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related entity."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                },
                "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered."
            },
            "PlaceRefOrValue": {
                "type": "object",
                "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/GeographicAddress"
                    },
                    {
                        "$ref": "#/components/schemas/GeographicLocation"
                    },
                    {
                        "$ref": "#/components/schemas/PlaceRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicAddress": "#/components/schemas/GeographicAddress",
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "PlaceRef": "#/components/schemas/PlaceRef"
                    }
                }
            },
            "GeographicLocation": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Place"
                    },
                    {
                        "type": "object",
                        "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
                        "properties": {
                            "geoJson": {
                                "$ref": "#/components/schemas/Geometry"
                            },
                            "bbox": {
                                "type": "array",
                                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                                "minItems": 4,
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                ]
            },
            "GeographicLocationRef": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    },
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related entity."
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                }
            },
            "GeographicLocationRefOrValue": {
                "type": "object",
                "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/GeographicLocation"
                    },
                    {
                        "$ref": "#/components/schemas/GeographicLocationRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "GeographicLocation": "#/components/schemas/GeographicLocation",
                        "GeographicLocationRef": "#/components/schemas/GeographicLocationRef"
                    }
                }
            },
            "Geometry": {
                "type": "object",
                "description": "A GeoJson geometry.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/LineString"
                    },
                    {
                        "$ref": "#/components/schemas/MultiLineString"
                    },
                    {
                        "$ref": "#/components/schemas/MultiPoint"
                    },
                    {
                        "$ref": "#/components/schemas/MultiPolygon"
                    },
                    {
                        "$ref": "#/components/schemas/Point"
                    },
                    {
                        "$ref": "#/components/schemas/Polygon"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "LineString": "#/components/schemas/LineString",
                        "MultiLineString": "#/components/schemas/MultiLineString",
                        "MultiPoint": "#/components/schemas/MultiPoint",
                        "MultiPolygon": "#/components/schemas/MultiPolygon",
                        "Point": "#/components/schemas/Point",
                        "Polygon": "#/components/schemas/Polygon"
                    }
                }
            },
            "Point2D": {
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "items": {
                    "type": "number"
                }
            },
            "Point": {
                "type": "object",
                "description": "A GeoJSON Point.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/Point2D"
                    }
                }
            },
            "MultiPoint": {
                "type": "object",
                "description": "A GeoJSON MultiPoint.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Point2D"
                        }
                    }
                }
            },
            "LineString": {
                "type": "object",
                "description": "A GeoJSON LineString.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                            "$ref": "#/components/schemas/Point2D"
                        }
                    }
                }
            },
            "MultiLineString": {
                "type": "object",
                "description": "A GeoJSON MultiLineString.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                                "$ref": "#/components/schemas/Point2D"
                            }
                        }
                    }
                }
            },
            "Polygon": {
                "type": "object",
                "description": "A GeoJSON Polygon.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "minItems": 4,
                            "items": {
                                "$ref": "#/components/schemas/Point2D"
                            }
                        }
                    }
                }
            },
            "MultiPolygon": {
                "type": "object",
                "description": "A GeoJSON MultiPolygon.",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "minItems": 4,
                                "items": {
                                    "$ref": "#/components/schemas/Point2D"
                                }
                            }
                        }
                    }
                }
            },

            "Money": {
                "type": "object",
                "properties": {
                    "unit": {
                        "type": "string",
                        "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
                    },
                    "value": {
                        "type": "number",
                        "description": "A positive floating point number",
                        "format": "float"
                    }
                },
                "description": "A base / value business entity used to represent money"
            },
            "Price": {
                "type": "object",
                "properties": {
                    "percentage": {
                        "type": "number",
                        "description": "Percentage to apply for ProdOfferPriceAlteration",
                        "format": "float"
                    },
                    "taxRate": {
                        "type": "number",
                        "description": "Tax rate",
                        "format": "float"
                    },
                    "dutyFreeAmount": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "taxIncludedAmount": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage."
            },
            "TotalPrice": {
                "required": ["price", "priceType"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A short descriptive name."
                    },
                    "description": {
                        "type": "string",
                        "description": "A narrative that explains in detail the semantics of this total price."
                    },
                    "priceType": {
                        "type": "string",
                        "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                    },
                    "recurringChargePeriod": {
                        "type": "string",
                        "description": "Could be month, week..."
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Could be minutes, GB..."
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "description": "An amount, usually of money, that represents the actual price to be paid by a Customer for current group of inquiry results."
            },

            "InquiredProductRef": {
                "type": "object",
                "required": ["id"],
                "description": "A reference to an InquiredProduct.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of an InquiredProduct."
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional: Name of the InquiredProduct."
                    }
                }
            },

            "Any": {
                "type": "object"
            },

            "RelationshipCharacteristic": {
                "type": "object",
                "description": "A characteristic property or distinguishing feature of this relationship.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID for the characteristic."
                    },
                    "name": {
                        "type": "string",
                        "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                    },
                    "deviation": {
                        "type": "string",
                        "description": "Explains the deviation from the originally inquired characteristic, like 'below', 'alternative', etc."
                    },
                    "valueType": {
                        "type": "string",
                        "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                    },
                    "relationshipCharacteristicValue": {
                        "type": "array",
                        "description": "A RelationshipCharacteristicValue object is used to define a set of attributes.",
                        "items": {
                            "$ref": "./PSID620-ProductCatalog-v4.1.0.swagger.json#/components/schemas/CharacteristicValueSpecification"
                        }
                    }
                }
            },

            "RelatedPlaceRefOrValue": {
                "required": ["role"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the place"
                    },
                    "href": {
                        "type": "string",
                        "description": "Unique reference of the place",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                    },
                    "role": {
                        "type": "string"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                },
                "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
            },

            "InquiredProductRelationship": {
                "required": ["inquiredProductRef"],
                "type": "object",
                "properties": {
                    "inquiredProductRef": {
                        "$ref": "#/components/schemas/InquiredProductRef"
                    },
                    "coverage": {
                        "type": "string",
                        "enum": ["complete", "partial"],
                        "description": "Provides details on how the given ProductOffering/ProductSpecification/Product coveres the related InquiredProduct."
                    },
                    "quantity": {
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                    },
                    "totalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TotalPrice"
                        }
                    },
                    "servicePeriod": {
                        "$ref": "#/components/schemas/TimePeriod",
                        "description": "Optional: For the case of a deviation from the service period originally requested in the RequiredProduct."
                    },
                    "relationshipCharacteristic": {
                        "type": "array",
                        "description": "A characteristic property or distinguishing feature for this relationship.",
                        "items": {
                            "$ref": "#/components/schemas/RelationshipCharacteristic"
                        }
                    },
                    "productOfferingRef": {
                        "$ref": "./PSID620-ProductCatalog-v4.1.0.swagger.json#/components/schemas/ProductOfferingRef"
                    },
                    "productSpecificationRef": {
                        "$ref": "./PSID620-ProductCatalog-v4.1.0.swagger.json#/components/schemas/ProductSpecificationRef"
                    },
                    "productRef": {
                        "$ref": "./PSID637-ProductInventory-v4.0.0.swagger.json#/components/schemas/ProductRef"
                    }
                }
            },

            "Error": {
                "required": ["code", "reason"],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Application relevant detail, defined in the API or a common list."
                    },
                    "reason": {
                        "type": "string",
                        "description": "Explanation of the reason for the error which can be shown to a client user."
                    },
                    "message": {
                        "type": "string",
                        "description": "More details and corrective actions related to the error which can be shown to a client user."
                    },
                    "status": {
                        "type": "string",
                        "description": "HTTP Error code extension"
                    },
                    "referenceError": {
                        "type": "string",
                        "description": "URI of documentation describing the error.",
                        "format": "uri"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class."
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "format": "uri"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name."
                    }
                },
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
            }
        }
    }
}
