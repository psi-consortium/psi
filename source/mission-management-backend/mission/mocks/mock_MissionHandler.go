// Code generated by mockery v2.51.1. DO NOT EDIT.

package mockmission

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// MockMissionHandler is an autogenerated mock type for the MissionHandler type
type MockMissionHandler struct {
	mock.Mock
}

type MockMissionHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMissionHandler) EXPECT() *MockMissionHandler_Expecter {
	return &MockMissionHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c
func (_m *MockMissionHandler) Create(c *gin.Context) {
	_m.Called(c)
}

// MockMissionHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMissionHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockMissionHandler_Expecter) Create(c interface{}) *MockMissionHandler_Create_Call {
	return &MockMissionHandler_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *MockMissionHandler_Create_Call) Run(run func(c *gin.Context)) *MockMissionHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockMissionHandler_Create_Call) Return() *MockMissionHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMissionHandler_Create_Call) RunAndReturn(run func(*gin.Context)) *MockMissionHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: c
func (_m *MockMissionHandler) Delete(c *gin.Context) {
	_m.Called(c)
}

// MockMissionHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMissionHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockMissionHandler_Expecter) Delete(c interface{}) *MockMissionHandler_Delete_Call {
	return &MockMissionHandler_Delete_Call{Call: _e.mock.On("Delete", c)}
}

func (_c *MockMissionHandler_Delete_Call) Run(run func(c *gin.Context)) *MockMissionHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockMissionHandler_Delete_Call) Return() *MockMissionHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMissionHandler_Delete_Call) RunAndReturn(run func(*gin.Context)) *MockMissionHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// GetById provides a mock function with given fields: c
func (_m *MockMissionHandler) GetById(c *gin.Context) {
	_m.Called(c)
}

// MockMissionHandler_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockMissionHandler_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockMissionHandler_Expecter) GetById(c interface{}) *MockMissionHandler_GetById_Call {
	return &MockMissionHandler_GetById_Call{Call: _e.mock.On("GetById", c)}
}

func (_c *MockMissionHandler_GetById_Call) Run(run func(c *gin.Context)) *MockMissionHandler_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockMissionHandler_GetById_Call) Return() *MockMissionHandler_GetById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMissionHandler_GetById_Call) RunAndReturn(run func(*gin.Context)) *MockMissionHandler_GetById_Call {
	_c.Run(run)
	return _c
}

// List provides a mock function with given fields: c
func (_m *MockMissionHandler) List(c *gin.Context) {
	_m.Called(c)
}

// MockMissionHandler_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMissionHandler_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockMissionHandler_Expecter) List(c interface{}) *MockMissionHandler_List_Call {
	return &MockMissionHandler_List_Call{Call: _e.mock.On("List", c)}
}

func (_c *MockMissionHandler_List_Call) Run(run func(c *gin.Context)) *MockMissionHandler_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockMissionHandler_List_Call) Return() *MockMissionHandler_List_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMissionHandler_List_Call) RunAndReturn(run func(*gin.Context)) *MockMissionHandler_List_Call {
	_c.Run(run)
	return _c
}

// Patch provides a mock function with given fields: c
func (_m *MockMissionHandler) Patch(c *gin.Context) {
	_m.Called(c)
}

// MockMissionHandler_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockMissionHandler_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockMissionHandler_Expecter) Patch(c interface{}) *MockMissionHandler_Patch_Call {
	return &MockMissionHandler_Patch_Call{Call: _e.mock.On("Patch", c)}
}

func (_c *MockMissionHandler_Patch_Call) Run(run func(c *gin.Context)) *MockMissionHandler_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockMissionHandler_Patch_Call) Return() *MockMissionHandler_Patch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMissionHandler_Patch_Call) RunAndReturn(run func(*gin.Context)) *MockMissionHandler_Patch_Call {
	_c.Run(run)
	return _c
}

// NewMockMissionHandler creates a new instance of MockMissionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMissionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMissionHandler {
	mock := &MockMissionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
