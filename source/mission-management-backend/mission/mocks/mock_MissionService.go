// Code generated by mockery v2.51.1. DO NOT EDIT.

package mockmission

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	openapi "github.com/psi-consortium/oda/mission-management/mission/openapi"
)

// MockMissionService is an autogenerated mock type for the MissionService type
type MockMissionService struct {
	mock.Mock
}

type MockMissionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMissionService) EXPECT() *MockMissionService_Expecter {
	return &MockMissionService_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with given fields: ctx
func (_m *MockMissionService) CountAll(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type MockMissionService_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMissionService_Expecter) CountAll(ctx interface{}) *MockMissionService_CountAll_Call {
	return &MockMissionService_CountAll_Call{Call: _e.mock.On("CountAll", ctx)}
}

func (_c *MockMissionService_CountAll_Call) Run(run func(ctx context.Context)) *MockMissionService_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMissionService_CountAll_Call) Return(_a0 int64, _a1 error) *MockMissionService_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_CountAll_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockMissionService_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockMissionService) Create(ctx context.Context, _a1 *openapi.MissionCreate) (*openapi.Mission, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *openapi.MissionCreate) (*openapi.Mission, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *openapi.MissionCreate) *openapi.Mission); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *openapi.MissionCreate) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMissionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *openapi.MissionCreate
func (_e *MockMissionService_Expecter) Create(ctx interface{}, _a1 interface{}) *MockMissionService_Create_Call {
	return &MockMissionService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockMissionService_Create_Call) Run(run func(ctx context.Context, _a1 *openapi.MissionCreate)) *MockMissionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*openapi.MissionCreate))
	})
	return _c
}

func (_c *MockMissionService_Create_Call) Return(_a0 *openapi.Mission, _a1 error) *MockMissionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_Create_Call) RunAndReturn(run func(context.Context, *openapi.MissionCreate) (*openapi.Mission, error)) *MockMissionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockMissionService) Delete(ctx context.Context, id string) (int64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMissionService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMissionService_Expecter) Delete(ctx interface{}, id interface{}) *MockMissionService_Delete_Call {
	return &MockMissionService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMissionService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockMissionService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMissionService_Delete_Call) Return(_a0 int64, _a1 error) *MockMissionService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_Delete_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockMissionService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockMissionService) GetById(ctx context.Context, id string) (*openapi.Mission, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*openapi.Mission, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *openapi.Mission); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockMissionService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMissionService_Expecter) GetById(ctx interface{}, id interface{}) *MockMissionService_GetById_Call {
	return &MockMissionService_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockMissionService_GetById_Call) Run(run func(ctx context.Context, id string)) *MockMissionService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMissionService_GetById_Call) Return(_a0 *openapi.Mission, _a1 error) *MockMissionService_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_GetById_Call) RunAndReturn(run func(context.Context, string) (*openapi.Mission, error)) *MockMissionService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *MockMissionService) List(ctx context.Context, offset int64, limit int64) ([]*openapi.Mission, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*openapi.Mission, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*openapi.Mission); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMissionService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int64
//   - limit int64
func (_e *MockMissionService_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *MockMissionService_List_Call {
	return &MockMissionService_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *MockMissionService_List_Call) Run(run func(ctx context.Context, offset int64, limit int64)) *MockMissionService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockMissionService_List_Call) Return(_a0 []*openapi.Mission, _a1 error) *MockMissionService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_List_Call) RunAndReturn(run func(context.Context, int64, int64) ([]*openapi.Mission, error)) *MockMissionService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, id, patch
func (_m *MockMissionService) Patch(ctx context.Context, id string, patch *openapi.MissionUpdate) (*openapi.Mission, error) {
	ret := _m.Called(ctx, id, patch)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *openapi.MissionUpdate) (*openapi.Mission, error)); ok {
		return rf(ctx, id, patch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *openapi.MissionUpdate) *openapi.Mission); ok {
		r0 = rf(ctx, id, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *openapi.MissionUpdate) error); ok {
		r1 = rf(ctx, id, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionService_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockMissionService_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - patch *openapi.MissionUpdate
func (_e *MockMissionService_Expecter) Patch(ctx interface{}, id interface{}, patch interface{}) *MockMissionService_Patch_Call {
	return &MockMissionService_Patch_Call{Call: _e.mock.On("Patch", ctx, id, patch)}
}

func (_c *MockMissionService_Patch_Call) Run(run func(ctx context.Context, id string, patch *openapi.MissionUpdate)) *MockMissionService_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*openapi.MissionUpdate))
	})
	return _c
}

func (_c *MockMissionService_Patch_Call) Return(_a0 *openapi.Mission, _a1 error) *MockMissionService_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionService_Patch_Call) RunAndReturn(run func(context.Context, string, *openapi.MissionUpdate) (*openapi.Mission, error)) *MockMissionService_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMissionService creates a new instance of MockMissionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMissionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMissionService {
	mock := &MockMissionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
