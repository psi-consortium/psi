// Code generated by mockery v2.51.1. DO NOT EDIT.

package mockmission

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	openapi "github.com/psi-consortium/oda/mission-management/mission/openapi"
)

// MockMissionRepository is an autogenerated mock type for the MissionRepository type
type MockMissionRepository struct {
	mock.Mock
}

type MockMissionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMissionRepository) EXPECT() *MockMissionRepository_Expecter {
	return &MockMissionRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, _a1
func (_m *MockMissionRepository) Add(ctx context.Context, _a1 *openapi.Mission) (*openapi.Mission, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *openapi.Mission) (*openapi.Mission, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *openapi.Mission) *openapi.Mission); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *openapi.Mission) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockMissionRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *openapi.Mission
func (_e *MockMissionRepository_Expecter) Add(ctx interface{}, _a1 interface{}) *MockMissionRepository_Add_Call {
	return &MockMissionRepository_Add_Call{Call: _e.mock.On("Add", ctx, _a1)}
}

func (_c *MockMissionRepository_Add_Call) Run(run func(ctx context.Context, _a1 *openapi.Mission)) *MockMissionRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*openapi.Mission))
	})
	return _c
}

func (_c *MockMissionRepository_Add_Call) Return(_a0 *openapi.Mission, _a1 error) *MockMissionRepository_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_Add_Call) RunAndReturn(run func(context.Context, *openapi.Mission) (*openapi.Mission, error)) *MockMissionRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CountAll provides a mock function with given fields: ctx
func (_m *MockMissionRepository) CountAll(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type MockMissionRepository_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMissionRepository_Expecter) CountAll(ctx interface{}) *MockMissionRepository_CountAll_Call {
	return &MockMissionRepository_CountAll_Call{Call: _e.mock.On("CountAll", ctx)}
}

func (_c *MockMissionRepository_CountAll_Call) Run(run func(ctx context.Context)) *MockMissionRepository_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMissionRepository_CountAll_Call) Return(_a0 int64, _a1 error) *MockMissionRepository_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_CountAll_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockMissionRepository_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockMissionRepository) Delete(ctx context.Context, id string) (int64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMissionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMissionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockMissionRepository_Delete_Call {
	return &MockMissionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMissionRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockMissionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMissionRepository_Delete_Call) Return(_a0 int64, _a1 error) *MockMissionRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_Delete_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockMissionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, id
func (_m *MockMissionRepository) Exists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockMissionRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMissionRepository_Expecter) Exists(ctx interface{}, id interface{}) *MockMissionRepository_Exists_Call {
	return &MockMissionRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockMissionRepository_Exists_Call) Run(run func(ctx context.Context, id string)) *MockMissionRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMissionRepository_Exists_Call) Return(_a0 bool, _a1 error) *MockMissionRepository_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockMissionRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockMissionRepository) GetById(ctx context.Context, id string) (*openapi.Mission, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*openapi.Mission, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *openapi.Mission); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockMissionRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMissionRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockMissionRepository_GetById_Call {
	return &MockMissionRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockMissionRepository_GetById_Call) Run(run func(ctx context.Context, id string)) *MockMissionRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMissionRepository_GetById_Call) Return(_a0 *openapi.Mission, _a1 error) *MockMissionRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_GetById_Call) RunAndReturn(run func(context.Context, string) (*openapi.Mission, error)) *MockMissionRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, size, page
func (_m *MockMissionRepository) List(ctx context.Context, size int64, page int64) ([]*openapi.Mission, error) {
	ret := _m.Called(ctx, size, page)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*openapi.Mission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*openapi.Mission, error)); ok {
		return rf(ctx, size, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*openapi.Mission); ok {
		r0 = rf(ctx, size, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*openapi.Mission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, size, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMissionRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMissionRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - size int64
//   - page int64
func (_e *MockMissionRepository_Expecter) List(ctx interface{}, size interface{}, page interface{}) *MockMissionRepository_List_Call {
	return &MockMissionRepository_List_Call{Call: _e.mock.On("List", ctx, size, page)}
}

func (_c *MockMissionRepository_List_Call) Run(run func(ctx context.Context, size int64, page int64)) *MockMissionRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockMissionRepository_List_Call) Return(_a0 []*openapi.Mission, _a1 error) *MockMissionRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMissionRepository_List_Call) RunAndReturn(run func(context.Context, int64, int64) ([]*openapi.Mission, error)) *MockMissionRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockMissionRepository) Save(ctx context.Context, _a1 *openapi.Mission) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *openapi.Mission) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMissionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockMissionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *openapi.Mission
func (_e *MockMissionRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *MockMissionRepository_Save_Call {
	return &MockMissionRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockMissionRepository_Save_Call) Run(run func(ctx context.Context, _a1 *openapi.Mission)) *MockMissionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*openapi.Mission))
	})
	return _c
}

func (_c *MockMissionRepository_Save_Call) Return(_a0 error) *MockMissionRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMissionRepository_Save_Call) RunAndReturn(run func(context.Context, *openapi.Mission) error) *MockMissionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMissionRepository creates a new instance of MockMissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMissionRepository {
	mock := &MockMissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
