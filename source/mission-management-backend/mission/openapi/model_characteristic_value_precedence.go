/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CharacteristicValuePrecedence Possible values for the precedence of a characteristic value.
type CharacteristicValuePrecedence string

// List of CharacteristicValuePrecedence
const (
	PREFERRED CharacteristicValuePrecedence = "preferred"
	MINIMUM CharacteristicValuePrecedence = "minimum"
	MAXIMUM CharacteristicValuePrecedence = "maximum"
	ALTERNATIVE CharacteristicValuePrecedence = "alternative"
)

// All allowed values of CharacteristicValuePrecedence enum
var AllowedCharacteristicValuePrecedenceEnumValues = []CharacteristicValuePrecedence{
	"preferred",
	"minimum",
	"maximum",
	"alternative",
}

func (v *CharacteristicValuePrecedence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CharacteristicValuePrecedence(value)
	for _, existing := range AllowedCharacteristicValuePrecedenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CharacteristicValuePrecedence", value)
}

// NewCharacteristicValuePrecedenceFromValue returns a pointer to a valid CharacteristicValuePrecedence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCharacteristicValuePrecedenceFromValue(v string) (*CharacteristicValuePrecedence, error) {
	ev := CharacteristicValuePrecedence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CharacteristicValuePrecedence: valid values are %v", v, AllowedCharacteristicValuePrecedenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CharacteristicValuePrecedence) IsValid() bool {
	for _, existing := range AllowedCharacteristicValuePrecedenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CharacteristicValuePrecedence value
func (v CharacteristicValuePrecedence) Ptr() *CharacteristicValuePrecedence {
	return &v
}

type NullableCharacteristicValuePrecedence struct {
	value *CharacteristicValuePrecedence
	isSet bool
}

func (v NullableCharacteristicValuePrecedence) Get() *CharacteristicValuePrecedence {
	return v.value
}

func (v *NullableCharacteristicValuePrecedence) Set(val *CharacteristicValuePrecedence) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacteristicValuePrecedence) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacteristicValuePrecedence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacteristicValuePrecedence(val *CharacteristicValuePrecedence) *NullableCharacteristicValuePrecedence {
	return &NullableCharacteristicValuePrecedence{value: val, isSet: true}
}

func (v NullableCharacteristicValuePrecedence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacteristicValuePrecedence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

