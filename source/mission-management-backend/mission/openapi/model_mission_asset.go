/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MissionAsset Planning of a required asset in a mission. May contain any combination of user-defined characteristics for an inquiry, an ordered product or a service/resource that is already in the customer inventory.
type MissionAsset struct {
	// Identifier for this asset
	Id *string `json:"id,omitempty"`
	// Name for this asset
	Name *string `json:"name,omitempty"`
	TargetProductSchema *TargetProductSchema `json:"targetProductSchema,omitempty"`
	ServicePeriod *RelativeTimePeriod `json:"servicePeriod,omitempty"`
	Place []RelatedPlaceRefOrValue `json:"place,omitempty"`
	// A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).
	InquiredProductCharacteristic []InquiredProductCharacteristic `json:"inquiredProductCharacteristic,omitempty"`
	// A Product that is used to implement the defined specification. Usually set after creating a ProductOrder.
	RealizingProduct []ProductRef `json:"realizingProduct,omitempty"`
	// A Service that is part of the customers inventory. Either selected manually or found by the Inquiry API.
	RealizingService []ServiceRef `json:"realizingService,omitempty"`
	// A Resource that is part of the customers inventory. Either selected manually or found by the Inquiry API.
	RealizingResource []ResourceRef `json:"realizingResource,omitempty"`
	// Relation to other assets.
	AssetRelationship []MissionAssetRelationship `json:"assetRelationship,omitempty"`
}

// NewMissionAsset instantiates a new MissionAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissionAsset() *MissionAsset {
	this := MissionAsset{}
	return &this
}

// NewMissionAssetWithDefaults instantiates a new MissionAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissionAssetWithDefaults() *MissionAsset {
	this := MissionAsset{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MissionAsset) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MissionAsset) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MissionAsset) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MissionAsset) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MissionAsset) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MissionAsset) SetName(v string) {
	o.Name = &v
}

// GetTargetProductSchema returns the TargetProductSchema field value if set, zero value otherwise.
func (o *MissionAsset) GetTargetProductSchema() TargetProductSchema {
	if o == nil || isNil(o.TargetProductSchema) {
		var ret TargetProductSchema
		return ret
	}
	return *o.TargetProductSchema
}

// GetTargetProductSchemaOk returns a tuple with the TargetProductSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetTargetProductSchemaOk() (*TargetProductSchema, bool) {
	if o == nil || isNil(o.TargetProductSchema) {
    return nil, false
	}
	return o.TargetProductSchema, true
}

// HasTargetProductSchema returns a boolean if a field has been set.
func (o *MissionAsset) HasTargetProductSchema() bool {
	if o != nil && !isNil(o.TargetProductSchema) {
		return true
	}

	return false
}

// SetTargetProductSchema gets a reference to the given TargetProductSchema and assigns it to the TargetProductSchema field.
func (o *MissionAsset) SetTargetProductSchema(v TargetProductSchema) {
	o.TargetProductSchema = &v
}

// GetServicePeriod returns the ServicePeriod field value if set, zero value otherwise.
func (o *MissionAsset) GetServicePeriod() RelativeTimePeriod {
	if o == nil || isNil(o.ServicePeriod) {
		var ret RelativeTimePeriod
		return ret
	}
	return *o.ServicePeriod
}

// GetServicePeriodOk returns a tuple with the ServicePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetServicePeriodOk() (*RelativeTimePeriod, bool) {
	if o == nil || isNil(o.ServicePeriod) {
    return nil, false
	}
	return o.ServicePeriod, true
}

// HasServicePeriod returns a boolean if a field has been set.
func (o *MissionAsset) HasServicePeriod() bool {
	if o != nil && !isNil(o.ServicePeriod) {
		return true
	}

	return false
}

// SetServicePeriod gets a reference to the given RelativeTimePeriod and assigns it to the ServicePeriod field.
func (o *MissionAsset) SetServicePeriod(v RelativeTimePeriod) {
	o.ServicePeriod = &v
}

// GetPlace returns the Place field value if set, zero value otherwise.
func (o *MissionAsset) GetPlace() []RelatedPlaceRefOrValue {
	if o == nil || isNil(o.Place) {
		var ret []RelatedPlaceRefOrValue
		return ret
	}
	return o.Place
}

// GetPlaceOk returns a tuple with the Place field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetPlaceOk() ([]RelatedPlaceRefOrValue, bool) {
	if o == nil || isNil(o.Place) {
    return nil, false
	}
	return o.Place, true
}

// HasPlace returns a boolean if a field has been set.
func (o *MissionAsset) HasPlace() bool {
	if o != nil && !isNil(o.Place) {
		return true
	}

	return false
}

// SetPlace gets a reference to the given []RelatedPlaceRefOrValue and assigns it to the Place field.
func (o *MissionAsset) SetPlace(v []RelatedPlaceRefOrValue) {
	o.Place = v
}

// GetInquiredProductCharacteristic returns the InquiredProductCharacteristic field value if set, zero value otherwise.
func (o *MissionAsset) GetInquiredProductCharacteristic() []InquiredProductCharacteristic {
	if o == nil || isNil(o.InquiredProductCharacteristic) {
		var ret []InquiredProductCharacteristic
		return ret
	}
	return o.InquiredProductCharacteristic
}

// GetInquiredProductCharacteristicOk returns a tuple with the InquiredProductCharacteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetInquiredProductCharacteristicOk() ([]InquiredProductCharacteristic, bool) {
	if o == nil || isNil(o.InquiredProductCharacteristic) {
    return nil, false
	}
	return o.InquiredProductCharacteristic, true
}

// HasInquiredProductCharacteristic returns a boolean if a field has been set.
func (o *MissionAsset) HasInquiredProductCharacteristic() bool {
	if o != nil && !isNil(o.InquiredProductCharacteristic) {
		return true
	}

	return false
}

// SetInquiredProductCharacteristic gets a reference to the given []InquiredProductCharacteristic and assigns it to the InquiredProductCharacteristic field.
func (o *MissionAsset) SetInquiredProductCharacteristic(v []InquiredProductCharacteristic) {
	o.InquiredProductCharacteristic = v
}

// GetRealizingProduct returns the RealizingProduct field value if set, zero value otherwise.
func (o *MissionAsset) GetRealizingProduct() []ProductRef {
	if o == nil || isNil(o.RealizingProduct) {
		var ret []ProductRef
		return ret
	}
	return o.RealizingProduct
}

// GetRealizingProductOk returns a tuple with the RealizingProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetRealizingProductOk() ([]ProductRef, bool) {
	if o == nil || isNil(o.RealizingProduct) {
    return nil, false
	}
	return o.RealizingProduct, true
}

// HasRealizingProduct returns a boolean if a field has been set.
func (o *MissionAsset) HasRealizingProduct() bool {
	if o != nil && !isNil(o.RealizingProduct) {
		return true
	}

	return false
}

// SetRealizingProduct gets a reference to the given []ProductRef and assigns it to the RealizingProduct field.
func (o *MissionAsset) SetRealizingProduct(v []ProductRef) {
	o.RealizingProduct = v
}

// GetRealizingService returns the RealizingService field value if set, zero value otherwise.
func (o *MissionAsset) GetRealizingService() []ServiceRef {
	if o == nil || isNil(o.RealizingService) {
		var ret []ServiceRef
		return ret
	}
	return o.RealizingService
}

// GetRealizingServiceOk returns a tuple with the RealizingService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetRealizingServiceOk() ([]ServiceRef, bool) {
	if o == nil || isNil(o.RealizingService) {
    return nil, false
	}
	return o.RealizingService, true
}

// HasRealizingService returns a boolean if a field has been set.
func (o *MissionAsset) HasRealizingService() bool {
	if o != nil && !isNil(o.RealizingService) {
		return true
	}

	return false
}

// SetRealizingService gets a reference to the given []ServiceRef and assigns it to the RealizingService field.
func (o *MissionAsset) SetRealizingService(v []ServiceRef) {
	o.RealizingService = v
}

// GetRealizingResource returns the RealizingResource field value if set, zero value otherwise.
func (o *MissionAsset) GetRealizingResource() []ResourceRef {
	if o == nil || isNil(o.RealizingResource) {
		var ret []ResourceRef
		return ret
	}
	return o.RealizingResource
}

// GetRealizingResourceOk returns a tuple with the RealizingResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetRealizingResourceOk() ([]ResourceRef, bool) {
	if o == nil || isNil(o.RealizingResource) {
    return nil, false
	}
	return o.RealizingResource, true
}

// HasRealizingResource returns a boolean if a field has been set.
func (o *MissionAsset) HasRealizingResource() bool {
	if o != nil && !isNil(o.RealizingResource) {
		return true
	}

	return false
}

// SetRealizingResource gets a reference to the given []ResourceRef and assigns it to the RealizingResource field.
func (o *MissionAsset) SetRealizingResource(v []ResourceRef) {
	o.RealizingResource = v
}

// GetAssetRelationship returns the AssetRelationship field value if set, zero value otherwise.
func (o *MissionAsset) GetAssetRelationship() []MissionAssetRelationship {
	if o == nil || isNil(o.AssetRelationship) {
		var ret []MissionAssetRelationship
		return ret
	}
	return o.AssetRelationship
}

// GetAssetRelationshipOk returns a tuple with the AssetRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionAsset) GetAssetRelationshipOk() ([]MissionAssetRelationship, bool) {
	if o == nil || isNil(o.AssetRelationship) {
    return nil, false
	}
	return o.AssetRelationship, true
}

// HasAssetRelationship returns a boolean if a field has been set.
func (o *MissionAsset) HasAssetRelationship() bool {
	if o != nil && !isNil(o.AssetRelationship) {
		return true
	}

	return false
}

// SetAssetRelationship gets a reference to the given []MissionAssetRelationship and assigns it to the AssetRelationship field.
func (o *MissionAsset) SetAssetRelationship(v []MissionAssetRelationship) {
	o.AssetRelationship = v
}

func (o MissionAsset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.TargetProductSchema) {
		toSerialize["targetProductSchema"] = o.TargetProductSchema
	}
	if !isNil(o.ServicePeriod) {
		toSerialize["servicePeriod"] = o.ServicePeriod
	}
	if !isNil(o.Place) {
		toSerialize["place"] = o.Place
	}
	if !isNil(o.InquiredProductCharacteristic) {
		toSerialize["inquiredProductCharacteristic"] = o.InquiredProductCharacteristic
	}
	if !isNil(o.RealizingProduct) {
		toSerialize["realizingProduct"] = o.RealizingProduct
	}
	if !isNil(o.RealizingService) {
		toSerialize["realizingService"] = o.RealizingService
	}
	if !isNil(o.RealizingResource) {
		toSerialize["realizingResource"] = o.RealizingResource
	}
	if !isNil(o.AssetRelationship) {
		toSerialize["assetRelationship"] = o.AssetRelationship
	}
	return json.Marshal(toSerialize)
}

type NullableMissionAsset struct {
	value *MissionAsset
	isSet bool
}

func (v NullableMissionAsset) Get() *MissionAsset {
	return v.value
}

func (v *NullableMissionAsset) Set(val *MissionAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableMissionAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableMissionAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissionAsset(val *MissionAsset) *NullableMissionAsset {
	return &NullableMissionAsset{value: val, isSet: true}
}

func (v NullableMissionAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissionAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


