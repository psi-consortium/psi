/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Characteristic Describes a given characteristic of an object or entity through a name/value pair.
type Characteristic struct {
	// Unique identifier of the characteristic
	Id *string `json:"id,omitempty"`
	// Name of the characteristic
	Name string `json:"name"`
	// Data type of the value of the characteristic
	ValueType *string `json:"valueType,omitempty"`
	CharacteristicRelationship []CharacteristicRelationship `json:"characteristicRelationship,omitempty"`
	Value interface{} `json:"value"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// When sub-classing, this defines the sub-class Extensible name
	Type *string `json:"@type,omitempty"`
	// A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot.
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty"`
}

// NewCharacteristic instantiates a new Characteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacteristic(name string, value interface{}) *Characteristic {
	this := Characteristic{}
	this.Name = name
	this.Value = value
	return &this
}

// NewCharacteristicWithDefaults instantiates a new Characteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacteristicWithDefaults() *Characteristic {
	this := Characteristic{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Characteristic) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Characteristic) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Characteristic) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Characteristic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Characteristic) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Characteristic) SetName(v string) {
	o.Name = v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *Characteristic) GetValueType() string {
	if o == nil || isNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetValueTypeOk() (*string, bool) {
	if o == nil || isNil(o.ValueType) {
    return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *Characteristic) HasValueType() bool {
	if o != nil && !isNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *Characteristic) SetValueType(v string) {
	o.ValueType = &v
}

// GetCharacteristicRelationship returns the CharacteristicRelationship field value if set, zero value otherwise.
func (o *Characteristic) GetCharacteristicRelationship() []CharacteristicRelationship {
	if o == nil || isNil(o.CharacteristicRelationship) {
		var ret []CharacteristicRelationship
		return ret
	}
	return o.CharacteristicRelationship
}

// GetCharacteristicRelationshipOk returns a tuple with the CharacteristicRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetCharacteristicRelationshipOk() ([]CharacteristicRelationship, bool) {
	if o == nil || isNil(o.CharacteristicRelationship) {
    return nil, false
	}
	return o.CharacteristicRelationship, true
}

// HasCharacteristicRelationship returns a boolean if a field has been set.
func (o *Characteristic) HasCharacteristicRelationship() bool {
	if o != nil && !isNil(o.CharacteristicRelationship) {
		return true
	}

	return false
}

// SetCharacteristicRelationship gets a reference to the given []CharacteristicRelationship and assigns it to the CharacteristicRelationship field.
func (o *Characteristic) SetCharacteristicRelationship(v []CharacteristicRelationship) {
	o.CharacteristicRelationship = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Characteristic) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Characteristic) GetValueOk() (*interface{}, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Characteristic) SetValue(v interface{}) {
	o.Value = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *Characteristic) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *Characteristic) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *Characteristic) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *Characteristic) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *Characteristic) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *Characteristic) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Characteristic) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Characteristic) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Characteristic) SetType(v string) {
	o.Type = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *Characteristic) GetUnitOfMeasure() string {
	if o == nil || isNil(o.UnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Characteristic) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil || isNil(o.UnitOfMeasure) {
    return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *Characteristic) HasUnitOfMeasure() bool {
	if o != nil && !isNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given string and assigns it to the UnitOfMeasure field.
func (o *Characteristic) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = &v
}

func (o Characteristic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	if !isNil(o.CharacteristicRelationship) {
		toSerialize["characteristicRelationship"] = o.CharacteristicRelationship
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !isNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !isNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	return json.Marshal(toSerialize)
}

type NullableCharacteristic struct {
	value *Characteristic
	isSet bool
}

func (v NullableCharacteristic) Get() *Characteristic {
	return v.value
}

func (v *NullableCharacteristic) Set(val *Characteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacteristic(val *Characteristic) *NullableCharacteristic {
	return &NullableCharacteristic{value: val, isSet: true}
}

func (v NullableCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


