/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeographicLocation struct for GeographicLocation
type GeographicLocation struct {
	Place
	GeoJson *Geometry `json:"geoJson,omitempty"`
	// A bounding box array that contains the geometry. The axes order follows the axes order of the geometry
	Bbox []float32 `json:"bbox,omitempty"`
}

// NewGeographicLocation instantiates a new GeographicLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeographicLocation() *GeographicLocation {
	this := GeographicLocation{}
	return &this
}

// NewGeographicLocationWithDefaults instantiates a new GeographicLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeographicLocationWithDefaults() *GeographicLocation {
	this := GeographicLocation{}
	return &this
}

// GetGeoJson returns the GeoJson field value if set, zero value otherwise.
func (o *GeographicLocation) GetGeoJson() Geometry {
	if o == nil || isNil(o.GeoJson) {
		var ret Geometry
		return ret
	}
	return *o.GeoJson
}

// GetGeoJsonOk returns a tuple with the GeoJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicLocation) GetGeoJsonOk() (*Geometry, bool) {
	if o == nil || isNil(o.GeoJson) {
    return nil, false
	}
	return o.GeoJson, true
}

// HasGeoJson returns a boolean if a field has been set.
func (o *GeographicLocation) HasGeoJson() bool {
	if o != nil && !isNil(o.GeoJson) {
		return true
	}

	return false
}

// SetGeoJson gets a reference to the given Geometry and assigns it to the GeoJson field.
func (o *GeographicLocation) SetGeoJson(v Geometry) {
	o.GeoJson = &v
}

// GetBbox returns the Bbox field value if set, zero value otherwise.
func (o *GeographicLocation) GetBbox() []float32 {
	if o == nil || isNil(o.Bbox) {
		var ret []float32
		return ret
	}
	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicLocation) GetBboxOk() ([]float32, bool) {
	if o == nil || isNil(o.Bbox) {
    return nil, false
	}
	return o.Bbox, true
}

// HasBbox returns a boolean if a field has been set.
func (o *GeographicLocation) HasBbox() bool {
	if o != nil && !isNil(o.Bbox) {
		return true
	}

	return false
}

// SetBbox gets a reference to the given []float32 and assigns it to the Bbox field.
func (o *GeographicLocation) SetBbox(v []float32) {
	o.Bbox = v
}

func (o GeographicLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPlace, errPlace := json.Marshal(o.Place)
	if errPlace != nil {
		return []byte{}, errPlace
	}
	errPlace = json.Unmarshal([]byte(serializedPlace), &toSerialize)
	if errPlace != nil {
		return []byte{}, errPlace
	}
	if !isNil(o.GeoJson) {
		toSerialize["geoJson"] = o.GeoJson
	}
	if !isNil(o.Bbox) {
		toSerialize["bbox"] = o.Bbox
	}
	return json.Marshal(toSerialize)
}

type NullableGeographicLocation struct {
	value *GeographicLocation
	isSet bool
}

func (v NullableGeographicLocation) Get() *GeographicLocation {
	return v.value
}

func (v *NullableGeographicLocation) Set(val *GeographicLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeographicLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableGeographicLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeographicLocation(val *GeographicLocation) *NullableGeographicLocation {
	return &NullableGeographicLocation{value: val, isSet: true}
}

func (v NullableGeographicLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeographicLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


