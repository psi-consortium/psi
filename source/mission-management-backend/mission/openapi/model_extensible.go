/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Extensible Base Extensible schema for use in TMForum Open-APIs
type Extensible struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
}

// NewExtensible instantiates a new Extensible object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensible(type_ string) *Extensible {
	this := Extensible{}
	this.Type = type_
	return &this
}

// NewExtensibleWithDefaults instantiates a new Extensible object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensibleWithDefaults() *Extensible {
	this := Extensible{}
	return &this
}

// GetType returns the Type field value
func (o *Extensible) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Extensible) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Extensible) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *Extensible) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensible) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *Extensible) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *Extensible) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *Extensible) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensible) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *Extensible) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *Extensible) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

func (o Extensible) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["@type"] = o.Type
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	return json.Marshal(toSerialize)
}

type NullableExtensible struct {
	value *Extensible
	isSet bool
}

func (v NullableExtensible) Get() *Extensible {
	return v.value
}

func (v *NullableExtensible) Set(val *Extensible) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensible) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensible) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensible(val *Extensible) *NullableExtensible {
	return &NullableExtensible{value: val, isSet: true}
}

func (v NullableExtensible) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensible) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


