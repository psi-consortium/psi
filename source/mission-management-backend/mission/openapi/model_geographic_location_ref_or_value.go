/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GeographicLocationRefOrValue - The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself
type GeographicLocationRefOrValue struct {
	GeographicLocation *GeographicLocation
	GeographicLocationRef *GeographicLocationRef
}

// GeographicLocationAsGeographicLocationRefOrValue is a convenience function that returns GeographicLocation wrapped in GeographicLocationRefOrValue
func GeographicLocationAsGeographicLocationRefOrValue(v *GeographicLocation) GeographicLocationRefOrValue {
	return GeographicLocationRefOrValue{
		GeographicLocation: v,
	}
}

// GeographicLocationRefAsGeographicLocationRefOrValue is a convenience function that returns GeographicLocationRef wrapped in GeographicLocationRefOrValue
func GeographicLocationRefAsGeographicLocationRefOrValue(v *GeographicLocationRef) GeographicLocationRefOrValue {
	return GeographicLocationRefOrValue{
		GeographicLocationRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GeographicLocationRefOrValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GeographicLocation
	err = newStrictDecoder(data).Decode(&dst.GeographicLocation)
	if err == nil {
		jsonGeographicLocation, _ := json.Marshal(dst.GeographicLocation)
		if string(jsonGeographicLocation) == "{}" { // empty struct
			dst.GeographicLocation = nil
		} else {
			match++
		}
	} else {
		dst.GeographicLocation = nil
	}

	// try to unmarshal data into GeographicLocationRef
	err = newStrictDecoder(data).Decode(&dst.GeographicLocationRef)
	if err == nil {
		jsonGeographicLocationRef, _ := json.Marshal(dst.GeographicLocationRef)
		if string(jsonGeographicLocationRef) == "{}" { // empty struct
			dst.GeographicLocationRef = nil
		} else {
			match++
		}
	} else {
		dst.GeographicLocationRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GeographicLocation = nil
		dst.GeographicLocationRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GeographicLocationRefOrValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GeographicLocationRefOrValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GeographicLocationRefOrValue) MarshalJSON() ([]byte, error) {
	if src.GeographicLocation != nil {
		return json.Marshal(&src.GeographicLocation)
	}

	if src.GeographicLocationRef != nil {
		return json.Marshal(&src.GeographicLocationRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GeographicLocationRefOrValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GeographicLocation != nil {
		return obj.GeographicLocation
	}

	if obj.GeographicLocationRef != nil {
		return obj.GeographicLocationRef
	}

	// all schemas are nil
	return nil
}

type NullableGeographicLocationRefOrValue struct {
	value *GeographicLocationRefOrValue
	isSet bool
}

func (v NullableGeographicLocationRefOrValue) Get() *GeographicLocationRefOrValue {
	return v.value
}

func (v *NullableGeographicLocationRefOrValue) Set(val *GeographicLocationRefOrValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGeographicLocationRefOrValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGeographicLocationRefOrValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeographicLocationRefOrValue(val *GeographicLocationRefOrValue) *NullableGeographicLocationRefOrValue {
	return &NullableGeographicLocationRefOrValue{value: val, isSet: true}
}

func (v NullableGeographicLocationRefOrValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeographicLocationRefOrValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


