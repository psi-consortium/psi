/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PlaceRefOrValue - The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself
type PlaceRefOrValue struct {
	GeographicAddress *GeographicAddress
	GeographicLocation *GeographicLocation
	PlaceRef *PlaceRef
}

// GeographicAddressAsPlaceRefOrValue is a convenience function that returns GeographicAddress wrapped in PlaceRefOrValue
func GeographicAddressAsPlaceRefOrValue(v *GeographicAddress) PlaceRefOrValue {
	return PlaceRefOrValue{
		GeographicAddress: v,
	}
}

// GeographicLocationAsPlaceRefOrValue is a convenience function that returns GeographicLocation wrapped in PlaceRefOrValue
func GeographicLocationAsPlaceRefOrValue(v *GeographicLocation) PlaceRefOrValue {
	return PlaceRefOrValue{
		GeographicLocation: v,
	}
}

// PlaceRefAsPlaceRefOrValue is a convenience function that returns PlaceRef wrapped in PlaceRefOrValue
func PlaceRefAsPlaceRefOrValue(v *PlaceRef) PlaceRefOrValue {
	return PlaceRefOrValue{
		PlaceRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PlaceRefOrValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GeographicAddress
	err = newStrictDecoder(data).Decode(&dst.GeographicAddress)
	if err == nil {
		jsonGeographicAddress, _ := json.Marshal(dst.GeographicAddress)
		if string(jsonGeographicAddress) == "{}" { // empty struct
			dst.GeographicAddress = nil
		} else {
			match++
		}
	} else {
		dst.GeographicAddress = nil
	}

	// try to unmarshal data into GeographicLocation
	err = newStrictDecoder(data).Decode(&dst.GeographicLocation)
	if err == nil {
		jsonGeographicLocation, _ := json.Marshal(dst.GeographicLocation)
		if string(jsonGeographicLocation) == "{}" { // empty struct
			dst.GeographicLocation = nil
		} else {
			match++
		}
	} else {
		dst.GeographicLocation = nil
	}

	// try to unmarshal data into PlaceRef
	err = newStrictDecoder(data).Decode(&dst.PlaceRef)
	if err == nil {
		jsonPlaceRef, _ := json.Marshal(dst.PlaceRef)
		if string(jsonPlaceRef) == "{}" { // empty struct
			dst.PlaceRef = nil
		} else {
			match++
		}
	} else {
		dst.PlaceRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GeographicAddress = nil
		dst.GeographicLocation = nil
		dst.PlaceRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PlaceRefOrValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PlaceRefOrValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PlaceRefOrValue) MarshalJSON() ([]byte, error) {
	if src.GeographicAddress != nil {
		return json.Marshal(&src.GeographicAddress)
	}

	if src.GeographicLocation != nil {
		return json.Marshal(&src.GeographicLocation)
	}

	if src.PlaceRef != nil {
		return json.Marshal(&src.PlaceRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PlaceRefOrValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GeographicAddress != nil {
		return obj.GeographicAddress
	}

	if obj.GeographicLocation != nil {
		return obj.GeographicLocation
	}

	if obj.PlaceRef != nil {
		return obj.PlaceRef
	}

	// all schemas are nil
	return nil
}

type NullablePlaceRefOrValue struct {
	value *PlaceRefOrValue
	isSet bool
}

func (v NullablePlaceRefOrValue) Get() *PlaceRefOrValue {
	return v.value
}

func (v *NullablePlaceRefOrValue) Set(val *PlaceRefOrValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceRefOrValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceRefOrValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceRefOrValue(val *PlaceRefOrValue) *NullablePlaceRefOrValue {
	return &NullablePlaceRefOrValue{value: val, isSet: true}
}

func (v NullablePlaceRefOrValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceRefOrValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


