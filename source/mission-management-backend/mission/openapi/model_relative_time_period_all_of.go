/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelativeTimePeriodAllOf struct for RelativeTimePeriodAllOf
type RelativeTimePeriodAllOf struct {
	// Relative start of the time period, using IETC-RFC-3339 duration format.
	StartOffset *string `json:"startOffset,omitempty"`
	// Reference for startDateTime, e.g. 'mission.startDateTime', 'mission.endDateTime', 'self.endDateTime' or 'asset[1234].startTime'.
	StartAnchor *string `json:"startAnchor,omitempty"`
	// Relative end of the time period, using IETC-RFC-3339 duration format.
	EndOffset *string `json:"endOffset,omitempty"`
	// Reference for endDateTime, e.g. 'mission.startDateTime', 'mission.endDateTime', 'self.startDateTime' or 'asset[1234].endTime'.
	EndAnchor *string `json:"endAnchor,omitempty"`
}

// NewRelativeTimePeriodAllOf instantiates a new RelativeTimePeriodAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelativeTimePeriodAllOf() *RelativeTimePeriodAllOf {
	this := RelativeTimePeriodAllOf{}
	return &this
}

// NewRelativeTimePeriodAllOfWithDefaults instantiates a new RelativeTimePeriodAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelativeTimePeriodAllOfWithDefaults() *RelativeTimePeriodAllOf {
	this := RelativeTimePeriodAllOf{}
	return &this
}

// GetStartOffset returns the StartOffset field value if set, zero value otherwise.
func (o *RelativeTimePeriodAllOf) GetStartOffset() string {
	if o == nil || isNil(o.StartOffset) {
		var ret string
		return ret
	}
	return *o.StartOffset
}

// GetStartOffsetOk returns a tuple with the StartOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeTimePeriodAllOf) GetStartOffsetOk() (*string, bool) {
	if o == nil || isNil(o.StartOffset) {
    return nil, false
	}
	return o.StartOffset, true
}

// HasStartOffset returns a boolean if a field has been set.
func (o *RelativeTimePeriodAllOf) HasStartOffset() bool {
	if o != nil && !isNil(o.StartOffset) {
		return true
	}

	return false
}

// SetStartOffset gets a reference to the given string and assigns it to the StartOffset field.
func (o *RelativeTimePeriodAllOf) SetStartOffset(v string) {
	o.StartOffset = &v
}

// GetStartAnchor returns the StartAnchor field value if set, zero value otherwise.
func (o *RelativeTimePeriodAllOf) GetStartAnchor() string {
	if o == nil || isNil(o.StartAnchor) {
		var ret string
		return ret
	}
	return *o.StartAnchor
}

// GetStartAnchorOk returns a tuple with the StartAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeTimePeriodAllOf) GetStartAnchorOk() (*string, bool) {
	if o == nil || isNil(o.StartAnchor) {
    return nil, false
	}
	return o.StartAnchor, true
}

// HasStartAnchor returns a boolean if a field has been set.
func (o *RelativeTimePeriodAllOf) HasStartAnchor() bool {
	if o != nil && !isNil(o.StartAnchor) {
		return true
	}

	return false
}

// SetStartAnchor gets a reference to the given string and assigns it to the StartAnchor field.
func (o *RelativeTimePeriodAllOf) SetStartAnchor(v string) {
	o.StartAnchor = &v
}

// GetEndOffset returns the EndOffset field value if set, zero value otherwise.
func (o *RelativeTimePeriodAllOf) GetEndOffset() string {
	if o == nil || isNil(o.EndOffset) {
		var ret string
		return ret
	}
	return *o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeTimePeriodAllOf) GetEndOffsetOk() (*string, bool) {
	if o == nil || isNil(o.EndOffset) {
    return nil, false
	}
	return o.EndOffset, true
}

// HasEndOffset returns a boolean if a field has been set.
func (o *RelativeTimePeriodAllOf) HasEndOffset() bool {
	if o != nil && !isNil(o.EndOffset) {
		return true
	}

	return false
}

// SetEndOffset gets a reference to the given string and assigns it to the EndOffset field.
func (o *RelativeTimePeriodAllOf) SetEndOffset(v string) {
	o.EndOffset = &v
}

// GetEndAnchor returns the EndAnchor field value if set, zero value otherwise.
func (o *RelativeTimePeriodAllOf) GetEndAnchor() string {
	if o == nil || isNil(o.EndAnchor) {
		var ret string
		return ret
	}
	return *o.EndAnchor
}

// GetEndAnchorOk returns a tuple with the EndAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeTimePeriodAllOf) GetEndAnchorOk() (*string, bool) {
	if o == nil || isNil(o.EndAnchor) {
    return nil, false
	}
	return o.EndAnchor, true
}

// HasEndAnchor returns a boolean if a field has been set.
func (o *RelativeTimePeriodAllOf) HasEndAnchor() bool {
	if o != nil && !isNil(o.EndAnchor) {
		return true
	}

	return false
}

// SetEndAnchor gets a reference to the given string and assigns it to the EndAnchor field.
func (o *RelativeTimePeriodAllOf) SetEndAnchor(v string) {
	o.EndAnchor = &v
}

func (o RelativeTimePeriodAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StartOffset) {
		toSerialize["startOffset"] = o.StartOffset
	}
	if !isNil(o.StartAnchor) {
		toSerialize["startAnchor"] = o.StartAnchor
	}
	if !isNil(o.EndOffset) {
		toSerialize["endOffset"] = o.EndOffset
	}
	if !isNil(o.EndAnchor) {
		toSerialize["endAnchor"] = o.EndAnchor
	}
	return json.Marshal(toSerialize)
}

type NullableRelativeTimePeriodAllOf struct {
	value *RelativeTimePeriodAllOf
	isSet bool
}

func (v NullableRelativeTimePeriodAllOf) Get() *RelativeTimePeriodAllOf {
	return v.value
}

func (v *NullableRelativeTimePeriodAllOf) Set(val *RelativeTimePeriodAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRelativeTimePeriodAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRelativeTimePeriodAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelativeTimePeriodAllOf(val *RelativeTimePeriodAllOf) *NullableRelativeTimePeriodAllOf {
	return &NullableRelativeTimePeriodAllOf{value: val, isSet: true}
}

func (v NullableRelativeTimePeriodAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelativeTimePeriodAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


