/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeographicAddressAllOf Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently). Note : Address corresponds to SID UrbanPropertyAddress
type GeographicAddressAllOf struct {
	// City that the address is in
	City *string `json:"city,omitempty"`
	// Country that the address is in
	Country *string `json:"country,omitempty"`
	// An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]
	Locality *string `json:"locality,omitempty"`
	// descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)
	Postcode *string `json:"postcode,omitempty"`
	// the State or Province that the address is in
	StateOrProvince *string `json:"stateOrProvince,omitempty"`
	// Name of the street or other street type
	StreetName *string `json:"streetName,omitempty"`
	// Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses
	StreetNr *string `json:"streetNr,omitempty"`
	// Last number in a range of street numbers allocated to a property
	StreetNrLast *string `json:"streetNrLast,omitempty"`
	// Last street number suffix for a ranged address
	StreetNrLastSuffix *string `json:"streetNrLastSuffix,omitempty"`
	// the first street number suffix
	StreetNrSuffix *string `json:"streetNrSuffix,omitempty"`
	// A modifier denoting a relative direction
	StreetSuffix *string `json:"streetSuffix,omitempty"`
	// alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf 
	StreetType *string `json:"streetType,omitempty"`
	GeographicLocation *GeographicLocationRefOrValue `json:"geographicLocation,omitempty"`
	// Classification of the address, e.g., residential, industrial 
	GeographicAddressType *string `json:"geographicAddressType,omitempty"`
}

// NewGeographicAddressAllOf instantiates a new GeographicAddressAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeographicAddressAllOf() *GeographicAddressAllOf {
	this := GeographicAddressAllOf{}
	return &this
}

// NewGeographicAddressAllOfWithDefaults instantiates a new GeographicAddressAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeographicAddressAllOfWithDefaults() *GeographicAddressAllOf {
	this := GeographicAddressAllOf{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetCity() string {
	if o == nil || isNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetCityOk() (*string, bool) {
	if o == nil || isNil(o.City) {
    return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasCity() bool {
	if o != nil && !isNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *GeographicAddressAllOf) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *GeographicAddressAllOf) SetCountry(v string) {
	o.Country = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetLocality() string {
	if o == nil || isNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetLocalityOk() (*string, bool) {
	if o == nil || isNil(o.Locality) {
    return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasLocality() bool {
	if o != nil && !isNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *GeographicAddressAllOf) SetLocality(v string) {
	o.Locality = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetPostcode() string {
	if o == nil || isNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetPostcodeOk() (*string, bool) {
	if o == nil || isNil(o.Postcode) {
    return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasPostcode() bool {
	if o != nil && !isNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *GeographicAddressAllOf) SetPostcode(v string) {
	o.Postcode = &v
}

// GetStateOrProvince returns the StateOrProvince field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStateOrProvince() string {
	if o == nil || isNil(o.StateOrProvince) {
		var ret string
		return ret
	}
	return *o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStateOrProvinceOk() (*string, bool) {
	if o == nil || isNil(o.StateOrProvince) {
    return nil, false
	}
	return o.StateOrProvince, true
}

// HasStateOrProvince returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStateOrProvince() bool {
	if o != nil && !isNil(o.StateOrProvince) {
		return true
	}

	return false
}

// SetStateOrProvince gets a reference to the given string and assigns it to the StateOrProvince field.
func (o *GeographicAddressAllOf) SetStateOrProvince(v string) {
	o.StateOrProvince = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetName() string {
	if o == nil || isNil(o.StreetName) {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetNameOk() (*string, bool) {
	if o == nil || isNil(o.StreetName) {
    return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetName() bool {
	if o != nil && !isNil(o.StreetName) {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *GeographicAddressAllOf) SetStreetName(v string) {
	o.StreetName = &v
}

// GetStreetNr returns the StreetNr field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetNr() string {
	if o == nil || isNil(o.StreetNr) {
		var ret string
		return ret
	}
	return *o.StreetNr
}

// GetStreetNrOk returns a tuple with the StreetNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetNrOk() (*string, bool) {
	if o == nil || isNil(o.StreetNr) {
    return nil, false
	}
	return o.StreetNr, true
}

// HasStreetNr returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetNr() bool {
	if o != nil && !isNil(o.StreetNr) {
		return true
	}

	return false
}

// SetStreetNr gets a reference to the given string and assigns it to the StreetNr field.
func (o *GeographicAddressAllOf) SetStreetNr(v string) {
	o.StreetNr = &v
}

// GetStreetNrLast returns the StreetNrLast field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetNrLast() string {
	if o == nil || isNil(o.StreetNrLast) {
		var ret string
		return ret
	}
	return *o.StreetNrLast
}

// GetStreetNrLastOk returns a tuple with the StreetNrLast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetNrLastOk() (*string, bool) {
	if o == nil || isNil(o.StreetNrLast) {
    return nil, false
	}
	return o.StreetNrLast, true
}

// HasStreetNrLast returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetNrLast() bool {
	if o != nil && !isNil(o.StreetNrLast) {
		return true
	}

	return false
}

// SetStreetNrLast gets a reference to the given string and assigns it to the StreetNrLast field.
func (o *GeographicAddressAllOf) SetStreetNrLast(v string) {
	o.StreetNrLast = &v
}

// GetStreetNrLastSuffix returns the StreetNrLastSuffix field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetNrLastSuffix() string {
	if o == nil || isNil(o.StreetNrLastSuffix) {
		var ret string
		return ret
	}
	return *o.StreetNrLastSuffix
}

// GetStreetNrLastSuffixOk returns a tuple with the StreetNrLastSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetNrLastSuffixOk() (*string, bool) {
	if o == nil || isNil(o.StreetNrLastSuffix) {
    return nil, false
	}
	return o.StreetNrLastSuffix, true
}

// HasStreetNrLastSuffix returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetNrLastSuffix() bool {
	if o != nil && !isNil(o.StreetNrLastSuffix) {
		return true
	}

	return false
}

// SetStreetNrLastSuffix gets a reference to the given string and assigns it to the StreetNrLastSuffix field.
func (o *GeographicAddressAllOf) SetStreetNrLastSuffix(v string) {
	o.StreetNrLastSuffix = &v
}

// GetStreetNrSuffix returns the StreetNrSuffix field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetNrSuffix() string {
	if o == nil || isNil(o.StreetNrSuffix) {
		var ret string
		return ret
	}
	return *o.StreetNrSuffix
}

// GetStreetNrSuffixOk returns a tuple with the StreetNrSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetNrSuffixOk() (*string, bool) {
	if o == nil || isNil(o.StreetNrSuffix) {
    return nil, false
	}
	return o.StreetNrSuffix, true
}

// HasStreetNrSuffix returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetNrSuffix() bool {
	if o != nil && !isNil(o.StreetNrSuffix) {
		return true
	}

	return false
}

// SetStreetNrSuffix gets a reference to the given string and assigns it to the StreetNrSuffix field.
func (o *GeographicAddressAllOf) SetStreetNrSuffix(v string) {
	o.StreetNrSuffix = &v
}

// GetStreetSuffix returns the StreetSuffix field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetSuffix() string {
	if o == nil || isNil(o.StreetSuffix) {
		var ret string
		return ret
	}
	return *o.StreetSuffix
}

// GetStreetSuffixOk returns a tuple with the StreetSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetSuffixOk() (*string, bool) {
	if o == nil || isNil(o.StreetSuffix) {
    return nil, false
	}
	return o.StreetSuffix, true
}

// HasStreetSuffix returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetSuffix() bool {
	if o != nil && !isNil(o.StreetSuffix) {
		return true
	}

	return false
}

// SetStreetSuffix gets a reference to the given string and assigns it to the StreetSuffix field.
func (o *GeographicAddressAllOf) SetStreetSuffix(v string) {
	o.StreetSuffix = &v
}

// GetStreetType returns the StreetType field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetStreetType() string {
	if o == nil || isNil(o.StreetType) {
		var ret string
		return ret
	}
	return *o.StreetType
}

// GetStreetTypeOk returns a tuple with the StreetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetStreetTypeOk() (*string, bool) {
	if o == nil || isNil(o.StreetType) {
    return nil, false
	}
	return o.StreetType, true
}

// HasStreetType returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasStreetType() bool {
	if o != nil && !isNil(o.StreetType) {
		return true
	}

	return false
}

// SetStreetType gets a reference to the given string and assigns it to the StreetType field.
func (o *GeographicAddressAllOf) SetStreetType(v string) {
	o.StreetType = &v
}

// GetGeographicLocation returns the GeographicLocation field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetGeographicLocation() GeographicLocationRefOrValue {
	if o == nil || isNil(o.GeographicLocation) {
		var ret GeographicLocationRefOrValue
		return ret
	}
	return *o.GeographicLocation
}

// GetGeographicLocationOk returns a tuple with the GeographicLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetGeographicLocationOk() (*GeographicLocationRefOrValue, bool) {
	if o == nil || isNil(o.GeographicLocation) {
    return nil, false
	}
	return o.GeographicLocation, true
}

// HasGeographicLocation returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasGeographicLocation() bool {
	if o != nil && !isNil(o.GeographicLocation) {
		return true
	}

	return false
}

// SetGeographicLocation gets a reference to the given GeographicLocationRefOrValue and assigns it to the GeographicLocation field.
func (o *GeographicAddressAllOf) SetGeographicLocation(v GeographicLocationRefOrValue) {
	o.GeographicLocation = &v
}

// GetGeographicAddressType returns the GeographicAddressType field value if set, zero value otherwise.
func (o *GeographicAddressAllOf) GetGeographicAddressType() string {
	if o == nil || isNil(o.GeographicAddressType) {
		var ret string
		return ret
	}
	return *o.GeographicAddressType
}

// GetGeographicAddressTypeOk returns a tuple with the GeographicAddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressAllOf) GetGeographicAddressTypeOk() (*string, bool) {
	if o == nil || isNil(o.GeographicAddressType) {
    return nil, false
	}
	return o.GeographicAddressType, true
}

// HasGeographicAddressType returns a boolean if a field has been set.
func (o *GeographicAddressAllOf) HasGeographicAddressType() bool {
	if o != nil && !isNil(o.GeographicAddressType) {
		return true
	}

	return false
}

// SetGeographicAddressType gets a reference to the given string and assigns it to the GeographicAddressType field.
func (o *GeographicAddressAllOf) SetGeographicAddressType(v string) {
	o.GeographicAddressType = &v
}

func (o GeographicAddressAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !isNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !isNil(o.StateOrProvince) {
		toSerialize["stateOrProvince"] = o.StateOrProvince
	}
	if !isNil(o.StreetName) {
		toSerialize["streetName"] = o.StreetName
	}
	if !isNil(o.StreetNr) {
		toSerialize["streetNr"] = o.StreetNr
	}
	if !isNil(o.StreetNrLast) {
		toSerialize["streetNrLast"] = o.StreetNrLast
	}
	if !isNil(o.StreetNrLastSuffix) {
		toSerialize["streetNrLastSuffix"] = o.StreetNrLastSuffix
	}
	if !isNil(o.StreetNrSuffix) {
		toSerialize["streetNrSuffix"] = o.StreetNrSuffix
	}
	if !isNil(o.StreetSuffix) {
		toSerialize["streetSuffix"] = o.StreetSuffix
	}
	if !isNil(o.StreetType) {
		toSerialize["streetType"] = o.StreetType
	}
	if !isNil(o.GeographicLocation) {
		toSerialize["geographicLocation"] = o.GeographicLocation
	}
	if !isNil(o.GeographicAddressType) {
		toSerialize["geographicAddressType"] = o.GeographicAddressType
	}
	return json.Marshal(toSerialize)
}

type NullableGeographicAddressAllOf struct {
	value *GeographicAddressAllOf
	isSet bool
}

func (v NullableGeographicAddressAllOf) Get() *GeographicAddressAllOf {
	return v.value
}

func (v *NullableGeographicAddressAllOf) Set(val *GeographicAddressAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGeographicAddressAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGeographicAddressAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeographicAddressAllOf(val *GeographicAddressAllOf) *NullableGeographicAddressAllOf {
	return &NullableGeographicAddressAllOf{value: val, isSet: true}
}

func (v NullableGeographicAddressAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeographicAddressAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


