/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceRef struct for ResourceRef
type ResourceRef struct {
	// unique identifier
	Id string `json:"id"`
	// Hyperlink reference
	Href *string `json:"href,omitempty"`
	// Name of the resource
	Name *string `json:"name,omitempty"`
	// The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)
	Value *string `json:"value,omitempty"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// When sub-classing, this defines the sub-class Extensible name
	Type *string `json:"@type,omitempty"`
	// The actual type of the target instance when needed for disambiguation.
	ReferredType *string `json:"@referredType,omitempty"`
}

// NewResourceRef instantiates a new ResourceRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRef(id string) *ResourceRef {
	this := ResourceRef{}
	this.Id = id
	return &this
}

// NewResourceRefWithDefaults instantiates a new ResourceRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRefWithDefaults() *ResourceRef {
	this := ResourceRef{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceRef) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceRef) SetId(v string) {
	o.Id = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ResourceRef) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ResourceRef) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ResourceRef) SetHref(v string) {
	o.Href = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceRef) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceRef) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceRef) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ResourceRef) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ResourceRef) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ResourceRef) SetValue(v string) {
	o.Value = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *ResourceRef) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *ResourceRef) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *ResourceRef) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *ResourceRef) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *ResourceRef) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *ResourceRef) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceRef) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceRef) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceRef) SetType(v string) {
	o.Type = &v
}

// GetReferredType returns the ReferredType field value if set, zero value otherwise.
func (o *ResourceRef) GetReferredType() string {
	if o == nil || isNil(o.ReferredType) {
		var ret string
		return ret
	}
	return *o.ReferredType
}

// GetReferredTypeOk returns a tuple with the ReferredType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetReferredTypeOk() (*string, bool) {
	if o == nil || isNil(o.ReferredType) {
    return nil, false
	}
	return o.ReferredType, true
}

// HasReferredType returns a boolean if a field has been set.
func (o *ResourceRef) HasReferredType() bool {
	if o != nil && !isNil(o.ReferredType) {
		return true
	}

	return false
}

// SetReferredType gets a reference to the given string and assigns it to the ReferredType field.
func (o *ResourceRef) SetReferredType(v string) {
	o.ReferredType = &v
}

func (o ResourceRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !isNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !isNil(o.ReferredType) {
		toSerialize["@referredType"] = o.ReferredType
	}
	return json.Marshal(toSerialize)
}

type NullableResourceRef struct {
	value *ResourceRef
	isSet bool
}

func (v NullableResourceRef) Get() *ResourceRef {
	return v.value
}

func (v *NullableResourceRef) Set(val *ResourceRef) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRef) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRef(val *ResourceRef) *NullableResourceRef {
	return &NullableResourceRef{value: val, isSet: true}
}

func (v NullableResourceRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


