/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelatedPlaceRefOrValue Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself
type RelatedPlaceRefOrValue struct {
	// Unique identifier of the place
	Id *string `json:"id,omitempty"`
	// Unique reference of the place
	Href *string `json:"href,omitempty"`
	// A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]
	Name *string `json:"name,omitempty"`
	Role string `json:"role"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// When sub-classing, this defines the sub-class Extensible name
	Type *string `json:"@type,omitempty"`
	// The actual type of the target instance when needed for disambiguation.
	ReferredType *string `json:"@referredType,omitempty"`
}

// NewRelatedPlaceRefOrValue instantiates a new RelatedPlaceRefOrValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedPlaceRefOrValue(role string) *RelatedPlaceRefOrValue {
	this := RelatedPlaceRefOrValue{}
	this.Role = role
	return &this
}

// NewRelatedPlaceRefOrValueWithDefaults instantiates a new RelatedPlaceRefOrValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedPlaceRefOrValueWithDefaults() *RelatedPlaceRefOrValue {
	this := RelatedPlaceRefOrValue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RelatedPlaceRefOrValue) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RelatedPlaceRefOrValue) SetHref(v string) {
	o.Href = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelatedPlaceRefOrValue) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value
func (o *RelatedPlaceRefOrValue) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetRoleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RelatedPlaceRefOrValue) SetRole(v string) {
	o.Role = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *RelatedPlaceRefOrValue) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *RelatedPlaceRefOrValue) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RelatedPlaceRefOrValue) SetType(v string) {
	o.Type = &v
}

// GetReferredType returns the ReferredType field value if set, zero value otherwise.
func (o *RelatedPlaceRefOrValue) GetReferredType() string {
	if o == nil || isNil(o.ReferredType) {
		var ret string
		return ret
	}
	return *o.ReferredType
}

// GetReferredTypeOk returns a tuple with the ReferredType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPlaceRefOrValue) GetReferredTypeOk() (*string, bool) {
	if o == nil || isNil(o.ReferredType) {
    return nil, false
	}
	return o.ReferredType, true
}

// HasReferredType returns a boolean if a field has been set.
func (o *RelatedPlaceRefOrValue) HasReferredType() bool {
	if o != nil && !isNil(o.ReferredType) {
		return true
	}

	return false
}

// SetReferredType gets a reference to the given string and assigns it to the ReferredType field.
func (o *RelatedPlaceRefOrValue) SetReferredType(v string) {
	o.ReferredType = &v
}

func (o RelatedPlaceRefOrValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !isNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !isNil(o.ReferredType) {
		toSerialize["@referredType"] = o.ReferredType
	}
	return json.Marshal(toSerialize)
}

type NullableRelatedPlaceRefOrValue struct {
	value *RelatedPlaceRefOrValue
	isSet bool
}

func (v NullableRelatedPlaceRefOrValue) Get() *RelatedPlaceRefOrValue {
	return v.value
}

func (v *NullableRelatedPlaceRefOrValue) Set(val *RelatedPlaceRefOrValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedPlaceRefOrValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedPlaceRefOrValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedPlaceRefOrValue(val *RelatedPlaceRefOrValue) *NullableRelatedPlaceRefOrValue {
	return &NullableRelatedPlaceRefOrValue{value: val, isSet: true}
}

func (v NullableRelatedPlaceRefOrValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedPlaceRefOrValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


