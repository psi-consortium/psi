/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MissionRelationship struct for MissionRelationship
type MissionRelationship struct {
	// Unique identifier of the Mission
	Id *string `json:"id,omitempty"`
	// Reference of the Mission
	Href *string `json:"href,omitempty"`
	// Name of the Mission
	Name *string `json:"name,omitempty"`
	// Type of the Mission relationship can be isChild, dependent etc...
	RelationshipType *string `json:"relationshipType,omitempty"`
}

// NewMissionRelationship instantiates a new MissionRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissionRelationship() *MissionRelationship {
	this := MissionRelationship{}
	return &this
}

// NewMissionRelationshipWithDefaults instantiates a new MissionRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissionRelationshipWithDefaults() *MissionRelationship {
	this := MissionRelationship{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MissionRelationship) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionRelationship) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MissionRelationship) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MissionRelationship) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *MissionRelationship) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionRelationship) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *MissionRelationship) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *MissionRelationship) SetHref(v string) {
	o.Href = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MissionRelationship) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionRelationship) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MissionRelationship) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MissionRelationship) SetName(v string) {
	o.Name = &v
}

// GetRelationshipType returns the RelationshipType field value if set, zero value otherwise.
func (o *MissionRelationship) GetRelationshipType() string {
	if o == nil || isNil(o.RelationshipType) {
		var ret string
		return ret
	}
	return *o.RelationshipType
}

// GetRelationshipTypeOk returns a tuple with the RelationshipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissionRelationship) GetRelationshipTypeOk() (*string, bool) {
	if o == nil || isNil(o.RelationshipType) {
    return nil, false
	}
	return o.RelationshipType, true
}

// HasRelationshipType returns a boolean if a field has been set.
func (o *MissionRelationship) HasRelationshipType() bool {
	if o != nil && !isNil(o.RelationshipType) {
		return true
	}

	return false
}

// SetRelationshipType gets a reference to the given string and assigns it to the RelationshipType field.
func (o *MissionRelationship) SetRelationshipType(v string) {
	o.RelationshipType = &v
}

func (o MissionRelationship) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.RelationshipType) {
		toSerialize["relationshipType"] = o.RelationshipType
	}
	return json.Marshal(toSerialize)
}

type NullableMissionRelationship struct {
	value *MissionRelationship
	isSet bool
}

func (v NullableMissionRelationship) Get() *MissionRelationship {
	return v.value
}

func (v *NullableMissionRelationship) Set(val *MissionRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableMissionRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableMissionRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissionRelationship(val *MissionRelationship) *NullableMissionRelationship {
	return &NullableMissionRelationship{value: val, isSet: true}
}

func (v NullableMissionRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissionRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


