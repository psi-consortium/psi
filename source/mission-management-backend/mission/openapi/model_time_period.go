/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TimePeriod A period of time, either as a deadline (endDateTime only) a startDateTime only, or both
type TimePeriod struct {
	// End of the time period, using IETC-RFC-3339 format
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// Start of the time period, using IETC-RFC-3339 format
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// NewTimePeriod instantiates a new TimePeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimePeriod() *TimePeriod {
	this := TimePeriod{}
	return &this
}

// NewTimePeriodWithDefaults instantiates a new TimePeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimePeriodWithDefaults() *TimePeriod {
	this := TimePeriod{}
	return &this
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *TimePeriod) GetEndDateTime() time.Time {
	if o == nil || isNil(o.EndDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimePeriod) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.EndDateTime) {
    return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *TimePeriod) HasEndDateTime() bool {
	if o != nil && !isNil(o.EndDateTime) {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given time.Time and assigns it to the EndDateTime field.
func (o *TimePeriod) SetEndDateTime(v time.Time) {
	o.EndDateTime = &v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *TimePeriod) GetStartDateTime() time.Time {
	if o == nil || isNil(o.StartDateTime) {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimePeriod) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.StartDateTime) {
    return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *TimePeriod) HasStartDateTime() bool {
	if o != nil && !isNil(o.StartDateTime) {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given time.Time and assigns it to the StartDateTime field.
func (o *TimePeriod) SetStartDateTime(v time.Time) {
	o.StartDateTime = &v
}

func (o TimePeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EndDateTime) {
		toSerialize["endDateTime"] = o.EndDateTime
	}
	if !isNil(o.StartDateTime) {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	return json.Marshal(toSerialize)
}

type NullableTimePeriod struct {
	value *TimePeriod
	isSet bool
}

func (v NullableTimePeriod) Get() *TimePeriod {
	return v.value
}

func (v *NullableTimePeriod) Set(val *TimePeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableTimePeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableTimePeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimePeriod(val *TimePeriod) *NullableTimePeriod {
	return &NullableTimePeriod{value: val, isSet: true}
}

func (v NullableTimePeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimePeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


