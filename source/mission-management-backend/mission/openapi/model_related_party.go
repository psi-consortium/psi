/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelatedParty Related Party reference. A related party defines party or party role linked to a specific entity.
type RelatedParty struct {
	// unique identifier
	Id string `json:"id"`
	// Hyperlink reference
	Href *string `json:"href,omitempty"`
	// Name of the related entity.
	Name *string `json:"name,omitempty"`
	// Role played by the related party
	Role *string `json:"role,omitempty"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// When sub-classing, this defines the sub-class Extensible name
	Type *string `json:"@type,omitempty"`
	// The actual type of the target instance when needed for disambiguation.
	ReferredType string `json:"@referredType"`
}

// NewRelatedParty instantiates a new RelatedParty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedParty(id string, referredType string) *RelatedParty {
	this := RelatedParty{}
	this.Id = id
	this.ReferredType = referredType
	return &this
}

// NewRelatedPartyWithDefaults instantiates a new RelatedParty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedPartyWithDefaults() *RelatedParty {
	this := RelatedParty{}
	return &this
}

// GetId returns the Id field value
func (o *RelatedParty) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelatedParty) SetId(v string) {
	o.Id = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RelatedParty) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RelatedParty) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RelatedParty) SetHref(v string) {
	o.Href = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelatedParty) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelatedParty) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelatedParty) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RelatedParty) GetRole() string {
	if o == nil || isNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetRoleOk() (*string, bool) {
	if o == nil || isNil(o.Role) {
    return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RelatedParty) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RelatedParty) SetRole(v string) {
	o.Role = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *RelatedParty) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *RelatedParty) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *RelatedParty) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *RelatedParty) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *RelatedParty) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *RelatedParty) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RelatedParty) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RelatedParty) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RelatedParty) SetType(v string) {
	o.Type = &v
}

// GetReferredType returns the ReferredType field value
func (o *RelatedParty) GetReferredType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferredType
}

// GetReferredTypeOk returns a tuple with the ReferredType field value
// and a boolean to check if the value has been set.
func (o *RelatedParty) GetReferredTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReferredType, true
}

// SetReferredType sets field value
func (o *RelatedParty) SetReferredType(v string) {
	o.ReferredType = v
}

func (o RelatedParty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !isNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if true {
		toSerialize["@referredType"] = o.ReferredType
	}
	return json.Marshal(toSerialize)
}

type NullableRelatedParty struct {
	value *RelatedParty
	isSet bool
}

func (v NullableRelatedParty) Get() *RelatedParty {
	return v.value
}

func (v *NullableRelatedParty) Set(val *RelatedParty) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedParty) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedParty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedParty(val *RelatedParty) *NullableRelatedParty {
	return &NullableRelatedParty{value: val, isSet: true}
}

func (v NullableRelatedParty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedParty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


