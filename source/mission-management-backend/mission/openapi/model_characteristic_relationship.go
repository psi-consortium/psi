/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CharacteristicRelationship Another Characteristic that is related to the current Characteristic;
type CharacteristicRelationship struct {
	// Unique identifier of the characteristic
	Id *string `json:"id,omitempty"`
	// Hyperlink reference
	Href *string `json:"href,omitempty"`
	// The type of relationship
	RelationshipType *string `json:"relationshipType,omitempty"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// When sub-classing, this defines the sub-class Extensible name
	Type *string `json:"@type,omitempty"`
}

// NewCharacteristicRelationship instantiates a new CharacteristicRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacteristicRelationship() *CharacteristicRelationship {
	this := CharacteristicRelationship{}
	return &this
}

// NewCharacteristicRelationshipWithDefaults instantiates a new CharacteristicRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacteristicRelationshipWithDefaults() *CharacteristicRelationship {
	this := CharacteristicRelationship{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CharacteristicRelationship) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
    return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CharacteristicRelationship) SetHref(v string) {
	o.Href = &v
}

// GetRelationshipType returns the RelationshipType field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetRelationshipType() string {
	if o == nil || isNil(o.RelationshipType) {
		var ret string
		return ret
	}
	return *o.RelationshipType
}

// GetRelationshipTypeOk returns a tuple with the RelationshipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetRelationshipTypeOk() (*string, bool) {
	if o == nil || isNil(o.RelationshipType) {
    return nil, false
	}
	return o.RelationshipType, true
}

// HasRelationshipType returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasRelationshipType() bool {
	if o != nil && !isNil(o.RelationshipType) {
		return true
	}

	return false
}

// SetRelationshipType gets a reference to the given string and assigns it to the RelationshipType field.
func (o *CharacteristicRelationship) SetRelationshipType(v string) {
	o.RelationshipType = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetBaseType() string {
	if o == nil || isNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetBaseTypeOk() (*string, bool) {
	if o == nil || isNil(o.BaseType) {
    return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasBaseType() bool {
	if o != nil && !isNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *CharacteristicRelationship) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetSchemaLocation() string {
	if o == nil || isNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetSchemaLocationOk() (*string, bool) {
	if o == nil || isNil(o.SchemaLocation) {
    return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasSchemaLocation() bool {
	if o != nil && !isNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *CharacteristicRelationship) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CharacteristicRelationship) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacteristicRelationship) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CharacteristicRelationship) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CharacteristicRelationship) SetType(v string) {
	o.Type = &v
}

func (o CharacteristicRelationship) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.RelationshipType) {
		toSerialize["relationshipType"] = o.RelationshipType
	}
	if !isNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !isNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !isNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCharacteristicRelationship struct {
	value *CharacteristicRelationship
	isSet bool
}

func (v NullableCharacteristicRelationship) Get() *CharacteristicRelationship {
	return v.value
}

func (v *NullableCharacteristicRelationship) Set(val *CharacteristicRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacteristicRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacteristicRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacteristicRelationship(val *CharacteristicRelationship) *NullableCharacteristicRelationship {
	return &NullableCharacteristicRelationship{value: val, isSet: true}
}

func (v NullableCharacteristicRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacteristicRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


