/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TargetProductSchema The reference object to the schema and type of target product which is described by product specification
type TargetProductSchema struct {
	// Class type of the target product
	Type string `json:"@type"`
	// This field provides a link to the schema describing the target product
	SchemaLocation string `json:"@schemaLocation"`
}

// NewTargetProductSchema instantiates a new TargetProductSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetProductSchema(type_ string, schemaLocation string) *TargetProductSchema {
	this := TargetProductSchema{}
	this.Type = type_
	this.SchemaLocation = schemaLocation
	return &this
}

// NewTargetProductSchemaWithDefaults instantiates a new TargetProductSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetProductSchemaWithDefaults() *TargetProductSchema {
	this := TargetProductSchema{}
	return &this
}

// GetType returns the Type field value
func (o *TargetProductSchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TargetProductSchema) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TargetProductSchema) SetType(v string) {
	o.Type = v
}

// GetSchemaLocation returns the SchemaLocation field value
func (o *TargetProductSchema) GetSchemaLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value
// and a boolean to check if the value has been set.
func (o *TargetProductSchema) GetSchemaLocationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SchemaLocation, true
}

// SetSchemaLocation sets field value
func (o *TargetProductSchema) SetSchemaLocation(v string) {
	o.SchemaLocation = v
}

func (o TargetProductSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["@type"] = o.Type
	}
	if true {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	return json.Marshal(toSerialize)
}

type NullableTargetProductSchema struct {
	value *TargetProductSchema
	isSet bool
}

func (v NullableTargetProductSchema) Get() *TargetProductSchema {
	return v.value
}

func (v *NullableTargetProductSchema) Set(val *TargetProductSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetProductSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetProductSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetProductSchema(val *TargetProductSchema) *NullableTargetProductSchema {
	return &NullableTargetProductSchema{value: val, isSet: true}
}

func (v NullableTargetProductSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetProductSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


