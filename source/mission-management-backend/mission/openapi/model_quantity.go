/*
Mission Management

## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Quantity An amount in a given unit
type Quantity struct {
	// Numeric value in a given unit
	Amount *float32 `json:"amount,omitempty"`
	// Unit
	Units *string `json:"units,omitempty"`
}

// NewQuantity instantiates a new Quantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuantity() *Quantity {
	this := Quantity{}
	var amount float32 = 1.0
	this.Amount = &amount
	return &this
}

// NewQuantityWithDefaults instantiates a new Quantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuantityWithDefaults() *Quantity {
	this := Quantity{}
	var amount float32 = 1.0
	this.Amount = &amount
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Quantity) GetAmount() float32 {
	if o == nil || isNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quantity) GetAmountOk() (*float32, bool) {
	if o == nil || isNil(o.Amount) {
    return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Quantity) HasAmount() bool {
	if o != nil && !isNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *Quantity) SetAmount(v float32) {
	o.Amount = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *Quantity) GetUnits() string {
	if o == nil || isNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quantity) GetUnitsOk() (*string, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *Quantity) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *Quantity) SetUnits(v string) {
	o.Units = &v
}

func (o Quantity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	return json.Marshal(toSerialize)
}

type NullableQuantity struct {
	value *Quantity
	isSet bool
}

func (v NullableQuantity) Get() *Quantity {
	return v.value
}

func (v *NullableQuantity) Set(val *Quantity) {
	v.value = val
	v.isSet = true
}

func (v NullableQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuantity(val *Quantity) *NullableQuantity {
	return &NullableQuantity{value: val, isSet: true}
}

func (v NullableQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


