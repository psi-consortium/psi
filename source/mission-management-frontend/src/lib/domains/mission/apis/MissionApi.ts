/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Mission, MissionCreate, MissionUpdate } from "../models/index";
import {
    MissionFromJSON,
    MissionToJSON,
    MissionCreateFromJSON,
    MissionCreateToJSON,
    MissionUpdateFromJSON,
    MissionUpdateToJSON
} from "../models/index";

export interface CreateMissionRequest {
    missionCreate: MissionCreate;
}

export interface DeleteMissionRequest {
    id: string;
}

export interface ListMissionRequest {
    fields?: string;
    offset?: number;
    limit?: number;
}

export interface PatchMissionRequest {
    id: string;
    missionUpdate: MissionUpdate;
}

export interface RetrieveMissionRequest {
    id: string;
    fields?: string;
}

/**
 *
 */
export class MissionApi extends runtime.BaseAPI {
    /**
     * This operation creates a Mission entity.
     * Creates a Mission
     */
    async createMissionRaw(
        requestParameters: CreateMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Mission>> {
        if (requestParameters["missionCreate"] == null) {
            throw new runtime.RequiredError(
                "missionCreate",
                'Required parameter "missionCreate" was null or undefined when calling createMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/mission`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MissionCreateToJSON(requestParameters["missionCreate"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionFromJSON(jsonValue));
    }

    /**
     * This operation creates a Mission entity.
     * Creates a Mission
     */
    async createMission(
        requestParameters: CreateMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Mission> {
        const response = await this.createMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation deletes a Mission entity.
     * Deletes a Mission
     */
    async deleteMissionRaw(
        requestParameters: DeleteMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling deleteMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/mission/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This operation deletes a Mission entity.
     * Deletes a Mission
     */
    async deleteMission(
        requestParameters: DeleteMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.deleteMissionRaw(requestParameters, initOverrides);
    }

    /**
     * This operation list or find Mission entities
     * List or find Mission objects
     */
    async listMissionRaw(
        requestParameters: ListMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<Mission>>> {
        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/mission`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MissionFromJSON));
    }

    /**
     * This operation list or find Mission entities
     * List or find Mission objects
     */
    async listMission(
        requestParameters: ListMissionRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<Mission>> {
        const response = await this.listMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation updates partially a Mission entity.
     * Updates partially a Mission
     */
    async patchMissionRaw(
        requestParameters: PatchMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Mission>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling patchMission().'
            );
        }

        if (requestParameters["missionUpdate"] == null) {
            throw new runtime.RequiredError(
                "missionUpdate",
                'Required parameter "missionUpdate" was null or undefined when calling patchMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/mission/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: MissionUpdateToJSON(requestParameters["missionUpdate"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionFromJSON(jsonValue));
    }

    /**
     * This operation updates partially a Mission entity.
     * Updates partially a Mission
     */
    async patchMission(
        requestParameters: PatchMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Mission> {
        const response = await this.patchMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation retrieves a Mission entity.
     * Retrieves a Mission
     */
    async retrieveMissionRaw(
        requestParameters: RetrieveMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Mission>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling retrieveMission().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/mission/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionFromJSON(jsonValue));
    }

    /**
     * This operation retrieves a Mission entity.
     * Retrieves a Mission
     */
    async retrieveMission(
        requestParameters: RetrieveMissionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Mission> {
        const response = await this.retrieveMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
