/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GeographicLocation } from "./GeographicLocation";
import {
    instanceOfGeographicLocation,
    GeographicLocationFromJSON,
    GeographicLocationFromJSONTyped,
    GeographicLocationToJSON
} from "./GeographicLocation";
import type { GeographicLocationRef } from "./GeographicLocationRef";
import {
    instanceOfGeographicLocationRef,
    GeographicLocationRefFromJSON,
    GeographicLocationRefFromJSONTyped,
    GeographicLocationRefToJSON
} from "./GeographicLocationRef";

/**
 * @type GeographicLocationRefOrValue
 * The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself
 * @export
 */
export type GeographicLocationRefOrValue =
    | ({ type: "GeographicLocation" } & GeographicLocation)
    | ({ type: "GeographicLocationRef" } & GeographicLocationRef);

export function GeographicLocationRefOrValueFromJSON(json: any): GeographicLocationRefOrValue {
    return GeographicLocationRefOrValueFromJSONTyped(json, false);
}

export function GeographicLocationRefOrValueFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): GeographicLocationRefOrValue {
    if (json == null) {
        return json;
    }
    switch (json["@type"]) {
        case "GeographicLocation":
            return Object.assign({}, GeographicLocationFromJSONTyped(json, true), {
                type: "GeographicLocation"
            } as const);
        case "GeographicLocationRef":
            return Object.assign({}, GeographicLocationRefFromJSONTyped(json, true), {
                type: "GeographicLocationRef"
            } as const);
        default:
            throw new Error(
                `No variant of GeographicLocationRefOrValue exists with 'type=${json["type"]}'`
            );
    }
}

export function GeographicLocationRefOrValueToJSON(json: any): any {
    return GeographicLocationRefOrValueToJSONTyped(json, false);
}

export function GeographicLocationRefOrValueToJSONTyped(
    value?: GeographicLocationRefOrValue | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }
    switch (value["type"]) {
        case "GeographicLocation":
            return Object.assign({}, GeographicLocationToJSON(value), {
                type: "GeographicLocation"
            } as const);
        case "GeographicLocationRef":
            return Object.assign({}, GeographicLocationRefToJSON(value), {
                type: "GeographicLocationRef"
            } as const);
        default:
            throw new Error(
                `No variant of GeographicLocationRefOrValue exists with 'type=${value["type"]}'`
            );
    }
}
