/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TargetProductSchema } from "./TargetProductSchema";
import {
    TargetProductSchemaFromJSON,
    TargetProductSchemaFromJSONTyped,
    TargetProductSchemaToJSON,
    TargetProductSchemaToJSONTyped
} from "./TargetProductSchema";
import type { RelativeTimePeriod } from "./RelativeTimePeriod";
import {
    RelativeTimePeriodFromJSON,
    RelativeTimePeriodFromJSONTyped,
    RelativeTimePeriodToJSON,
    RelativeTimePeriodToJSONTyped
} from "./RelativeTimePeriod";
import type { RelatedPlaceRefOrValue } from "./RelatedPlaceRefOrValue";
import {
    RelatedPlaceRefOrValueFromJSON,
    RelatedPlaceRefOrValueFromJSONTyped,
    RelatedPlaceRefOrValueToJSON,
    RelatedPlaceRefOrValueToJSONTyped
} from "./RelatedPlaceRefOrValue";
import type { ProductRef } from "./ProductRef";
import {
    ProductRefFromJSON,
    ProductRefFromJSONTyped,
    ProductRefToJSON,
    ProductRefToJSONTyped
} from "./ProductRef";
import type { ResourceRef } from "./ResourceRef";
import {
    ResourceRefFromJSON,
    ResourceRefFromJSONTyped,
    ResourceRefToJSON,
    ResourceRefToJSONTyped
} from "./ResourceRef";
import type { InquiredProductCharacteristic } from "./InquiredProductCharacteristic";
import {
    InquiredProductCharacteristicFromJSON,
    InquiredProductCharacteristicFromJSONTyped,
    InquiredProductCharacteristicToJSON,
    InquiredProductCharacteristicToJSONTyped
} from "./InquiredProductCharacteristic";
import type { MissionAssetRelationship } from "./MissionAssetRelationship";
import {
    MissionAssetRelationshipFromJSON,
    MissionAssetRelationshipFromJSONTyped,
    MissionAssetRelationshipToJSON,
    MissionAssetRelationshipToJSONTyped
} from "./MissionAssetRelationship";
import type { ServiceRef } from "./ServiceRef";
import {
    ServiceRefFromJSON,
    ServiceRefFromJSONTyped,
    ServiceRefToJSON,
    ServiceRefToJSONTyped
} from "./ServiceRef";

/**
 * Planning of a required asset in a mission. May contain any combination of user-defined characteristics for an inquiry, an ordered product or a service/resource that is already in the customer inventory.
 * @export
 * @interface MissionAsset
 */
export interface MissionAsset {
    /**
     * Identifier for this asset
     * @type {string}
     * @memberof MissionAsset
     */
    id?: string;
    /**
     * Name for this asset
     * @type {string}
     * @memberof MissionAsset
     */
    name?: string;
    /**
     *
     * @type {TargetProductSchema}
     * @memberof MissionAsset
     */
    targetProductSchema?: TargetProductSchema;
    /**
     *
     * @type {RelativeTimePeriod}
     * @memberof MissionAsset
     */
    servicePeriod?: RelativeTimePeriod;
    /**
     *
     * @type {Array<RelatedPlaceRefOrValue>}
     * @memberof MissionAsset
     */
    place?: Array<RelatedPlaceRefOrValue>;
    /**
     * A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).
     * @type {Array<InquiredProductCharacteristic>}
     * @memberof MissionAsset
     */
    inquiredProductCharacteristic?: Array<InquiredProductCharacteristic>;
    /**
     * A Product that is used to implement the defined specification. Usually set after creating a ProductOrder.
     * @type {Array<ProductRef>}
     * @memberof MissionAsset
     */
    realizingProduct?: Array<ProductRef>;
    /**
     * A Service that is part of the customers inventory. Either selected manually or found by the Inquiry API.
     * @type {Array<ServiceRef>}
     * @memberof MissionAsset
     */
    realizingService?: Array<ServiceRef>;
    /**
     * A Resource that is part of the customers inventory. Either selected manually or found by the Inquiry API.
     * @type {Array<ResourceRef>}
     * @memberof MissionAsset
     */
    realizingResource?: Array<ResourceRef>;
    /**
     * Relation to other assets.
     * @type {Array<MissionAssetRelationship>}
     * @memberof MissionAsset
     */
    assetRelationship?: Array<MissionAssetRelationship>;
}

/**
 * Check if a given object implements the MissionAsset interface.
 */
export function instanceOfMissionAsset(value: object): value is MissionAsset {
    return true;
}

export function MissionAssetFromJSON(json: any): MissionAsset {
    return MissionAssetFromJSONTyped(json, false);
}

export function MissionAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): MissionAsset {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        name: json["name"] == null ? undefined : json["name"],
        targetProductSchema:
            json["targetProductSchema"] == null
                ? undefined
                : TargetProductSchemaFromJSON(json["targetProductSchema"]),
        servicePeriod:
            json["servicePeriod"] == null
                ? undefined
                : RelativeTimePeriodFromJSON(json["servicePeriod"]),
        place:
            json["place"] == null
                ? undefined
                : (json["place"] as Array<any>).map(RelatedPlaceRefOrValueFromJSON),
        inquiredProductCharacteristic:
            json["inquiredProductCharacteristic"] == null
                ? undefined
                : (json["inquiredProductCharacteristic"] as Array<any>).map(
                      InquiredProductCharacteristicFromJSON
                  ),
        realizingProduct:
            json["realizingProduct"] == null
                ? undefined
                : (json["realizingProduct"] as Array<any>).map(ProductRefFromJSON),
        realizingService:
            json["realizingService"] == null
                ? undefined
                : (json["realizingService"] as Array<any>).map(ServiceRefFromJSON),
        realizingResource:
            json["realizingResource"] == null
                ? undefined
                : (json["realizingResource"] as Array<any>).map(ResourceRefFromJSON),
        assetRelationship:
            json["assetRelationship"] == null
                ? undefined
                : (json["assetRelationship"] as Array<any>).map(MissionAssetRelationshipFromJSON)
    };
}

export function MissionAssetToJSON(json: any): MissionAsset {
    return MissionAssetToJSONTyped(json, false);
}

export function MissionAssetToJSONTyped(
    value?: MissionAsset | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        name: value["name"],
        targetProductSchema: TargetProductSchemaToJSON(value["targetProductSchema"]),
        servicePeriod: RelativeTimePeriodToJSON(value["servicePeriod"]),
        place:
            value["place"] == null
                ? undefined
                : (value["place"] as Array<any>).map(RelatedPlaceRefOrValueToJSON),
        inquiredProductCharacteristic:
            value["inquiredProductCharacteristic"] == null
                ? undefined
                : (value["inquiredProductCharacteristic"] as Array<any>).map(
                      InquiredProductCharacteristicToJSON
                  ),
        realizingProduct:
            value["realizingProduct"] == null
                ? undefined
                : (value["realizingProduct"] as Array<any>).map(ProductRefToJSON),
        realizingService:
            value["realizingService"] == null
                ? undefined
                : (value["realizingService"] as Array<any>).map(ServiceRefToJSON),
        realizingResource:
            value["realizingResource"] == null
                ? undefined
                : (value["realizingResource"] as Array<any>).map(ResourceRefToJSON),
        assetRelationship:
            value["assetRelationship"] == null
                ? undefined
                : (value["assetRelationship"] as Array<any>).map(MissionAssetRelationshipToJSON)
    };
}
