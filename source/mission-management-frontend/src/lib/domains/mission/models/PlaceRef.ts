/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.
 * @export
 * @interface PlaceRef
 */
export interface PlaceRef {
    /**
     * unique identifier
     * @type {string}
     * @memberof PlaceRef
     */
    id: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof PlaceRef
     */
    href?: string;
    /**
     * Name of the related entity.
     * @type {string}
     * @memberof PlaceRef
     */
    name?: string;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof PlaceRef
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof PlaceRef
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof PlaceRef
     */
    type?: string;
    /**
     * The actual type of the target instance when needed for disambiguation.
     * @type {string}
     * @memberof PlaceRef
     */
    referredType?: string;
}

/**
 * Check if a given object implements the PlaceRef interface.
 */
export function instanceOfPlaceRef(value: object): value is PlaceRef {
    if (!("id" in value) || value["id"] === undefined) return false;
    return true;
}

export function PlaceRefFromJSON(json: any): PlaceRef {
    return PlaceRefFromJSONTyped(json, false);
}

export function PlaceRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaceRef {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        href: json["href"] == null ? undefined : json["href"],
        name: json["name"] == null ? undefined : json["name"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"],
        referredType: json["@referredType"] == null ? undefined : json["@referredType"]
    };
}

export function PlaceRefToJSON(json: any): PlaceRef {
    return PlaceRefToJSONTyped(json, false);
}

export function PlaceRefToJSONTyped(
    value?: PlaceRef | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        name: value["name"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"],
        "@referredType": value["referredType"]
    };
}
