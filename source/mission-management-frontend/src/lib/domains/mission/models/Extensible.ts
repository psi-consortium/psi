/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Base Extensible schema for use in TMForum Open-APIs
 * @export
 * @interface Extensible
 */
export interface Extensible {
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof Extensible
     */
    type: string;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof Extensible
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof Extensible
     */
    schemaLocation?: string;
}

/**
 * Check if a given object implements the Extensible interface.
 */
export function instanceOfExtensible(value: object): value is Extensible {
    if (!("type" in value) || value["type"] === undefined) return false;
    return true;
}

export function ExtensibleFromJSON(json: any): Extensible {
    return ExtensibleFromJSONTyped(json, false);
}

export function ExtensibleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Extensible {
    if (json == null) {
        return json;
    }
    return {
        type: json["@type"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"]
    };
}

export function ExtensibleToJSON(json: any): Extensible {
    return ExtensibleToJSONTyped(json, false);
}

export function ExtensibleToJSONTyped(
    value?: Extensible | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        "@type": value["type"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"]
    };
}
