/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Application relevant detail, defined in the API or a common list.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * Explanation of the reason for the error which can be shown to a client user.
     * @type {string}
     * @memberof ModelError
     */
    reason: string;
    /**
     * More details and corrective actions related to the error which can be shown to a client user.
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     * HTTP Error code extension
     * @type {string}
     * @memberof ModelError
     */
    status?: string;
    /**
     * URI of documentation describing the error.
     * @type {string}
     * @memberof ModelError
     */
    referenceError?: string;
    /**
     * When sub-classing, this defines the super-class.
     * @type {string}
     * @memberof ModelError
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof ModelError
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name.
     * @type {string}
     * @memberof ModelError
     */
    type?: string;
}

/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): value is ModelError {
    if (!("code" in value) || value["code"] === undefined) return false;
    if (!("reason" in value) || value["reason"] === undefined) return false;
    return true;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if (json == null) {
        return json;
    }
    return {
        code: json["code"],
        reason: json["reason"],
        message: json["message"] == null ? undefined : json["message"],
        status: json["status"] == null ? undefined : json["status"],
        referenceError: json["referenceError"] == null ? undefined : json["referenceError"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function ModelErrorToJSON(json: any): ModelError {
    return ModelErrorToJSONTyped(json, false);
}

export function ModelErrorToJSONTyped(
    value?: ModelError | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        code: value["code"],
        reason: value["reason"],
        message: value["message"],
        status: value["status"],
        referenceError: value["referenceError"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
