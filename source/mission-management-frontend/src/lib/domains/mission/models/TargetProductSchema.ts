/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * The reference object to the schema and type of target product which is described by product specification
 * @export
 * @interface TargetProductSchema
 */
export interface TargetProductSchema {
    /**
     * Class type of the target product
     * @type {string}
     * @memberof TargetProductSchema
     */
    type: string;
    /**
     * This field provides a link to the schema describing the target product
     * @type {string}
     * @memberof TargetProductSchema
     */
    schemaLocation: string;
}

/**
 * Check if a given object implements the TargetProductSchema interface.
 */
export function instanceOfTargetProductSchema(value: object): value is TargetProductSchema {
    if (!("type" in value) || value["type"] === undefined) return false;
    if (!("schemaLocation" in value) || value["schemaLocation"] === undefined) return false;
    return true;
}

export function TargetProductSchemaFromJSON(json: any): TargetProductSchema {
    return TargetProductSchemaFromJSONTyped(json, false);
}

export function TargetProductSchemaFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): TargetProductSchema {
    if (json == null) {
        return json;
    }
    return {
        type: json["@type"],
        schemaLocation: json["@schemaLocation"]
    };
}

export function TargetProductSchemaToJSON(json: any): TargetProductSchema {
    return TargetProductSchemaToJSONTyped(json, false);
}

export function TargetProductSchemaToJSONTyped(
    value?: TargetProductSchema | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        "@type": value["type"],
        "@schemaLocation": value["schemaLocation"]
    };
}
