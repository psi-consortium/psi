/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Geometry } from "./Geometry";
import {
    GeometryFromJSON,
    GeometryFromJSONTyped,
    GeometryToJSON,
    GeometryToJSONTyped
} from "./Geometry";
import type { Place } from "./Place";
import { PlaceFromJSON, PlaceFromJSONTyped, PlaceToJSON, PlaceToJSONTyped } from "./Place";

/**
 *
 * @export
 * @interface GeographicLocation
 */
export interface GeographicLocation extends Place {
    /**
     *
     * @type {Geometry}
     * @memberof GeographicLocation
     */
    geoJson?: Geometry;
    /**
     * A bounding box array that contains the geometry. The axes order follows the axes order of the geometry
     * @type {Array<number>}
     * @memberof GeographicLocation
     */
    bbox?: Array<number>;
}

/**
 * Check if a given object implements the GeographicLocation interface.
 */
export function instanceOfGeographicLocation(value: object): value is GeographicLocation {
    return true;
}

export function GeographicLocationFromJSON(json: any): GeographicLocation {
    return GeographicLocationFromJSONTyped(json, false);
}

export function GeographicLocationFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): GeographicLocation {
    if (json == null) {
        return json;
    }
    return {
        ...PlaceFromJSONTyped(json, true),
        geoJson: json["geoJson"] == null ? undefined : GeometryFromJSON(json["geoJson"]),
        bbox: json["bbox"] == null ? undefined : json["bbox"]
    };
}

export function GeographicLocationToJSON(json: any): GeographicLocation {
    return GeographicLocationToJSONTyped(json, false);
}

export function GeographicLocationToJSONTyped(
    value?: GeographicLocation | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        ...PlaceToJSONTyped(value, true),
        geoJson: GeometryToJSON(value["geoJson"]),
        bbox: value["bbox"]
    };
}
