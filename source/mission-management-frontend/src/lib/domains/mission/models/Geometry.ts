/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { LineString } from "./LineString";
import {
    instanceOfLineString,
    LineStringFromJSON,
    LineStringFromJSONTyped,
    LineStringToJSON
} from "./LineString";
import type { MultiLineString } from "./MultiLineString";
import {
    instanceOfMultiLineString,
    MultiLineStringFromJSON,
    MultiLineStringFromJSONTyped,
    MultiLineStringToJSON
} from "./MultiLineString";
import type { MultiPoint } from "./MultiPoint";
import {
    instanceOfMultiPoint,
    MultiPointFromJSON,
    MultiPointFromJSONTyped,
    MultiPointToJSON
} from "./MultiPoint";
import type { MultiPolygon } from "./MultiPolygon";
import {
    instanceOfMultiPolygon,
    MultiPolygonFromJSON,
    MultiPolygonFromJSONTyped,
    MultiPolygonToJSON
} from "./MultiPolygon";
import type { Point } from "./Point";
import { instanceOfPoint, PointFromJSON, PointFromJSONTyped, PointToJSON } from "./Point";
import type { Polygon } from "./Polygon";
import { instanceOfPolygon, PolygonFromJSON, PolygonFromJSONTyped, PolygonToJSON } from "./Polygon";

/**
 * @type Geometry
 * A GeoJson geometry.
 * @export
 */
export type Geometry =
    | ({ type: "LineString" } & LineString)
    | ({ type: "MultiLineString" } & MultiLineString)
    | ({ type: "MultiPoint" } & MultiPoint)
    | ({ type: "MultiPolygon" } & MultiPolygon)
    | ({ type: "Point" } & Point)
    | ({ type: "Polygon" } & Polygon);

export function GeometryFromJSON(json: any): Geometry {
    return GeometryFromJSONTyped(json, false);
}

export function GeometryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Geometry {
    if (json == null) {
        return json;
    }
    switch (json["type"]) {
        case "LineString":
            return Object.assign({}, LineStringFromJSONTyped(json, true), {
                type: "LineString"
            } as const);
        case "MultiLineString":
            return Object.assign({}, MultiLineStringFromJSONTyped(json, true), {
                type: "MultiLineString"
            } as const);
        case "MultiPoint":
            return Object.assign({}, MultiPointFromJSONTyped(json, true), {
                type: "MultiPoint"
            } as const);
        case "MultiPolygon":
            return Object.assign({}, MultiPolygonFromJSONTyped(json, true), {
                type: "MultiPolygon"
            } as const);
        case "Point":
            return Object.assign({}, PointFromJSONTyped(json, true), { type: "Point" } as const);
        case "Polygon":
            return Object.assign({}, PolygonFromJSONTyped(json, true), {
                type: "Polygon"
            } as const);
        default:
            throw new Error(`No variant of Geometry exists with 'type=${json["type"]}'`);
    }
}

export function GeometryToJSON(json: any): any {
    return GeometryToJSONTyped(json, false);
}

export function GeometryToJSONTyped(
    value?: Geometry | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }
    switch (value["type"]) {
        case "LineString":
            return Object.assign({}, LineStringToJSON(value), { type: "LineString" } as const);
        case "MultiLineString":
            return Object.assign({}, MultiLineStringToJSON(value), {
                type: "MultiLineString"
            } as const);
        case "MultiPoint":
            return Object.assign({}, MultiPointToJSON(value), { type: "MultiPoint" } as const);
        case "MultiPolygon":
            return Object.assign({}, MultiPolygonToJSON(value), { type: "MultiPolygon" } as const);
        case "Point":
            return Object.assign({}, PointToJSON(value), { type: "Point" } as const);
        case "Polygon":
            return Object.assign({}, PolygonToJSON(value), { type: "Polygon" } as const);
        default:
            throw new Error(`No variant of Geometry exists with 'type=${value["type"]}'`);
    }
}
