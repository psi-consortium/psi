/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import {
    type GeographicAddress,
    GeographicAddressFromJSONTyped,
    GeographicAddressToJSON,
    GeographicAddressToJSONTyped
} from "./GeographicAddress";
import {
    type GeographicLocation,
    GeographicLocationFromJSONTyped,
    GeographicLocationToJSON,
    GeographicLocationToJSONTyped
} from "./GeographicLocation";
/**
 * Place reference. Place defines the places where the products are sold or delivered.
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * Unique identifier of the place
     * @type {string}
     * @memberof Place
     */
    id?: string;
    /**
     * Unique reference of the place
     * @type {string}
     * @memberof Place
     */
    href?: string;
    /**
     * A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]
     * @type {string}
     * @memberof Place
     */
    name?: string;
    /**
     * When sub-classing, this defines the super-class.
     * @type {string}
     * @memberof Place
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships.
     * @type {string}
     * @memberof Place
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name.
     * @type {string}
     * @memberof Place
     */
    type?: string;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): value is Place {
    return true;
}

export function PlaceFromJSON(json: any): Place {
    return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Place {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json["@type"] === "GeographicAddress") {
            return GeographicAddressFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json["@type"] === "GeographicLocation") {
            return GeographicLocationFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json["@type"] === "Place") {
            return PlaceFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        name: json["name"] == null ? undefined : json["name"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function PlaceToJSON(json: any): Place {
    return PlaceToJSONTyped(json, false);
}

export function PlaceToJSONTyped(value?: Place | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value["type"]) {
            case "GeographicAddress":
                return GeographicAddressToJSONTyped(
                    value as GeographicAddress,
                    ignoreDiscriminator
                );
            case "GeographicLocation":
                return GeographicLocationToJSONTyped(
                    value as GeographicLocation,
                    ignoreDiscriminator
                );
            case "Place":
                return PlaceToJSONTyped(value as Place, ignoreDiscriminator);
            default:
                throw new Error(`No variant of Place exists with 'type=${value["type"]}'`);
        }
    }

    return {
        id: value["id"],
        href: value["href"],
        name: value["name"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
