/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GeographicAddress } from "./GeographicAddress";
import {
    instanceOfGeographicAddress,
    GeographicAddressFromJSON,
    GeographicAddressFromJSONTyped,
    GeographicAddressToJSON
} from "./GeographicAddress";
import type { GeographicLocation } from "./GeographicLocation";
import {
    instanceOfGeographicLocation,
    GeographicLocationFromJSON,
    GeographicLocationFromJSONTyped,
    GeographicLocationToJSON
} from "./GeographicLocation";
import type { PlaceRef } from "./PlaceRef";
import {
    instanceOfPlaceRef,
    PlaceRefFromJSON,
    PlaceRefFromJSONTyped,
    PlaceRefToJSON
} from "./PlaceRef";

/**
 * @type PlaceRefOrValue
 * The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself
 * @export
 */
export type PlaceRefOrValue =
    | ({ type: "GeographicAddress" } & GeographicAddress)
    | ({ type: "GeographicLocation" } & GeographicLocation)
    | ({ type: "PlaceRef" } & PlaceRef);

export function PlaceRefOrValueFromJSON(json: any): PlaceRefOrValue {
    return PlaceRefOrValueFromJSONTyped(json, false);
}

export function PlaceRefOrValueFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): PlaceRefOrValue {
    if (json == null) {
        return json;
    }
    switch (json["@type"]) {
        case "GeographicAddress":
            return Object.assign({}, GeographicAddressFromJSONTyped(json, true), {
                type: "GeographicAddress"
            } as const);
        case "GeographicLocation":
            return Object.assign({}, GeographicLocationFromJSONTyped(json, true), {
                type: "GeographicLocation"
            } as const);
        case "PlaceRef":
            return Object.assign({}, PlaceRefFromJSONTyped(json, true), {
                type: "PlaceRef"
            } as const);
        default:
            throw new Error(`No variant of PlaceRefOrValue exists with 'type=${json["type"]}'`);
    }
}

export function PlaceRefOrValueToJSON(json: any): any {
    return PlaceRefOrValueToJSONTyped(json, false);
}

export function PlaceRefOrValueToJSONTyped(
    value?: PlaceRefOrValue | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }
    switch (value["type"]) {
        case "GeographicAddress":
            return Object.assign({}, GeographicAddressToJSON(value), {} as const);
        case "GeographicLocation":
            return Object.assign({}, GeographicLocationToJSON(value), {} as const);
        case "PlaceRef":
            return Object.assign({}, PlaceRefToJSON(value), {} as const);
        default:
            throw new Error(`No variant of PlaceRefOrValue exists with 'type=${value["type"]}'`);
    }
}
