/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { InquiredCharacteristicValueSpecification } from "./InquiredCharacteristicValueSpecification";
import {
    InquiredCharacteristicValueSpecificationFromJSON,
    InquiredCharacteristicValueSpecificationFromJSONTyped,
    InquiredCharacteristicValueSpecificationToJSON,
    InquiredCharacteristicValueSpecificationToJSONTyped
} from "./InquiredCharacteristicValueSpecification";

/**
 * A characteristic quality or distinctive feature of an InquiredProduct. The characteristic can take a discrete value, such as color, can take a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3).
 * @export
 * @interface InquiredProductCharacteristic
 */
export interface InquiredProductCharacteristic {
    /**
     * Unique ID for the characteristic
     * @type {string}
     * @memberof InquiredProductCharacteristic
     */
    id: string;
    /**
     * A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications.
     * @type {string}
     * @memberof InquiredProductCharacteristic
     */
    name?: string;
    /**
     * Priority of this characteristic compared to others in ascending order (the most important one is 1). Multiple characteristics can be equally important. If the attribute is not set, the characteristic has lowest priority.
     * @type {number}
     * @memberof InquiredProductCharacteristic
     */
    priority?: number;
    /**
     * A kind of value that the characteristic can take on, such as numeric, text and so forth
     * @type {string}
     * @memberof InquiredProductCharacteristic
     */
    valueType?: string;
    /**
     * The values of the attributes in the InquiredProductCharacteristicValue object describe the values of the attributes that the customer is requesting for the corresponding InquiredProduct.
     * @type {Array<InquiredCharacteristicValueSpecification>}
     * @memberof InquiredProductCharacteristic
     */
    inquiredProductCharacteristicValue: Array<InquiredCharacteristicValueSpecification>;
}

/**
 * Check if a given object implements the InquiredProductCharacteristic interface.
 */
export function instanceOfInquiredProductCharacteristic(
    value: object
): value is InquiredProductCharacteristic {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (
        !("inquiredProductCharacteristicValue" in value) ||
        value["inquiredProductCharacteristicValue"] === undefined
    )
        return false;
    return true;
}

export function InquiredProductCharacteristicFromJSON(json: any): InquiredProductCharacteristic {
    return InquiredProductCharacteristicFromJSONTyped(json, false);
}

export function InquiredProductCharacteristicFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): InquiredProductCharacteristic {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        name: json["name"] == null ? undefined : json["name"],
        priority: json["priority"] == null ? undefined : json["priority"],
        valueType: json["valueType"] == null ? undefined : json["valueType"],
        inquiredProductCharacteristicValue: (
            json["inquiredProductCharacteristicValue"] as Array<any>
        ).map(InquiredCharacteristicValueSpecificationFromJSON)
    };
}

export function InquiredProductCharacteristicToJSON(json: any): InquiredProductCharacteristic {
    return InquiredProductCharacteristicToJSONTyped(json, false);
}

export function InquiredProductCharacteristicToJSONTyped(
    value?: InquiredProductCharacteristic | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        name: value["name"],
        priority: value["priority"],
        valueType: value["valueType"],
        inquiredProductCharacteristicValue: (
            value["inquiredProductCharacteristicValue"] as Array<any>
        ).map(InquiredCharacteristicValueSpecificationToJSON)
    };
}
