/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { GeographicLocationRefOrValue } from "./GeographicLocationRefOrValue";
import {
    GeographicLocationRefOrValueFromJSON,
    GeographicLocationRefOrValueFromJSONTyped,
    GeographicLocationRefOrValueToJSON,
    GeographicLocationRefOrValueToJSONTyped
} from "./GeographicLocationRefOrValue";
import type { Place } from "./Place";
import { PlaceFromJSON, PlaceFromJSONTyped, PlaceToJSON, PlaceToJSONTyped } from "./Place";

/**
 *
 * @export
 * @interface GeographicAddress
 */
export interface GeographicAddress extends Place {
    /**
     * City that the address is in
     * @type {string}
     * @memberof GeographicAddress
     */
    city?: string;
    /**
     * Country that the address is in
     * @type {string}
     * @memberof GeographicAddress
     */
    country?: string;
    /**
     * An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]
     * @type {string}
     * @memberof GeographicAddress
     */
    locality?: string;
    /**
     * descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)
     * @type {string}
     * @memberof GeographicAddress
     */
    postcode?: string;
    /**
     * the State or Province that the address is in
     * @type {string}
     * @memberof GeographicAddress
     */
    stateOrProvince?: string;
    /**
     * Name of the street or other street type
     * @type {string}
     * @memberof GeographicAddress
     */
    streetName?: string;
    /**
     * Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses
     * @type {string}
     * @memberof GeographicAddress
     */
    streetNr?: string;
    /**
     * Last number in a range of street numbers allocated to a property
     * @type {string}
     * @memberof GeographicAddress
     */
    streetNrLast?: string;
    /**
     * Last street number suffix for a ranged address
     * @type {string}
     * @memberof GeographicAddress
     */
    streetNrLastSuffix?: string;
    /**
     * the first street number suffix
     * @type {string}
     * @memberof GeographicAddress
     */
    streetNrSuffix?: string;
    /**
     * A modifier denoting a relative direction
     * @type {string}
     * @memberof GeographicAddress
     */
    streetSuffix?: string;
    /**
     * alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf
     * @type {string}
     * @memberof GeographicAddress
     */
    streetType?: string;
    /**
     *
     * @type {GeographicLocationRefOrValue}
     * @memberof GeographicAddress
     */
    geographicLocation?: GeographicLocationRefOrValue;
    /**
     * Classification of the address, e.g., residential, industrial
     * @type {string}
     * @memberof GeographicAddress
     */
    geographicAddressType?: string;
}

/**
 * Check if a given object implements the GeographicAddress interface.
 */
export function instanceOfGeographicAddress(value: object): value is GeographicAddress {
    return true;
}

export function GeographicAddressFromJSON(json: any): GeographicAddress {
    return GeographicAddressFromJSONTyped(json, false);
}

export function GeographicAddressFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): GeographicAddress {
    if (json == null) {
        return json;
    }
    return {
        ...PlaceFromJSONTyped(json, true),
        city: json["city"] == null ? undefined : json["city"],
        country: json["country"] == null ? undefined : json["country"],
        locality: json["locality"] == null ? undefined : json["locality"],
        postcode: json["postcode"] == null ? undefined : json["postcode"],
        stateOrProvince: json["stateOrProvince"] == null ? undefined : json["stateOrProvince"],
        streetName: json["streetName"] == null ? undefined : json["streetName"],
        streetNr: json["streetNr"] == null ? undefined : json["streetNr"],
        streetNrLast: json["streetNrLast"] == null ? undefined : json["streetNrLast"],
        streetNrLastSuffix:
            json["streetNrLastSuffix"] == null ? undefined : json["streetNrLastSuffix"],
        streetNrSuffix: json["streetNrSuffix"] == null ? undefined : json["streetNrSuffix"],
        streetSuffix: json["streetSuffix"] == null ? undefined : json["streetSuffix"],
        streetType: json["streetType"] == null ? undefined : json["streetType"],
        geographicLocation:
            json["geographicLocation"] == null
                ? undefined
                : GeographicLocationRefOrValueFromJSON(json["geographicLocation"]),
        geographicAddressType:
            json["geographicAddressType"] == null ? undefined : json["geographicAddressType"]
    };
}

export function GeographicAddressToJSON(json: any): GeographicAddress {
    return GeographicAddressToJSONTyped(json, false);
}

export function GeographicAddressToJSONTyped(
    value?: GeographicAddress | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        ...PlaceToJSONTyped(value, true),
        city: value["city"],
        country: value["country"],
        locality: value["locality"],
        postcode: value["postcode"],
        stateOrProvince: value["stateOrProvince"],
        streetName: value["streetName"],
        streetNr: value["streetNr"],
        streetNrLast: value["streetNrLast"],
        streetNrLastSuffix: value["streetNrLastSuffix"],
        streetNrSuffix: value["streetNrSuffix"],
        streetSuffix: value["streetSuffix"],
        streetType: value["streetType"],
        geographicLocation: GeographicLocationRefOrValueToJSON(value["geographicLocation"]),
        geographicAddressType: value["geographicAddressType"]
    };
}
