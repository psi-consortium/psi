/* tslint:disable */
/* eslint-disable */
/**
 * Mission Management
 * ## PSID API Reference: PSID002 - Mission Management  The Mission API enables customers to create, update and delete missions. A mission is composed of one or more teams, their areas of operation and communication needs. The data can be used to issue an inquiry for matching products (see PSID001).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { MissionAsset } from "./MissionAsset";
import {
    MissionAssetFromJSON,
    MissionAssetFromJSONTyped,
    MissionAssetToJSON,
    MissionAssetToJSONTyped
} from "./MissionAsset";
import type { PlaceRefOrValue } from "./PlaceRefOrValue";
import {
    PlaceRefOrValueFromJSON,
    PlaceRefOrValueFromJSONTyped,
    PlaceRefOrValueToJSON,
    PlaceRefOrValueToJSONTyped
} from "./PlaceRefOrValue";
import type { MissionRelationship } from "./MissionRelationship";
import {
    MissionRelationshipFromJSON,
    MissionRelationshipFromJSONTyped,
    MissionRelationshipToJSON,
    MissionRelationshipToJSONTyped
} from "./MissionRelationship";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";
import type { Characteristic } from "./Characteristic";
import {
    CharacteristicFromJSON,
    CharacteristicFromJSONTyped,
    CharacteristicToJSON,
    CharacteristicToJSONTyped
} from "./Characteristic";
import type { MissionStatusType } from "./MissionStatusType";
import {
    MissionStatusTypeFromJSON,
    MissionStatusTypeFromJSONTyped,
    MissionStatusTypeToJSON,
    MissionStatusTypeToJSONTyped
} from "./MissionStatusType";
import type { RelatedParty } from "./RelatedParty";
import {
    RelatedPartyFromJSON,
    RelatedPartyFromJSONTyped,
    RelatedPartyToJSON,
    RelatedPartyToJSONTyped
} from "./RelatedParty";

/**
 * A mission of a customer.
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * unique identifier
     * @type {string}
     * @memberof Mission
     */
    id: string;
    /**
     * Reference of the Mission
     * @type {string}
     * @memberof Mission
     */
    href?: string;
    /**
     * Name of the mission
     * @type {string}
     * @memberof Mission
     */
    name: string;
    /**
     * Description of the mission
     * @type {string}
     * @memberof Mission
     */
    description?: string;
    /**
     * Category of the mission like 'Humanitarian Aid', 'Wildfire Fighting' and so on.
     * @type {string}
     * @memberof Mission
     */
    category?: string;
    /**
     *
     * @type {TimePeriod}
     * @memberof Mission
     */
    timeframe?: TimePeriod;
    /**
     * Date and time of the last update of this REST resource
     * @type {Date}
     * @memberof Mission
     */
    lastUpdate?: Date;
    /**
     *
     * @type {MissionStatusType}
     * @memberof Mission
     */
    status?: MissionStatusType;
    /**
     *
     * @type {Array<Characteristic>}
     * @memberof Mission
     */
    characteristic?: Array<Characteristic>;
    /**
     * List of places where the mission is conducted.
     * @type {Array<PlaceRefOrValue>}
     * @memberof Mission
     */
    place?: Array<PlaceRefOrValue>;
    /**
     * List of assets for this mission.
     * @type {Array<MissionAsset>}
     * @memberof Mission
     */
    asset?: Array<MissionAsset>;
    /**
     * Relation to other missions.
     * @type {Array<MissionRelationship>}
     * @memberof Mission
     */
    missionRelationship?: Array<MissionRelationship>;
    /**
     * A related party defines party or party role linked to a specific entity.
     * @type {Array<RelatedParty>}
     * @memberof Mission
     */
    relatedParty?: Array<RelatedParty>;
    /**
     * When sub-classing, this defines the super-class.
     * @type {string}
     * @memberof Mission
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof Mission
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name.
     * @type {string}
     * @memberof Mission
     */
    type?: string;
}

/**
 * Check if a given object implements the Mission interface.
 */
export function instanceOfMission(value: object): value is Mission {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("name" in value) || value["name"] === undefined) return false;
    return true;
}

export function MissionFromJSON(json: any): Mission {
    return MissionFromJSONTyped(json, false);
}

export function MissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Mission {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        href: json["href"] == null ? undefined : json["href"],
        name: json["name"],
        description: json["description"] == null ? undefined : json["description"],
        category: json["category"] == null ? undefined : json["category"],
        timeframe: json["timeframe"] == null ? undefined : TimePeriodFromJSON(json["timeframe"]),
        lastUpdate: json["lastUpdate"] == null ? undefined : new Date(json["lastUpdate"]),
        status: json["status"] == null ? undefined : MissionStatusTypeFromJSON(json["status"]),
        characteristic:
            json["characteristic"] == null
                ? undefined
                : (json["characteristic"] as Array<any>).map(CharacteristicFromJSON),
        place:
            json["place"] == null
                ? undefined
                : (json["place"] as Array<any>).map(PlaceRefOrValueFromJSON),
        asset:
            json["asset"] == null
                ? undefined
                : (json["asset"] as Array<any>).map(MissionAssetFromJSON),
        missionRelationship:
            json["missionRelationship"] == null
                ? undefined
                : (json["missionRelationship"] as Array<any>).map(MissionRelationshipFromJSON),
        relatedParty:
            json["relatedParty"] == null
                ? undefined
                : (json["relatedParty"] as Array<any>).map(RelatedPartyFromJSON),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function MissionToJSON(json: any): Mission {
    return MissionToJSONTyped(json, false);
}

export function MissionToJSONTyped(
    value?: Mission | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        name: value["name"],
        description: value["description"],
        category: value["category"],
        timeframe: TimePeriodToJSON(value["timeframe"]),
        lastUpdate: value["lastUpdate"] == null ? undefined : value["lastUpdate"].toISOString(),
        status: MissionStatusTypeToJSON(value["status"]),
        characteristic:
            value["characteristic"] == null
                ? undefined
                : (value["characteristic"] as Array<any>).map(CharacteristicToJSON),
        place:
            value["place"] == null
                ? undefined
                : (value["place"] as Array<any>).map(PlaceRefOrValueToJSON),
        asset:
            value["asset"] == null
                ? undefined
                : (value["asset"] as Array<any>).map(MissionAssetToJSON),
        missionRelationship:
            value["missionRelationship"] == null
                ? undefined
                : (value["missionRelationship"] as Array<any>).map(MissionRelationshipToJSON),
        relatedParty:
            value["relatedParty"] == null
                ? undefined
                : (value["relatedParty"] as Array<any>).map(RelatedPartyToJSON),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
