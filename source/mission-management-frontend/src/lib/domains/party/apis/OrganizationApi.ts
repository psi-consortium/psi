/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Organization, OrganizationCreate, OrganizationUpdate } from "../models/index";
import {
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationCreateFromJSON,
    OrganizationCreateToJSON,
    OrganizationUpdateFromJSON,
    OrganizationUpdateToJSON
} from "../models/index";

export interface CreateOrganizationRequest {
    organization: OrganizationCreate;
}

export interface DeleteOrganizationRequest {
    id: string;
}

export interface ListOrganizationRequest {
    fields?: string;
    offset?: number;
    limit?: number;
}

export interface PatchOrganizationRequest {
    id: string;
    organization: OrganizationUpdate;
}

export interface RetrieveOrganizationRequest {
    id: string;
    fields?: string;
}

/**
 *
 */
export class OrganizationApi extends runtime.BaseAPI {
    /**
     * This operation creates a Organization entity.
     * Creates a Organization
     */
    async createOrganizationRaw(
        requestParameters: CreateOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters["organization"] == null) {
            throw new runtime.RequiredError(
                "organization",
                'Required parameter "organization" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json;charset=utf-8";

        const response = await this.request(
            {
                path: `/organization`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: OrganizationCreateToJSON(requestParameters["organization"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganizationFromJSON(jsonValue)
        );
    }

    /**
     * This operation creates a Organization entity.
     * Creates a Organization
     */
    async createOrganization(
        requestParameters: CreateOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Organization> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation deletes a Organization entity.
     * Deletes a Organization
     */
    async deleteOrganizationRaw(
        requestParameters: DeleteOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling deleteOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/organization/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This operation deletes a Organization entity.
     * Deletes a Organization
     */
    async deleteOrganization(
        requestParameters: DeleteOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.deleteOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * This operation list or find Organization entities
     * List or find Organization objects
     */
    async listOrganizationRaw(
        requestParameters: ListOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<Organization>>> {
        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/organization`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(OrganizationFromJSON)
        );
    }

    /**
     * This operation list or find Organization entities
     * List or find Organization objects
     */
    async listOrganization(
        requestParameters: ListOrganizationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<Organization>> {
        const response = await this.listOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation updates partially a Organization entity.
     * Updates partially a Organization
     */
    async patchOrganizationRaw(
        requestParameters: PatchOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling patchOrganization().'
            );
        }

        if (requestParameters["organization"] == null) {
            throw new runtime.RequiredError(
                "organization",
                'Required parameter "organization" was null or undefined when calling patchOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json;charset=utf-8";

        const response = await this.request(
            {
                path: `/organization/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: OrganizationUpdateToJSON(requestParameters["organization"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganizationFromJSON(jsonValue)
        );
    }

    /**
     * This operation updates partially a Organization entity.
     * Updates partially a Organization
     */
    async patchOrganization(
        requestParameters: PatchOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Organization> {
        const response = await this.patchOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
     * Retrieves a Organization by ID
     */
    async retrieveOrganizationRaw(
        requestParameters: RetrieveOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling retrieveOrganization().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/organization/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OrganizationFromJSON(jsonValue)
        );
    }

    /**
     * This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
     * Retrieves a Organization by ID
     */
    async retrieveOrganization(
        requestParameters: RetrieveOrganizationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Organization> {
        const response = await this.retrieveOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
