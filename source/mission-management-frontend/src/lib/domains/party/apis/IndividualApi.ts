/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Individual, IndividualCreate, IndividualUpdate } from "../models/index";
import {
    IndividualFromJSON,
    IndividualToJSON,
    IndividualCreateFromJSON,
    IndividualCreateToJSON,
    IndividualUpdateFromJSON,
    IndividualUpdateToJSON
} from "../models/index";

export interface CreateIndividualRequest {
    individual: IndividualCreate;
}

export interface DeleteIndividualRequest {
    id: string;
}

export interface ListIndividualRequest {
    fields?: string;
    offset?: number;
    limit?: number;
}

export interface PatchIndividualRequest {
    id: string;
    individual: IndividualUpdate;
}

export interface RetrieveIndividualRequest {
    id: string;
    fields?: string;
}

/**
 *
 */
export class IndividualApi extends runtime.BaseAPI {
    /**
     * This operation creates a Individual entity.
     * Creates a Individual
     */
    async createIndividualRaw(
        requestParameters: CreateIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Individual>> {
        if (requestParameters["individual"] == null) {
            throw new runtime.RequiredError(
                "individual",
                'Required parameter "individual" was null or undefined when calling createIndividual().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json;charset=utf-8";

        const response = await this.request(
            {
                path: `/individual`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: IndividualCreateToJSON(requestParameters["individual"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualFromJSON(jsonValue));
    }

    /**
     * This operation creates a Individual entity.
     * Creates a Individual
     */
    async createIndividual(
        requestParameters: CreateIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Individual> {
        const response = await this.createIndividualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation deletes a Individual entity.
     * Deletes a Individual
     */
    async deleteIndividualRaw(
        requestParameters: DeleteIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling deleteIndividual().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/individual/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This operation deletes a Individual entity.
     * Deletes a Individual
     */
    async deleteIndividual(
        requestParameters: DeleteIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.deleteIndividualRaw(requestParameters, initOverrides);
    }

    /**
     * This operation list or find Individual entities
     * List or find Individual objects
     */
    async listIndividualRaw(
        requestParameters: ListIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<Individual>>> {
        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/individual`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(IndividualFromJSON)
        );
    }

    /**
     * This operation list or find Individual entities
     * List or find Individual objects
     */
    async listIndividual(
        requestParameters: ListIndividualRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<Individual>> {
        const response = await this.listIndividualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation updates partially a Individual entity.
     * Updates partially a Individual
     */
    async patchIndividualRaw(
        requestParameters: PatchIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Individual>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling patchIndividual().'
            );
        }

        if (requestParameters["individual"] == null) {
            throw new runtime.RequiredError(
                "individual",
                'Required parameter "individual" was null or undefined when calling patchIndividual().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json;charset=utf-8";

        const response = await this.request(
            {
                path: `/individual/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: IndividualUpdateToJSON(requestParameters["individual"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualFromJSON(jsonValue));
    }

    /**
     * This operation updates partially a Individual entity.
     * Updates partially a Individual
     */
    async patchIndividual(
        requestParameters: PatchIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Individual> {
        const response = await this.patchIndividualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
     * Retrieves a Individual by ID
     */
    async retrieveIndividualRaw(
        requestParameters: RetrieveIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Individual>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling retrieveIndividual().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters["fields"] != null) {
            queryParameters["fields"] = requestParameters["fields"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/individual/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualFromJSON(jsonValue));
    }

    /**
     * This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
     * Retrieves a Individual by ID
     */
    async retrieveIndividual(
        requestParameters: RetrieveIndividualRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Individual> {
        const response = await this.retrieveIndividualRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
