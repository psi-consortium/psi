/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";

/**
 * Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).
 * @export
 * @interface Skill
 */
export interface Skill {
    /**
     * unique identifier
     * @type {string}
     * @memberof Skill
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof Skill
     */
    href?: string;
    /**
     * A free text comment linked to the evaluation done
     * @type {string}
     * @memberof Skill
     */
    comment?: string;
    /**
     * Level of expertise in a skill evaluated for an individual
     * @type {string}
     * @memberof Skill
     */
    evaluatedLevel?: string;
    /**
     * Code of the skill
     * @type {string}
     * @memberof Skill
     */
    skillCode?: string;
    /**
     * Name of the skill such as Java language,â€¦
     * @type {string}
     * @memberof Skill
     */
    skillName?: string;
    /**
     *
     * @type {TimePeriod}
     * @memberof Skill
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof Skill
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof Skill
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof Skill
     */
    type?: string;
}

/**
 * Check if a given object implements the Skill interface.
 */
export function instanceOfSkill(value: object): value is Skill {
    return true;
}

export function SkillFromJSON(json: any): Skill {
    return SkillFromJSONTyped(json, false);
}

export function SkillFromJSONTyped(json: any, ignoreDiscriminator: boolean): Skill {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        comment: json["comment"] == null ? undefined : json["comment"],
        evaluatedLevel: json["evaluatedLevel"] == null ? undefined : json["evaluatedLevel"],
        skillCode: json["skillCode"] == null ? undefined : json["skillCode"],
        skillName: json["skillName"] == null ? undefined : json["skillName"],
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function SkillToJSON(json: any): Skill {
    return SkillToJSONTyped(json, false);
}

export function SkillToJSONTyped(value?: Skill | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        comment: value["comment"],
        evaluatedLevel: value["evaluatedLevel"],
        skillCode: value["skillCode"],
        skillName: value["skillName"],
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
