/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Disability } from "./Disability";
import {
    DisabilityFromJSON,
    DisabilityFromJSONTyped,
    DisabilityToJSON,
    DisabilityToJSONTyped
} from "./Disability";
import type { PartyCreditProfile } from "./PartyCreditProfile";
import {
    PartyCreditProfileFromJSON,
    PartyCreditProfileFromJSONTyped,
    PartyCreditProfileToJSON,
    PartyCreditProfileToJSONTyped
} from "./PartyCreditProfile";
import type { Skill } from "./Skill";
import { SkillFromJSON, SkillFromJSONTyped, SkillToJSON, SkillToJSONTyped } from "./Skill";
import type { ContactMedium } from "./ContactMedium";
import {
    ContactMediumFromJSON,
    ContactMediumFromJSONTyped,
    ContactMediumToJSON,
    ContactMediumToJSONTyped
} from "./ContactMedium";
import type { ExternalReference } from "./ExternalReference";
import {
    ExternalReferenceFromJSON,
    ExternalReferenceFromJSONTyped,
    ExternalReferenceToJSON,
    ExternalReferenceToJSONTyped
} from "./ExternalReference";
import type { LanguageAbility } from "./LanguageAbility";
import {
    LanguageAbilityFromJSON,
    LanguageAbilityFromJSONTyped,
    LanguageAbilityToJSON,
    LanguageAbilityToJSONTyped
} from "./LanguageAbility";
import type { Characteristic } from "./Characteristic";
import {
    CharacteristicFromJSON,
    CharacteristicFromJSONTyped,
    CharacteristicToJSON,
    CharacteristicToJSONTyped
} from "./Characteristic";
import type { IndividualIdentification } from "./IndividualIdentification";
import {
    IndividualIdentificationFromJSON,
    IndividualIdentificationFromJSONTyped,
    IndividualIdentificationToJSON,
    IndividualIdentificationToJSONTyped
} from "./IndividualIdentification";
import type { RelatedParty } from "./RelatedParty";
import {
    RelatedPartyFromJSON,
    RelatedPartyFromJSONTyped,
    RelatedPartyToJSON,
    RelatedPartyToJSONTyped
} from "./RelatedParty";
import type { OtherNameIndividual } from "./OtherNameIndividual";
import {
    OtherNameIndividualFromJSON,
    OtherNameIndividualFromJSONTyped,
    OtherNameIndividualToJSON,
    OtherNameIndividualToJSONTyped
} from "./OtherNameIndividual";
import type { IndividualStateType } from "./IndividualStateType";
import {
    IndividualStateTypeFromJSON,
    IndividualStateTypeFromJSONTyped,
    IndividualStateTypeToJSON,
    IndividualStateTypeToJSONTyped
} from "./IndividualStateType";
import type { TaxExemptionCertificate } from "./TaxExemptionCertificate";
import {
    TaxExemptionCertificateFromJSON,
    TaxExemptionCertificateFromJSONTyped,
    TaxExemptionCertificateToJSON,
    TaxExemptionCertificateToJSONTyped
} from "./TaxExemptionCertificate";

/**
 * Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.
 * Skipped properties: id,href
 * @export
 * @interface IndividualUpdate
 */
export interface IndividualUpdate {
    /**
     * e.g. Baron, Graf, Earl,…
     * @type {string}
     * @memberof IndividualUpdate
     */
    aristocraticTitle?: string;
    /**
     * Birth date
     * @type {Date}
     * @memberof IndividualUpdate
     */
    birthDate?: Date;
    /**
     * Country where the individual was born
     * @type {string}
     * @memberof IndividualUpdate
     */
    countryOfBirth?: string;
    /**
     * Date of death
     * @type {Date}
     * @memberof IndividualUpdate
     */
    deathDate?: Date;
    /**
     * Contains the non-chosen or inherited name. Also known as last name in the Western context
     * @type {string}
     * @memberof IndividualUpdate
     */
    familyName?: string;
    /**
     * Family name prefix
     * @type {string}
     * @memberof IndividualUpdate
     */
    familyNamePrefix?: string;
    /**
     * A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…)
     * @type {string}
     * @memberof IndividualUpdate
     */
    formattedName?: string;
    /**
     * Full name flatten (first, middle, and last names)
     * @type {string}
     * @memberof IndividualUpdate
     */
    fullName?: string;
    /**
     * Gender
     * @type {string}
     * @memberof IndividualUpdate
     */
    gender?: string;
    /**
     * e.g.. Sr, Jr, III (the third),…
     * @type {string}
     * @memberof IndividualUpdate
     */
    generation?: string;
    /**
     * First name of the individual
     * @type {string}
     * @memberof IndividualUpdate
     */
    givenName?: string;
    /**
     * Legal name or birth name (name one has for official purposes)
     * @type {string}
     * @memberof IndividualUpdate
     */
    legalName?: string;
    /**
     * Temporary current location od the individual (may be used if the individual has approved its sharing)
     * @type {string}
     * @memberof IndividualUpdate
     */
    location?: string;
    /**
     * Marital status (married, divorced, widow ...)
     * @type {string}
     * @memberof IndividualUpdate
     */
    maritalStatus?: string;
    /**
     * Middles name or initial
     * @type {string}
     * @memberof IndividualUpdate
     */
    middleName?: string;
    /**
     * Nationality
     * @type {string}
     * @memberof IndividualUpdate
     */
    nationality?: string;
    /**
     * Reference to the place where the individual was born
     * @type {string}
     * @memberof IndividualUpdate
     */
    placeOfBirth?: string;
    /**
     * Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname
     * @type {string}
     * @memberof IndividualUpdate
     */
    preferredGivenName?: string;
    /**
     * Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...
     * @type {string}
     * @memberof IndividualUpdate
     */
    title?: string;
    /**
     *
     * @type {Array<ContactMedium>}
     * @memberof IndividualUpdate
     */
    contactMedium?: Array<ContactMedium>;
    /**
     *
     * @type {Array<PartyCreditProfile>}
     * @memberof IndividualUpdate
     */
    creditRating?: Array<PartyCreditProfile>;
    /**
     *
     * @type {Array<Disability>}
     * @memberof IndividualUpdate
     */
    disability?: Array<Disability>;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof IndividualUpdate
     */
    externalReference?: Array<ExternalReference>;
    /**
     *
     * @type {Array<IndividualIdentification>}
     * @memberof IndividualUpdate
     */
    individualIdentification?: Array<IndividualIdentification>;
    /**
     *
     * @type {Array<LanguageAbility>}
     * @memberof IndividualUpdate
     */
    languageAbility?: Array<LanguageAbility>;
    /**
     *
     * @type {Array<OtherNameIndividual>}
     * @memberof IndividualUpdate
     */
    otherName?: Array<OtherNameIndividual>;
    /**
     *
     * @type {Array<Characteristic>}
     * @memberof IndividualUpdate
     */
    partyCharacteristic?: Array<Characteristic>;
    /**
     *
     * @type {Array<RelatedParty>}
     * @memberof IndividualUpdate
     */
    relatedParty?: Array<RelatedParty>;
    /**
     *
     * @type {Array<Skill>}
     * @memberof IndividualUpdate
     */
    skill?: Array<Skill>;
    /**
     *
     * @type {IndividualStateType}
     * @memberof IndividualUpdate
     */
    status?: IndividualStateType;
    /**
     *
     * @type {Array<TaxExemptionCertificate>}
     * @memberof IndividualUpdate
     */
    taxExemptionCertificate?: Array<TaxExemptionCertificate>;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof IndividualUpdate
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof IndividualUpdate
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof IndividualUpdate
     */
    type?: string;
}

/**
 * Check if a given object implements the IndividualUpdate interface.
 */
export function instanceOfIndividualUpdate(value: object): value is IndividualUpdate {
    return true;
}

export function IndividualUpdateFromJSON(json: any): IndividualUpdate {
    return IndividualUpdateFromJSONTyped(json, false);
}

export function IndividualUpdateFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): IndividualUpdate {
    if (json == null) {
        return json;
    }
    return {
        aristocraticTitle:
            json["aristocraticTitle"] == null ? undefined : json["aristocraticTitle"],
        birthDate: json["birthDate"] == null ? undefined : new Date(json["birthDate"]),
        countryOfBirth: json["countryOfBirth"] == null ? undefined : json["countryOfBirth"],
        deathDate: json["deathDate"] == null ? undefined : new Date(json["deathDate"]),
        familyName: json["familyName"] == null ? undefined : json["familyName"],
        familyNamePrefix: json["familyNamePrefix"] == null ? undefined : json["familyNamePrefix"],
        formattedName: json["formattedName"] == null ? undefined : json["formattedName"],
        fullName: json["fullName"] == null ? undefined : json["fullName"],
        gender: json["gender"] == null ? undefined : json["gender"],
        generation: json["generation"] == null ? undefined : json["generation"],
        givenName: json["givenName"] == null ? undefined : json["givenName"],
        legalName: json["legalName"] == null ? undefined : json["legalName"],
        location: json["location"] == null ? undefined : json["location"],
        maritalStatus: json["maritalStatus"] == null ? undefined : json["maritalStatus"],
        middleName: json["middleName"] == null ? undefined : json["middleName"],
        nationality: json["nationality"] == null ? undefined : json["nationality"],
        placeOfBirth: json["placeOfBirth"] == null ? undefined : json["placeOfBirth"],
        preferredGivenName:
            json["preferredGivenName"] == null ? undefined : json["preferredGivenName"],
        title: json["title"] == null ? undefined : json["title"],
        contactMedium:
            json["contactMedium"] == null
                ? undefined
                : (json["contactMedium"] as Array<any>).map(ContactMediumFromJSON),
        creditRating:
            json["creditRating"] == null
                ? undefined
                : (json["creditRating"] as Array<any>).map(PartyCreditProfileFromJSON),
        disability:
            json["disability"] == null
                ? undefined
                : (json["disability"] as Array<any>).map(DisabilityFromJSON),
        externalReference:
            json["externalReference"] == null
                ? undefined
                : (json["externalReference"] as Array<any>).map(ExternalReferenceFromJSON),
        individualIdentification:
            json["individualIdentification"] == null
                ? undefined
                : (json["individualIdentification"] as Array<any>).map(
                      IndividualIdentificationFromJSON
                  ),
        languageAbility:
            json["languageAbility"] == null
                ? undefined
                : (json["languageAbility"] as Array<any>).map(LanguageAbilityFromJSON),
        otherName:
            json["otherName"] == null
                ? undefined
                : (json["otherName"] as Array<any>).map(OtherNameIndividualFromJSON),
        partyCharacteristic:
            json["partyCharacteristic"] == null
                ? undefined
                : (json["partyCharacteristic"] as Array<any>).map(CharacteristicFromJSON),
        relatedParty:
            json["relatedParty"] == null
                ? undefined
                : (json["relatedParty"] as Array<any>).map(RelatedPartyFromJSON),
        skill: json["skill"] == null ? undefined : (json["skill"] as Array<any>).map(SkillFromJSON),
        status: json["status"] == null ? undefined : IndividualStateTypeFromJSON(json["status"]),
        taxExemptionCertificate:
            json["taxExemptionCertificate"] == null
                ? undefined
                : (json["taxExemptionCertificate"] as Array<any>).map(
                      TaxExemptionCertificateFromJSON
                  ),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function IndividualUpdateToJSON(json: any): IndividualUpdate {
    return IndividualUpdateToJSONTyped(json, false);
}

export function IndividualUpdateToJSONTyped(
    value?: IndividualUpdate | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        aristocraticTitle: value["aristocraticTitle"],
        birthDate: value["birthDate"] == null ? undefined : value["birthDate"].toISOString(),
        countryOfBirth: value["countryOfBirth"],
        deathDate: value["deathDate"] == null ? undefined : value["deathDate"].toISOString(),
        familyName: value["familyName"],
        familyNamePrefix: value["familyNamePrefix"],
        formattedName: value["formattedName"],
        fullName: value["fullName"],
        gender: value["gender"],
        generation: value["generation"],
        givenName: value["givenName"],
        legalName: value["legalName"],
        location: value["location"],
        maritalStatus: value["maritalStatus"],
        middleName: value["middleName"],
        nationality: value["nationality"],
        placeOfBirth: value["placeOfBirth"],
        preferredGivenName: value["preferredGivenName"],
        title: value["title"],
        contactMedium:
            value["contactMedium"] == null
                ? undefined
                : (value["contactMedium"] as Array<any>).map(ContactMediumToJSON),
        creditRating:
            value["creditRating"] == null
                ? undefined
                : (value["creditRating"] as Array<any>).map(PartyCreditProfileToJSON),
        disability:
            value["disability"] == null
                ? undefined
                : (value["disability"] as Array<any>).map(DisabilityToJSON),
        externalReference:
            value["externalReference"] == null
                ? undefined
                : (value["externalReference"] as Array<any>).map(ExternalReferenceToJSON),
        individualIdentification:
            value["individualIdentification"] == null
                ? undefined
                : (value["individualIdentification"] as Array<any>).map(
                      IndividualIdentificationToJSON
                  ),
        languageAbility:
            value["languageAbility"] == null
                ? undefined
                : (value["languageAbility"] as Array<any>).map(LanguageAbilityToJSON),
        otherName:
            value["otherName"] == null
                ? undefined
                : (value["otherName"] as Array<any>).map(OtherNameIndividualToJSON),
        partyCharacteristic:
            value["partyCharacteristic"] == null
                ? undefined
                : (value["partyCharacteristic"] as Array<any>).map(CharacteristicToJSON),
        relatedParty:
            value["relatedParty"] == null
                ? undefined
                : (value["relatedParty"] as Array<any>).map(RelatedPartyToJSON),
        skill: value["skill"] == null ? undefined : (value["skill"] as Array<any>).map(SkillToJSON),
        status: IndividualStateTypeToJSON(value["status"]),
        taxExemptionCertificate:
            value["taxExemptionCertificate"] == null
                ? undefined
                : (value["taxExemptionCertificate"] as Array<any>).map(
                      TaxExemptionCertificateToJSON
                  ),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
