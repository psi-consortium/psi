/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";
import type { Quantity } from "./Quantity";
import {
    QuantityFromJSON,
    QuantityFromJSONTyped,
    QuantityToJSON,
    QuantityToJSONTyped
} from "./Quantity";

/**
 * Reference to an attachment or a document. A document comprises of multiple attachments, while a single attachment has uri, mimeType, size, etc.
 * @export
 * @interface AttachmentOrDocumentRef
 */
export interface AttachmentOrDocumentRef {
    /**
     * Unique identifier for this particular attachment
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    id?: string;
    /**
     * URI for this Attachment
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    href?: string;
    /**
     * Attachment type such as video, picture
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    attachmentType?: string;
    /**
     * A narrative text describing the content of the attachment
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    description?: string;
    /**
     * Attachment mime type such as extension file for video, picture and document
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    mimeType?: string;
    /**
     * The name of the attachment
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    name?: string;
    /**
     * Uniform Resource Locator, is a web page address (a subset of URI)
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    url?: string;
    /**
     *
     * @type {Quantity}
     * @memberof AttachmentOrDocumentRef
     */
    size?: Quantity;
    /**
     *
     * @type {TimePeriod}
     * @memberof AttachmentOrDocumentRef
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    type?: string;
    /**
     * The actual type of the target instance when needed for disambiguation.
     * @type {string}
     * @memberof AttachmentOrDocumentRef
     */
    referredType?: string;
}

/**
 * Check if a given object implements the AttachmentOrDocumentRef interface.
 */
export function instanceOfAttachmentOrDocumentRef(value: object): value is AttachmentOrDocumentRef {
    return true;
}

export function AttachmentOrDocumentRefFromJSON(json: any): AttachmentOrDocumentRef {
    return AttachmentOrDocumentRefFromJSONTyped(json, false);
}

export function AttachmentOrDocumentRefFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): AttachmentOrDocumentRef {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        attachmentType: json["attachmentType"] == null ? undefined : json["attachmentType"],
        description: json["description"] == null ? undefined : json["description"],
        mimeType: json["mimeType"] == null ? undefined : json["mimeType"],
        name: json["name"] == null ? undefined : json["name"],
        url: json["url"] == null ? undefined : json["url"],
        size: json["size"] == null ? undefined : QuantityFromJSON(json["size"]),
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"],
        referredType: json["@referredType"] == null ? undefined : json["@referredType"]
    };
}

export function AttachmentOrDocumentRefToJSON(json: any): AttachmentOrDocumentRef {
    return AttachmentOrDocumentRefToJSONTyped(json, false);
}

export function AttachmentOrDocumentRefToJSONTyped(
    value?: AttachmentOrDocumentRef | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        attachmentType: value["attachmentType"],
        description: value["description"],
        mimeType: value["mimeType"],
        name: value["name"],
        url: value["url"],
        size: QuantityToJSON(value["size"]),
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"],
        "@referredType": value["referredType"]
    };
}
