/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { OrganizationRef } from "./OrganizationRef";
import {
    OrganizationRefFromJSON,
    OrganizationRefFromJSONTyped,
    OrganizationRefToJSON,
    OrganizationRefToJSONTyped
} from "./OrganizationRef";

/**
 * Child references of an organization in a structure of organizations.
 * @export
 * @interface OrganizationChildRelationship
 */
export interface OrganizationChildRelationship {
    /**
     * unique identifier
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    href?: string;
    /**
     * Type of the relationship. Could be juridical, hierarchical, geographical, functional for example.
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    relationshipType?: string;
    /**
     *
     * @type {OrganizationRef}
     * @memberof OrganizationChildRelationship
     */
    organization?: OrganizationRef;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof OrganizationChildRelationship
     */
    type?: string;
}

/**
 * Check if a given object implements the OrganizationChildRelationship interface.
 */
export function instanceOfOrganizationChildRelationship(
    value: object
): value is OrganizationChildRelationship {
    return true;
}

export function OrganizationChildRelationshipFromJSON(json: any): OrganizationChildRelationship {
    return OrganizationChildRelationshipFromJSONTyped(json, false);
}

export function OrganizationChildRelationshipFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): OrganizationChildRelationship {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        relationshipType: json["relationshipType"] == null ? undefined : json["relationshipType"],
        organization:
            json["organization"] == null
                ? undefined
                : OrganizationRefFromJSON(json["organization"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function OrganizationChildRelationshipToJSON(json: any): OrganizationChildRelationship {
    return OrganizationChildRelationshipToJSONTyped(json, false);
}

export function OrganizationChildRelationshipToJSONTyped(
    value?: OrganizationChildRelationship | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        relationshipType: value["relationshipType"],
        organization: OrganizationRefToJSON(value["organization"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
