/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";

/**
 * Keeps track of other names, for example the old name of a woman before marriage or an artist name.
 * @export
 * @interface OtherNameIndividual
 */
export interface OtherNameIndividual {
    /**
     * unique identifier
     * @type {string}
     * @memberof OtherNameIndividual
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof OtherNameIndividual
     */
    href?: string;
    /**
     * e.g. Baron, Graf, Earl,…
     * @type {string}
     * @memberof OtherNameIndividual
     */
    aristocraticTitle?: string;
    /**
     * Contains the non-chosen or inherited name. Also known as last name in the Western context
     * @type {string}
     * @memberof OtherNameIndividual
     */
    familyName?: string;
    /**
     * Family name prefix
     * @type {string}
     * @memberof OtherNameIndividual
     */
    familyNamePrefix?: string;
    /**
     * . A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…)
     * @type {string}
     * @memberof OtherNameIndividual
     */
    formattedName?: string;
    /**
     * Full name flatten (first, middle, and last names)
     * @type {string}
     * @memberof OtherNameIndividual
     */
    fullName?: string;
    /**
     * e.g. Sr, Jr…
     * @type {string}
     * @memberof OtherNameIndividual
     */
    generation?: string;
    /**
     * First name
     * @type {string}
     * @memberof OtherNameIndividual
     */
    givenName?: string;
    /**
     * Legal name or birth name (name one has for official purposes)
     * @type {string}
     * @memberof OtherNameIndividual
     */
    legalName?: string;
    /**
     * Middle name or initial
     * @type {string}
     * @memberof OtherNameIndividual
     */
    middleName?: string;
    /**
     * Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname
     * @type {string}
     * @memberof OtherNameIndividual
     */
    preferredGivenName?: string;
    /**
     * Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,....
     * @type {string}
     * @memberof OtherNameIndividual
     */
    title?: string;
    /**
     *
     * @type {TimePeriod}
     * @memberof OtherNameIndividual
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof OtherNameIndividual
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof OtherNameIndividual
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof OtherNameIndividual
     */
    type?: string;
}

/**
 * Check if a given object implements the OtherNameIndividual interface.
 */
export function instanceOfOtherNameIndividual(value: object): value is OtherNameIndividual {
    return true;
}

export function OtherNameIndividualFromJSON(json: any): OtherNameIndividual {
    return OtherNameIndividualFromJSONTyped(json, false);
}

export function OtherNameIndividualFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): OtherNameIndividual {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        aristocraticTitle:
            json["aristocraticTitle"] == null ? undefined : json["aristocraticTitle"],
        familyName: json["familyName"] == null ? undefined : json["familyName"],
        familyNamePrefix: json["familyNamePrefix"] == null ? undefined : json["familyNamePrefix"],
        formattedName: json["formattedName"] == null ? undefined : json["formattedName"],
        fullName: json["fullName"] == null ? undefined : json["fullName"],
        generation: json["generation"] == null ? undefined : json["generation"],
        givenName: json["givenName"] == null ? undefined : json["givenName"],
        legalName: json["legalName"] == null ? undefined : json["legalName"],
        middleName: json["middleName"] == null ? undefined : json["middleName"],
        preferredGivenName:
            json["preferredGivenName"] == null ? undefined : json["preferredGivenName"],
        title: json["title"] == null ? undefined : json["title"],
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function OtherNameIndividualToJSON(json: any): OtherNameIndividual {
    return OtherNameIndividualToJSONTyped(json, false);
}

export function OtherNameIndividualToJSONTyped(
    value?: OtherNameIndividual | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        aristocraticTitle: value["aristocraticTitle"],
        familyName: value["familyName"],
        familyNamePrefix: value["familyNamePrefix"],
        formattedName: value["formattedName"],
        fullName: value["fullName"],
        generation: value["generation"],
        givenName: value["givenName"],
        legalName: value["legalName"],
        middleName: value["middleName"],
        preferredGivenName: value["preferredGivenName"],
        title: value["title"],
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
