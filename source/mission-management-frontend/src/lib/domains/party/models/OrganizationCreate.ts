/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { OrganizationParentRelationship } from "./OrganizationParentRelationship";
import {
    OrganizationParentRelationshipFromJSON,
    OrganizationParentRelationshipFromJSONTyped,
    OrganizationParentRelationshipToJSON,
    OrganizationParentRelationshipToJSONTyped
} from "./OrganizationParentRelationship";
import type { PartyCreditProfile } from "./PartyCreditProfile";
import {
    PartyCreditProfileFromJSON,
    PartyCreditProfileFromJSONTyped,
    PartyCreditProfileToJSON,
    PartyCreditProfileToJSONTyped
} from "./PartyCreditProfile";
import type { ContactMedium } from "./ContactMedium";
import {
    ContactMediumFromJSON,
    ContactMediumFromJSONTyped,
    ContactMediumToJSON,
    ContactMediumToJSONTyped
} from "./ContactMedium";
import type { OrganizationIdentification } from "./OrganizationIdentification";
import {
    OrganizationIdentificationFromJSON,
    OrganizationIdentificationFromJSONTyped,
    OrganizationIdentificationToJSON,
    OrganizationIdentificationToJSONTyped
} from "./OrganizationIdentification";
import type { ExternalReference } from "./ExternalReference";
import {
    ExternalReferenceFromJSON,
    ExternalReferenceFromJSONTyped,
    ExternalReferenceToJSON,
    ExternalReferenceToJSONTyped
} from "./ExternalReference";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";
import type { Characteristic } from "./Characteristic";
import {
    CharacteristicFromJSON,
    CharacteristicFromJSONTyped,
    CharacteristicToJSON,
    CharacteristicToJSONTyped
} from "./Characteristic";
import type { OtherNameOrganization } from "./OtherNameOrganization";
import {
    OtherNameOrganizationFromJSON,
    OtherNameOrganizationFromJSONTyped,
    OtherNameOrganizationToJSON,
    OtherNameOrganizationToJSONTyped
} from "./OtherNameOrganization";
import type { RelatedParty } from "./RelatedParty";
import {
    RelatedPartyFromJSON,
    RelatedPartyFromJSONTyped,
    RelatedPartyToJSON,
    RelatedPartyToJSONTyped
} from "./RelatedParty";
import type { OrganizationChildRelationship } from "./OrganizationChildRelationship";
import {
    OrganizationChildRelationshipFromJSON,
    OrganizationChildRelationshipFromJSONTyped,
    OrganizationChildRelationshipToJSON,
    OrganizationChildRelationshipToJSONTyped
} from "./OrganizationChildRelationship";
import type { OrganizationStateType } from "./OrganizationStateType";
import {
    OrganizationStateTypeFromJSON,
    OrganizationStateTypeFromJSONTyped,
    OrganizationStateTypeToJSON,
    OrganizationStateTypeToJSONTyped
} from "./OrganizationStateType";
import type { TaxExemptionCertificate } from "./TaxExemptionCertificate";
import {
    TaxExemptionCertificateFromJSON,
    TaxExemptionCertificateFromJSONTyped,
    TaxExemptionCertificateToJSON,
    TaxExemptionCertificateToJSONTyped
} from "./TaxExemptionCertificate";

/**
 * Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.
 * Skipped properties: id,href
 * @export
 * @interface OrganizationCreate
 */
export interface OrganizationCreate {
    /**
     * If value is true, the organization is the head office
     * @type {boolean}
     * @memberof OrganizationCreate
     */
    isHeadOffice?: boolean;
    /**
     * If value is true, the organization is a legal entity known by a national referential.
     * @type {boolean}
     * @memberof OrganizationCreate
     */
    isLegalEntity?: boolean;
    /**
     * Organization name (department name for example)
     * @type {string}
     * @memberof OrganizationCreate
     */
    name?: string;
    /**
     * Type of the name : Co, Inc, Ltd,â€¦
     * @type {string}
     * @memberof OrganizationCreate
     */
    nameType?: string;
    /**
     * Type of Organization (company, department...)
     * @type {string}
     * @memberof OrganizationCreate
     */
    organizationType?: string;
    /**
     * Name that the organization (unit) trades under
     * @type {string}
     * @memberof OrganizationCreate
     */
    tradingName: string;
    /**
     *
     * @type {Array<ContactMedium>}
     * @memberof OrganizationCreate
     */
    contactMedium?: Array<ContactMedium>;
    /**
     *
     * @type {Array<PartyCreditProfile>}
     * @memberof OrganizationCreate
     */
    creditRating?: Array<PartyCreditProfile>;
    /**
     *
     * @type {TimePeriod}
     * @memberof OrganizationCreate
     */
    existsDuring?: TimePeriod;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof OrganizationCreate
     */
    externalReference?: Array<ExternalReference>;
    /**
     *
     * @type {Array<OrganizationChildRelationship>}
     * @memberof OrganizationCreate
     */
    organizationChildRelationship?: Array<OrganizationChildRelationship>;
    /**
     *
     * @type {Array<OrganizationIdentification>}
     * @memberof OrganizationCreate
     */
    organizationIdentification?: Array<OrganizationIdentification>;
    /**
     *
     * @type {OrganizationParentRelationship}
     * @memberof OrganizationCreate
     */
    organizationParentRelationship?: OrganizationParentRelationship;
    /**
     *
     * @type {Array<OtherNameOrganization>}
     * @memberof OrganizationCreate
     */
    otherName?: Array<OtherNameOrganization>;
    /**
     *
     * @type {Array<Characteristic>}
     * @memberof OrganizationCreate
     */
    partyCharacteristic?: Array<Characteristic>;
    /**
     *
     * @type {Array<RelatedParty>}
     * @memberof OrganizationCreate
     */
    relatedParty?: Array<RelatedParty>;
    /**
     *
     * @type {OrganizationStateType}
     * @memberof OrganizationCreate
     */
    status?: OrganizationStateType;
    /**
     *
     * @type {Array<TaxExemptionCertificate>}
     * @memberof OrganizationCreate
     */
    taxExemptionCertificate?: Array<TaxExemptionCertificate>;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof OrganizationCreate
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof OrganizationCreate
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof OrganizationCreate
     */
    type?: string;
}

/**
 * Check if a given object implements the OrganizationCreate interface.
 */
export function instanceOfOrganizationCreate(value: object): value is OrganizationCreate {
    if (!("tradingName" in value) || value["tradingName"] === undefined) return false;
    return true;
}

export function OrganizationCreateFromJSON(json: any): OrganizationCreate {
    return OrganizationCreateFromJSONTyped(json, false);
}

export function OrganizationCreateFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): OrganizationCreate {
    if (json == null) {
        return json;
    }
    return {
        isHeadOffice: json["isHeadOffice"] == null ? undefined : json["isHeadOffice"],
        isLegalEntity: json["isLegalEntity"] == null ? undefined : json["isLegalEntity"],
        name: json["name"] == null ? undefined : json["name"],
        nameType: json["nameType"] == null ? undefined : json["nameType"],
        organizationType: json["organizationType"] == null ? undefined : json["organizationType"],
        tradingName: json["tradingName"],
        contactMedium:
            json["contactMedium"] == null
                ? undefined
                : (json["contactMedium"] as Array<any>).map(ContactMediumFromJSON),
        creditRating:
            json["creditRating"] == null
                ? undefined
                : (json["creditRating"] as Array<any>).map(PartyCreditProfileFromJSON),
        existsDuring:
            json["existsDuring"] == null ? undefined : TimePeriodFromJSON(json["existsDuring"]),
        externalReference:
            json["externalReference"] == null
                ? undefined
                : (json["externalReference"] as Array<any>).map(ExternalReferenceFromJSON),
        organizationChildRelationship:
            json["organizationChildRelationship"] == null
                ? undefined
                : (json["organizationChildRelationship"] as Array<any>).map(
                      OrganizationChildRelationshipFromJSON
                  ),
        organizationIdentification:
            json["organizationIdentification"] == null
                ? undefined
                : (json["organizationIdentification"] as Array<any>).map(
                      OrganizationIdentificationFromJSON
                  ),
        organizationParentRelationship:
            json["organizationParentRelationship"] == null
                ? undefined
                : OrganizationParentRelationshipFromJSON(json["organizationParentRelationship"]),
        otherName:
            json["otherName"] == null
                ? undefined
                : (json["otherName"] as Array<any>).map(OtherNameOrganizationFromJSON),
        partyCharacteristic:
            json["partyCharacteristic"] == null
                ? undefined
                : (json["partyCharacteristic"] as Array<any>).map(CharacteristicFromJSON),
        relatedParty:
            json["relatedParty"] == null
                ? undefined
                : (json["relatedParty"] as Array<any>).map(RelatedPartyFromJSON),
        status: json["status"] == null ? undefined : OrganizationStateTypeFromJSON(json["status"]),
        taxExemptionCertificate:
            json["taxExemptionCertificate"] == null
                ? undefined
                : (json["taxExemptionCertificate"] as Array<any>).map(
                      TaxExemptionCertificateFromJSON
                  ),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function OrganizationCreateToJSON(json: any): OrganizationCreate {
    return OrganizationCreateToJSONTyped(json, false);
}

export function OrganizationCreateToJSONTyped(
    value?: OrganizationCreate | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        isHeadOffice: value["isHeadOffice"],
        isLegalEntity: value["isLegalEntity"],
        name: value["name"],
        nameType: value["nameType"],
        organizationType: value["organizationType"],
        tradingName: value["tradingName"],
        contactMedium:
            value["contactMedium"] == null
                ? undefined
                : (value["contactMedium"] as Array<any>).map(ContactMediumToJSON),
        creditRating:
            value["creditRating"] == null
                ? undefined
                : (value["creditRating"] as Array<any>).map(PartyCreditProfileToJSON),
        existsDuring: TimePeriodToJSON(value["existsDuring"]),
        externalReference:
            value["externalReference"] == null
                ? undefined
                : (value["externalReference"] as Array<any>).map(ExternalReferenceToJSON),
        organizationChildRelationship:
            value["organizationChildRelationship"] == null
                ? undefined
                : (value["organizationChildRelationship"] as Array<any>).map(
                      OrganizationChildRelationshipToJSON
                  ),
        organizationIdentification:
            value["organizationIdentification"] == null
                ? undefined
                : (value["organizationIdentification"] as Array<any>).map(
                      OrganizationIdentificationToJSON
                  ),
        organizationParentRelationship: OrganizationParentRelationshipToJSON(
            value["organizationParentRelationship"]
        ),
        otherName:
            value["otherName"] == null
                ? undefined
                : (value["otherName"] as Array<any>).map(OtherNameOrganizationToJSON),
        partyCharacteristic:
            value["partyCharacteristic"] == null
                ? undefined
                : (value["partyCharacteristic"] as Array<any>).map(CharacteristicToJSON),
        relatedParty:
            value["relatedParty"] == null
                ? undefined
                : (value["relatedParty"] as Array<any>).map(RelatedPartyToJSON),
        status: OrganizationStateTypeToJSON(value["status"]),
        taxExemptionCertificate:
            value["taxExemptionCertificate"] == null
                ? undefined
                : (value["taxExemptionCertificate"] as Array<any>).map(
                      TaxExemptionCertificateToJSON
                  ),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
