/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";
import type { AttachmentOrDocumentRef } from "./AttachmentOrDocumentRef";
import {
    AttachmentOrDocumentRefFromJSON,
    AttachmentOrDocumentRefFromJSONTyped,
    AttachmentOrDocumentRefToJSON,
    AttachmentOrDocumentRefToJSONTyped
} from "./AttachmentOrDocumentRef";

/**
 * Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)
 * @export
 * @interface IndividualIdentification
 */
export interface IndividualIdentification {
    /**
     * unique identifier
     * @type {string}
     * @memberof IndividualIdentification
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof IndividualIdentification
     */
    href?: string;
    /**
     * Identifier
     * @type {string}
     * @memberof IndividualIdentification
     */
    identificationId?: string;
    /**
     * Identification type (passport, national identity card, drivers license, social security number, birth certificate)
     * @type {string}
     * @memberof IndividualIdentification
     */
    identificationType?: string;
    /**
     * Authority which has issued the identifier, such as: social security, town hall
     * @type {string}
     * @memberof IndividualIdentification
     */
    issuingAuthority?: string;
    /**
     * Date at which the identifier was issued
     * @type {Date}
     * @memberof IndividualIdentification
     */
    issuingDate?: Date;
    /**
     *
     * @type {AttachmentOrDocumentRef}
     * @memberof IndividualIdentification
     */
    attachment?: AttachmentOrDocumentRef;
    /**
     *
     * @type {TimePeriod}
     * @memberof IndividualIdentification
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof IndividualIdentification
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof IndividualIdentification
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof IndividualIdentification
     */
    type?: string;
}

/**
 * Check if a given object implements the IndividualIdentification interface.
 */
export function instanceOfIndividualIdentification(
    value: object
): value is IndividualIdentification {
    return true;
}

export function IndividualIdentificationFromJSON(json: any): IndividualIdentification {
    return IndividualIdentificationFromJSONTyped(json, false);
}

export function IndividualIdentificationFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): IndividualIdentification {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        identificationId: json["identificationId"] == null ? undefined : json["identificationId"],
        identificationType:
            json["identificationType"] == null ? undefined : json["identificationType"],
        issuingAuthority: json["issuingAuthority"] == null ? undefined : json["issuingAuthority"],
        issuingDate: json["issuingDate"] == null ? undefined : new Date(json["issuingDate"]),
        attachment:
            json["attachment"] == null
                ? undefined
                : AttachmentOrDocumentRefFromJSON(json["attachment"]),
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function IndividualIdentificationToJSON(json: any): IndividualIdentification {
    return IndividualIdentificationToJSONTyped(json, false);
}

export function IndividualIdentificationToJSONTyped(
    value?: IndividualIdentification | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        identificationId: value["identificationId"],
        identificationType: value["identificationType"],
        issuingAuthority: value["issuingAuthority"],
        issuingDate: value["issuingDate"] == null ? undefined : value["issuingDate"].toISOString(),
        attachment: AttachmentOrDocumentRefToJSON(value["attachment"]),
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
