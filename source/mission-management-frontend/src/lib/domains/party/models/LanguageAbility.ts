/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";

/**
 * Ability of an individual to understand or converse in a language.
 * @export
 * @interface LanguageAbility
 */
export interface LanguageAbility {
    /**
     * unique identifier
     * @type {string}
     * @memberof LanguageAbility
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof LanguageAbility
     */
    href?: string;
    /**
     * A “true” value specifies whether the language is considered by the individual as his favourite one
     * @type {boolean}
     * @memberof LanguageAbility
     */
    isFavouriteLanguage?: boolean;
    /**
     * Language code (RFC 5646)
     * @type {string}
     * @memberof LanguageAbility
     */
    languageCode?: string;
    /**
     * Language name
     * @type {string}
     * @memberof LanguageAbility
     */
    languageName?: string;
    /**
     * Listening proficiency evaluated for this language
     * @type {string}
     * @memberof LanguageAbility
     */
    listeningProficiency?: string;
    /**
     * Reading proficiency evaluated for this language
     * @type {string}
     * @memberof LanguageAbility
     */
    readingProficiency?: string;
    /**
     * Speaking proficiency evaluated for this language
     * @type {string}
     * @memberof LanguageAbility
     */
    speakingProficiency?: string;
    /**
     * Writing proficiency evaluated for this language
     * @type {string}
     * @memberof LanguageAbility
     */
    writingProficiency?: string;
    /**
     *
     * @type {TimePeriod}
     * @memberof LanguageAbility
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof LanguageAbility
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof LanguageAbility
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof LanguageAbility
     */
    type?: string;
}

/**
 * Check if a given object implements the LanguageAbility interface.
 */
export function instanceOfLanguageAbility(value: object): value is LanguageAbility {
    return true;
}

export function LanguageAbilityFromJSON(json: any): LanguageAbility {
    return LanguageAbilityFromJSONTyped(json, false);
}

export function LanguageAbilityFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): LanguageAbility {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        isFavouriteLanguage:
            json["isFavouriteLanguage"] == null ? undefined : json["isFavouriteLanguage"],
        languageCode: json["languageCode"] == null ? undefined : json["languageCode"],
        languageName: json["languageName"] == null ? undefined : json["languageName"],
        listeningProficiency:
            json["listeningProficiency"] == null ? undefined : json["listeningProficiency"],
        readingProficiency:
            json["readingProficiency"] == null ? undefined : json["readingProficiency"],
        speakingProficiency:
            json["speakingProficiency"] == null ? undefined : json["speakingProficiency"],
        writingProficiency:
            json["writingProficiency"] == null ? undefined : json["writingProficiency"],
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function LanguageAbilityToJSON(json: any): LanguageAbility {
    return LanguageAbilityToJSONTyped(json, false);
}

export function LanguageAbilityToJSONTyped(
    value?: LanguageAbility | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        isFavouriteLanguage: value["isFavouriteLanguage"],
        languageCode: value["languageCode"],
        languageName: value["languageName"],
        listeningProficiency: value["listeningProficiency"],
        readingProficiency: value["readingProficiency"],
        speakingProficiency: value["speakingProficiency"],
        writingProficiency: value["writingProficiency"],
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
