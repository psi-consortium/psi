/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface OrganizationRef
 */
export interface OrganizationRef {
    /**
     * unique identifier
     * @type {string}
     * @memberof OrganizationRef
     */
    id: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof OrganizationRef
     */
    href?: string;
    /**
     * Name of the related entity.
     * @type {string}
     * @memberof OrganizationRef
     */
    name?: string;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof OrganizationRef
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof OrganizationRef
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof OrganizationRef
     */
    type?: string;
    /**
     * The actual type of the target instance when needed for disambiguation.
     * @type {string}
     * @memberof OrganizationRef
     */
    referredType?: string;
}

/**
 * Check if a given object implements the OrganizationRef interface.
 */
export function instanceOfOrganizationRef(value: object): value is OrganizationRef {
    if (!("id" in value) || value["id"] === undefined) return false;
    return true;
}

export function OrganizationRefFromJSON(json: any): OrganizationRef {
    return OrganizationRefFromJSONTyped(json, false);
}

export function OrganizationRefFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): OrganizationRef {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        href: json["href"] == null ? undefined : json["href"],
        name: json["name"] == null ? undefined : json["name"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"],
        referredType: json["@referredType"] == null ? undefined : json["@referredType"]
    };
}

export function OrganizationRefToJSON(json: any): OrganizationRef {
    return OrganizationRefToJSONTyped(json, false);
}

export function OrganizationRefToJSONTyped(
    value?: OrganizationRef | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        name: value["name"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"],
        "@referredType": value["referredType"]
    };
}
