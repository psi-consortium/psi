/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TaxDefinition } from "./TaxDefinition";
import {
    TaxDefinitionFromJSON,
    TaxDefinitionFromJSONTyped,
    TaxDefinitionToJSON,
    TaxDefinitionToJSONTyped
} from "./TaxDefinition";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";
import type { AttachmentOrDocumentRef } from "./AttachmentOrDocumentRef";
import {
    AttachmentOrDocumentRefFromJSON,
    AttachmentOrDocumentRefFromJSONTyped,
    AttachmentOrDocumentRefToJSON,
    AttachmentOrDocumentRefToJSONTyped
} from "./AttachmentOrDocumentRef";

/**
 * A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.
 * @export
 * @interface TaxExemptionCertificate
 */
export interface TaxExemptionCertificate {
    /**
     * Identifier of the tax exemption within list of the exemptions
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    id?: string;
    /**
     * Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    certificateNumber?: string;
    /**
     * Name of the jurisdiction that issued the exemption
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    issuingJurisdiction?: string;
    /**
     * Reason for the tax exemption
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    reason?: string;
    /**
     *
     * @type {AttachmentOrDocumentRef}
     * @memberof TaxExemptionCertificate
     */
    attachment?: AttachmentOrDocumentRef;
    /**
     * A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%).
     * @type {Array<TaxDefinition>}
     * @memberof TaxExemptionCertificate
     */
    taxDefinition?: Array<TaxDefinition>;
    /**
     *
     * @type {TimePeriod}
     * @memberof TaxExemptionCertificate
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof TaxExemptionCertificate
     */
    type?: string;
}

/**
 * Check if a given object implements the TaxExemptionCertificate interface.
 */
export function instanceOfTaxExemptionCertificate(value: object): value is TaxExemptionCertificate {
    return true;
}

export function TaxExemptionCertificateFromJSON(json: any): TaxExemptionCertificate {
    return TaxExemptionCertificateFromJSONTyped(json, false);
}

export function TaxExemptionCertificateFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): TaxExemptionCertificate {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        certificateNumber:
            json["certificateNumber"] == null ? undefined : json["certificateNumber"],
        issuingJurisdiction:
            json["issuingJurisdiction"] == null ? undefined : json["issuingJurisdiction"],
        reason: json["reason"] == null ? undefined : json["reason"],
        attachment:
            json["attachment"] == null
                ? undefined
                : AttachmentOrDocumentRefFromJSON(json["attachment"]),
        taxDefinition:
            json["taxDefinition"] == null
                ? undefined
                : (json["taxDefinition"] as Array<any>).map(TaxDefinitionFromJSON),
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function TaxExemptionCertificateToJSON(json: any): TaxExemptionCertificate {
    return TaxExemptionCertificateToJSONTyped(json, false);
}

export function TaxExemptionCertificateToJSONTyped(
    value?: TaxExemptionCertificate | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        certificateNumber: value["certificateNumber"],
        issuingJurisdiction: value["issuingJurisdiction"],
        reason: value["reason"],
        attachment: AttachmentOrDocumentRefToJSON(value["attachment"]),
        taxDefinition:
            value["taxDefinition"] == null
                ? undefined
                : (value["taxDefinition"] as Array<any>).map(TaxDefinitionToJSON),
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
