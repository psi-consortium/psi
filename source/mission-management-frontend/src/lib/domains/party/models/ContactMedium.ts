/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { MediumCharacteristic } from "./MediumCharacteristic";
import {
    MediumCharacteristicFromJSON,
    MediumCharacteristicFromJSONTyped,
    MediumCharacteristicToJSON,
    MediumCharacteristicToJSONTyped
} from "./MediumCharacteristic";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";

/**
 * Indicates the contact medium that could be used to contact the party.
 * @export
 * @interface ContactMedium
 */
export interface ContactMedium {
    /**
     * unique identifier
     * @type {string}
     * @memberof ContactMedium
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof ContactMedium
     */
    href?: string;
    /**
     * Type of the contact medium, such as: email address, telephone number, postal address
     * @type {string}
     * @memberof ContactMedium
     */
    mediumType?: string;
    /**
     * If true, indicates that is the preferred contact medium
     * @type {boolean}
     * @memberof ContactMedium
     */
    preferred?: boolean;
    /**
     *
     * @type {MediumCharacteristic}
     * @memberof ContactMedium
     */
    characteristic?: MediumCharacteristic;
    /**
     *
     * @type {TimePeriod}
     * @memberof ContactMedium
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof ContactMedium
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof ContactMedium
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof ContactMedium
     */
    type?: string;
}

/**
 * Check if a given object implements the ContactMedium interface.
 */
export function instanceOfContactMedium(value: object): value is ContactMedium {
    return true;
}

export function ContactMediumFromJSON(json: any): ContactMedium {
    return ContactMediumFromJSONTyped(json, false);
}

export function ContactMediumFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactMedium {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        mediumType: json["mediumType"] == null ? undefined : json["mediumType"],
        preferred: json["preferred"] == null ? undefined : json["preferred"],
        characteristic:
            json["characteristic"] == null
                ? undefined
                : MediumCharacteristicFromJSON(json["characteristic"]),
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function ContactMediumToJSON(json: any): ContactMedium {
    return ContactMediumToJSONTyped(json, false);
}

export function ContactMediumToJSONTyped(
    value?: ContactMedium | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        mediumType: value["mediumType"],
        preferred: value["preferred"],
        characteristic: MediumCharacteristicToJSON(value["characteristic"]),
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
