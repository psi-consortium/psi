/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)
 * @export
 * @interface MediumCharacteristic
 */
export interface MediumCharacteristic {
    /**
     * unique identifier
     * @type {string}
     * @memberof MediumCharacteristic
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof MediumCharacteristic
     */
    href?: string;
    /**
     * The city
     * @type {string}
     * @memberof MediumCharacteristic
     */
    city?: string;
    /**
     * The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalationâ€¦
     * @type {string}
     * @memberof MediumCharacteristic
     */
    contactType?: string;
    /**
     * The country
     * @type {string}
     * @memberof MediumCharacteristic
     */
    country?: string;
    /**
     * Full email address in standard format
     * @type {string}
     * @memberof MediumCharacteristic
     */
    emailAddress?: string;
    /**
     * The fax number of the contact
     * @type {string}
     * @memberof MediumCharacteristic
     */
    faxNumber?: string;
    /**
     * The primary phone number of the contact
     * @type {string}
     * @memberof MediumCharacteristic
     */
    phoneNumber?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof MediumCharacteristic
     */
    postCode?: string;
    /**
     * Identifier as a member of a social network
     * @type {string}
     * @memberof MediumCharacteristic
     */
    socialNetworkId?: string;
    /**
     * State or province
     * @type {string}
     * @memberof MediumCharacteristic
     */
    stateOrProvince?: string;
    /**
     * Describes the street
     * @type {string}
     * @memberof MediumCharacteristic
     */
    street1?: string;
    /**
     * Complementary street description
     * @type {string}
     * @memberof MediumCharacteristic
     */
    street2?: string;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof MediumCharacteristic
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof MediumCharacteristic
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof MediumCharacteristic
     */
    type?: string;
}

/**
 * Check if a given object implements the MediumCharacteristic interface.
 */
export function instanceOfMediumCharacteristic(value: object): value is MediumCharacteristic {
    return true;
}

export function MediumCharacteristicFromJSON(json: any): MediumCharacteristic {
    return MediumCharacteristicFromJSONTyped(json, false);
}

export function MediumCharacteristicFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): MediumCharacteristic {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        city: json["city"] == null ? undefined : json["city"],
        contactType: json["contactType"] == null ? undefined : json["contactType"],
        country: json["country"] == null ? undefined : json["country"],
        emailAddress: json["emailAddress"] == null ? undefined : json["emailAddress"],
        faxNumber: json["faxNumber"] == null ? undefined : json["faxNumber"],
        phoneNumber: json["phoneNumber"] == null ? undefined : json["phoneNumber"],
        postCode: json["postCode"] == null ? undefined : json["postCode"],
        socialNetworkId: json["socialNetworkId"] == null ? undefined : json["socialNetworkId"],
        stateOrProvince: json["stateOrProvince"] == null ? undefined : json["stateOrProvince"],
        street1: json["street1"] == null ? undefined : json["street1"],
        street2: json["street2"] == null ? undefined : json["street2"],
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function MediumCharacteristicToJSON(json: any): MediumCharacteristic {
    return MediumCharacteristicToJSONTyped(json, false);
}

export function MediumCharacteristicToJSONTyped(
    value?: MediumCharacteristic | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        city: value["city"],
        contactType: value["contactType"],
        country: value["country"],
        emailAddress: value["emailAddress"],
        faxNumber: value["faxNumber"],
        phoneNumber: value["phoneNumber"],
        postCode: value["postCode"],
        socialNetworkId: value["socialNetworkId"],
        stateOrProvince: value["stateOrProvince"],
        street1: value["street1"],
        street2: value["street2"],
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
