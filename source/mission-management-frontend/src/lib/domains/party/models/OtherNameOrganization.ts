/* tslint:disable */
/* eslint-disable */
/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TimePeriod } from "./TimePeriod";
import {
    TimePeriodFromJSON,
    TimePeriodFromJSONTyped,
    TimePeriodToJSON,
    TimePeriodToJSONTyped
} from "./TimePeriod";

/**
 * Keeps track of other names, for example the old name of an organization.
 * @export
 * @interface OtherNameOrganization
 */
export interface OtherNameOrganization {
    /**
     * unique identifier
     * @type {string}
     * @memberof OtherNameOrganization
     */
    id?: string;
    /**
     * Hyperlink reference
     * @type {string}
     * @memberof OtherNameOrganization
     */
    href?: string;
    /**
     * Organization name (department name for example)
     * @type {string}
     * @memberof OtherNameOrganization
     */
    name?: string;
    /**
     * Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh
     * @type {string}
     * @memberof OtherNameOrganization
     */
    nameType?: string;
    /**
     * The name that the organization trades under
     * @type {string}
     * @memberof OtherNameOrganization
     */
    tradingName?: string;
    /**
     *
     * @type {TimePeriod}
     * @memberof OtherNameOrganization
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     * @type {string}
     * @memberof OtherNameOrganization
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     * @type {string}
     * @memberof OtherNameOrganization
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     * @type {string}
     * @memberof OtherNameOrganization
     */
    type?: string;
}

/**
 * Check if a given object implements the OtherNameOrganization interface.
 */
export function instanceOfOtherNameOrganization(value: object): value is OtherNameOrganization {
    return true;
}

export function OtherNameOrganizationFromJSON(json: any): OtherNameOrganization {
    return OtherNameOrganizationFromJSONTyped(json, false);
}

export function OtherNameOrganizationFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): OtherNameOrganization {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"] == null ? undefined : json["id"],
        href: json["href"] == null ? undefined : json["href"],
        name: json["name"] == null ? undefined : json["name"],
        nameType: json["nameType"] == null ? undefined : json["nameType"],
        tradingName: json["tradingName"] == null ? undefined : json["tradingName"],
        validFor: json["validFor"] == null ? undefined : TimePeriodFromJSON(json["validFor"]),
        baseType: json["@baseType"] == null ? undefined : json["@baseType"],
        schemaLocation: json["@schemaLocation"] == null ? undefined : json["@schemaLocation"],
        type: json["@type"] == null ? undefined : json["@type"]
    };
}

export function OtherNameOrganizationToJSON(json: any): OtherNameOrganization {
    return OtherNameOrganizationToJSONTyped(json, false);
}

export function OtherNameOrganizationToJSONTyped(
    value?: OtherNameOrganization | null,
    ignoreDiscriminator: boolean = false
): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        href: value["href"],
        name: value["name"],
        nameType: value["nameType"],
        tradingName: value["tradingName"],
        validFor: TimePeriodToJSON(value["validFor"]),
        "@baseType": value["baseType"],
        "@schemaLocation": value["schemaLocation"],
        "@type": value["type"]
    };
}
