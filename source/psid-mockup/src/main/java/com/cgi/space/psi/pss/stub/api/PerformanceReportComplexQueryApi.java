/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import com.cgi.space.psi.common.model.Error400;
import com.cgi.space.psi.common.model.Error401;
import com.cgi.space.psi.common.model.Error403;
import com.cgi.space.psi.common.model.Error422;
import com.cgi.space.psi.common.model.Error500;
import com.cgi.space.psi.common.model.PerformanceReportComplexQuery;
import com.cgi.space.psi.common.model.PerformanceReportComplexQueryCreate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "PerformanceReportComplexQuery", description = "Performance Monitoring Report API")
public interface PerformanceReportComplexQueryApi {

    /**
     * POST /performanceReportComplexQuery : Creates a PerformanceReportComplexQuery.
     * A request initiated by the Buyer/Client to create  a Performance Measurement Report Complex Query  in the Seller/Server system.
     *
     * @param performanceReportComplexQueryCreate The PerformanceReportComplexQuery to be created. (required)
     * @return &#39;OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)&#39; (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createPerformanceReportComplexQuery",
        summary = "Creates a PerformanceReportComplexQuery.",
        tags = { "performanceReportComplexQuery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceReportComplexQuery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/performanceReportComplexQuery",
        produces = "application/json;charset=utf-8",
        consumes = "application/json;charset=utf-8"
    )
    ResponseEntity<List<PerformanceReportComplexQuery>> createPerformanceReportComplexQuery(
        @Parameter(name = "PerformanceReportComplexQueryCreate", description = "The PerformanceReportComplexQuery to be created.", required = true) @Valid @RequestBody PerformanceReportComplexQueryCreate performanceReportComplexQueryCreate
    );

}
