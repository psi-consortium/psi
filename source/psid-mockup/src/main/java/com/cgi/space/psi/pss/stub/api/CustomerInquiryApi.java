/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import com.cgi.space.psi.common.model.CustomerInquiry;
import com.cgi.space.psi.common.model.CustomerInquiryFVO;
import com.cgi.space.psi.common.model.CustomerInquiryMVO;
import com.cgi.space.psi.common.model.Error;
import com.cgi.space.psi.common.model.InquiryResult;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "CustomerInquiry", description = "Customer Inquiry API")
public interface CustomerInquiryApi {

    /**
     * POST /customerInquiry : Creates a CustomerInquiry
     * This operation creates a CustomerInquiry entity.
     *
     * @param customerInquiryFVO The CustomerInquiry to be created (required)
     * @return Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createCustomerInquiry",
        summary = "Creates a CustomerInquiry",
        tags = { "customerInquiry" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerInquiry.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customerInquiry",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<CustomerInquiry> createCustomerInquiry(
        @Parameter(name = "CustomerInquiryFVO", description = "The CustomerInquiry to be created", required = true) @Valid @RequestBody CustomerInquiryFVO customerInquiryFVO
    );


    /**
     * DELETE /customerInquiry/{id} : Cancels a CustomerInquiry
     * This operation cancels a CustomerInquiry entity.
     *
     * @param id Identifier of the CustomerInquiry (required)
     * @return Deleted (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteCustomerInquiry",
        summary = "Cancels a CustomerInquiry",
        tags = { "customerInquiry" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customerInquiry/{id}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCustomerInquiry(
        @Parameter(name = "id", description = "Identifier of the CustomerInquiry", required = true) @PathVariable("id") String id
    );


    /**
     * PATCH /customerInquiry/{id} : Updates partially a CustomerInquiry
     * This operation updates partially a CustomerInquiry entity.
     *
     * @param id Identifier of the CustomerInquiry (required)
     * @param customerInquiryMVO The CustomerInquiry to be updated (required)
     * @return Update Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "patchCustomerInquiry",
        summary = "Updates partially a CustomerInquiry",
        tags = { "customerInquiry" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Update Accepted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerInquiry.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/customerInquiry/{id}",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<CustomerInquiry> patchCustomerInquiry(
        @Parameter(name = "id", description = "Identifier of the CustomerInquiry", required = true) @PathVariable("id") String id,
        @Parameter(name = "CustomerInquiryMVO", description = "The CustomerInquiry to be updated", required = true) @Valid @RequestBody CustomerInquiryMVO customerInquiryMVO
    );


    /**
     * GET /customerInquiry/{id} : Retrieves a CustomerInquiry
     * This operation retrieves a CustomerInquiry entity.
     *
     * @param id Identifier of the CustomerInquiry (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "retrieveCustomerInquiry",
        summary = "Retrieves a CustomerInquiry",
        tags = { "customerInquiry" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerInquiry.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customerInquiry/{id}",
        produces = "application/json"
    )
    ResponseEntity<CustomerInquiry> retrieveCustomerInquiry(
        @Parameter(name = "id", description = "Identifier of the CustomerInquiry", required = true) @PathVariable("id") String id
    );


    /**
     * GET /customerInquiry/{id}/results : Retrieves the InquiryResults matching the CustomerInquiry
     * This operation retrieves all InquiryResults matching the CustomerInquiry. The results are fetched from the ProductCatalog, therefore its datamodel applies.
     *
     * @param id Identifier of the CustomerInquiry (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @return Success (status code 200)
     *         or No content can be provided, because the inquiry is not yet processed. (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "retrieveCustomerInquiryResults",
        summary = "Retrieves the InquiryResults matching the CustomerInquiry",
        tags = { "customerInquiry" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InquiryResult.class))
            }),
            @ApiResponse(responseCode = "204", description = "No content can be provided, because the inquiry is not yet processed."),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customerInquiry/{id}/results",
        produces = "application/json"
    )
    ResponseEntity<List<InquiryResult>> retrieveCustomerInquiryResults(
        @Parameter(name = "id", description = "Identifier of the CustomerInquiry", required = true) @PathVariable("id") String id,
        @Parameter(name = "fields", description = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) Optional<String> fields,
        @Parameter(name = "offset", description = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Optional<Integer> offset,
        @Parameter(name = "limit", description = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Optional<Integer> limit
    );

}
