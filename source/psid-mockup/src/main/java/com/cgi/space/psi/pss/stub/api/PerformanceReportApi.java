/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.cgi.space.psi.common.model.Error400;
import com.cgi.space.psi.common.model.Error401;
import com.cgi.space.psi.common.model.Error403;
import com.cgi.space.psi.common.model.Error404;
import com.cgi.space.psi.common.model.Error422;
import com.cgi.space.psi.common.model.Error500;
import com.cgi.space.psi.common.model.Interval;
import java.time.OffsetDateTime;
import com.cgi.space.psi.common.model.OutputFormat;
import com.cgi.space.psi.common.model.PerformanceReport;
import com.cgi.space.psi.common.model.PerformanceReportCreate;
import com.cgi.space.psi.common.model.PerformanceReportFind;
import com.cgi.space.psi.common.model.ResultFormat;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "PerformanceReport", description = "Performance Monitoring Report API")
public interface PerformanceReportApi {

    /**
     * POST /performanceReport : Creates a Performance Report.
     * A request initiated by the Buyer/Client to create an ad-hoc Performance Report based on existing performance data in the  Seller/Server system.
     *
     * @param performanceReportCreate The Performance Report to be created. (required)
     * @return &#39;Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)&#39; (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createPerformanceReport",
        summary = "Creates a Performance Report.",
        tags = { "performanceReport" },
        responses = {
            @ApiResponse(responseCode = "201", description = "'Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceReport.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/performanceReport",
        produces = "application/json;charset=utf-8",
        consumes = "application/json;charset=utf-8"
    )
    ResponseEntity<PerformanceReport> createPerformanceReport(
        @Parameter(name = "PerformanceReportCreate", description = "The Performance Report to be created.", required = true) @Valid @RequestBody PerformanceReportCreate performanceReportCreate
    );


    /**
     * GET /performanceReport : List or find Performance Report objects.
     * The Buyer/Client requests a list of PM Reports based on a set of filter criteria. The Seller/Server returns a summarized list of PM Reports. For each PM Report returned, the Seller/Server also provides a  Performance Report Identifier that uniquely identifiers this PM Report within the Seller/Server. The order of the elements returned to the  Buyer/Client is defined by the Seller/Server (e.g. natural order) and does not change between the pages.
     *
     * @param performanceJobId Identifier of Performance Job that generated Performance Report. (optional)
     * @param state State of the Performance Report. See &#x60;PerformanceReportStateType&#x60; definition for details. (optional)
     * @param creationDateGt Date when the report was created - greater than. (optional)
     * @param creationDateLt Date when the report was created - lower than. (optional)
     * @param reportingTimeframeStartDateGt Start date of reporting timeframe - greater than. (optional)
     * @param reportingTimeframeStartDateLt Start date of reporting timeframe - lower than. (optional)
     * @param reportingTimeframeEndDateGt End date of reporting timeframe - greater than. (optional)
     * @param reportingTimeframeEndDateLt End date of reporting timeframe - lower than. (optional)
     * @param granularity Sampling rate of the collection of measurements (optional)
     * @param outputFormat Format of report output (optional)
     * @param resultFormat Type of providing report results (optional)
     * @param consumingApplicationId Identifier of consuming application (optional)
     * @param producingApplicationId Identifier of producing application (optional)
     * @param offset Requested index for start of item to be provided in response requested by the client. Note that the index starts with \&quot;0\&quot;. (optional)
     * @param limit Requested number of resources to be provided in response. (optional)
     * @return &#39;OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)&#39; (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listPerformanceReport",
        summary = "List or find Performance Report objects.",
        tags = { "performanceReport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceReportFind.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/performanceReport",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<List<PerformanceReportFind>> listPerformanceReport(
        @Parameter(name = "performanceJobId", description = "Identifier of Performance Job that generated Performance Report.") @Valid @RequestParam(value = "performanceJobId", required = false) Optional<String> performanceJobId,
        @Parameter(name = "state", description = "State of the Performance Report. See `PerformanceReportStateType` definition for details.") @Valid @RequestParam(value = "state", required = false) Optional<String> state,
        @Parameter(name = "creationDate.gt", description = "Date when the report was created - greater than.") @Valid @RequestParam(value = "creationDate.gt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateGt,
        @Parameter(name = "creationDate.lt", description = "Date when the report was created - lower than.") @Valid @RequestParam(value = "creationDate.lt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateLt,
        @Parameter(name = "reportingTimeframe.startDate.gt", description = "Start date of reporting timeframe - greater than.") @Valid @RequestParam(value = "reportingTimeframe.startDate.gt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> reportingTimeframeStartDateGt,
        @Parameter(name = "reportingTimeframe.startDate.lt", description = "Start date of reporting timeframe - lower than.") @Valid @RequestParam(value = "reportingTimeframe.startDate.lt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> reportingTimeframeStartDateLt,
        @Parameter(name = "reportingTimeframe.endDate.gt", description = "End date of reporting timeframe - greater than.") @Valid @RequestParam(value = "reportingTimeframe.endDate.gt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> reportingTimeframeEndDateGt,
        @Parameter(name = "reportingTimeframe.endDate.lt", description = "End date of reporting timeframe - lower than.") @Valid @RequestParam(value = "reportingTimeframe.endDate.lt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> reportingTimeframeEndDateLt,
        @Parameter(name = "granularity", description = "Sampling rate of the collection of measurements") @Valid @RequestParam(value = "granularity", required = false) Optional<Interval> granularity,
        @Parameter(name = "outputFormat", description = "Format of report output") @Valid @RequestParam(value = "outputFormat", required = false) Optional<OutputFormat> outputFormat,
        @Parameter(name = "resultFormat", description = "Type of providing report results") @Valid @RequestParam(value = "resultFormat", required = false) Optional<ResultFormat> resultFormat,
        @Parameter(name = "consumingApplicationId", description = "Identifier of consuming application") @Valid @RequestParam(value = "consumingApplicationId", required = false) Optional<String> consumingApplicationId,
        @Parameter(name = "producingApplicationId", description = "Identifier of producing application") @Valid @RequestParam(value = "producingApplicationId", required = false) Optional<String> producingApplicationId,
        @Parameter(name = "offset", description = "Requested index for start of item to be provided in response requested by the client. Note that the index starts with \"0\".") @Valid @RequestParam(value = "offset", required = false) Optional<Integer> offset,
        @Parameter(name = "limit", description = "Requested number of resources to be provided in response.") @Valid @RequestParam(value = "limit", required = false) Optional<Integer> limit
    );


    /**
     * GET /performanceReport/{id} : Retrieves a Performance Report by ID.
     * The Buyer/Client requests detailed information about a single  Performance Report based on the Report Identifier.
     *
     * @param id Identifier of the Performance Report to be retrieved. (required)
     * @return &#39;OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)&#39; (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "retrievePerformanceReport",
        summary = "Retrieves a Performance Report by ID.",
        tags = { "performanceReport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceReport.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error404.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/performanceReport/{id}",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<PerformanceReport> retrievePerformanceReport(
        @Parameter(name = "id", description = "Identifier of the Performance Report to be retrieved.", required = true) @PathVariable("id") String id
    );

}
