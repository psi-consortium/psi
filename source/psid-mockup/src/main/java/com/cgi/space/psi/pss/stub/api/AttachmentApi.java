/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import com.cgi.space.psi.common.model.Attachment;
import com.cgi.space.psi.common.model.AttachmentFVO;
import com.cgi.space.psi.common.model.AttachmentMVO;
import com.cgi.space.psi.common.model.Error;
import com.cgi.space.psi.common.model.Quantity;
import com.cgi.space.psi.common.model.TimePeriod;
import java.net.URI;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Attachment", description = "Operations for Attachment Resource")
public interface AttachmentApi {

    /**
     * POST /document/{documentId}/attachment : Creates an Attachment
     * This operation creates an Attachment entity.
     *
     * @param documentId The identifier of the Document. (required)
     * @param name The name of the attachment (optional)
     * @param description A narrative text describing the content of the attachment (optional)
     * @param url Uniform Resource Locator, is a web page address (a subset of URI) (optional)
     * @param content The actual contents of the attachment object, if embedded, encoded as base64 (optional)
     * @param size  (optional)
     * @param validFor  (optional)
     * @param attachmentType a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy (optional)
     * @param mimeType a technical characterization of the attachment content format using IETF Mime Types (optional)
     * @return OK/Created (status code 201)
     *         or Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "createAttachment",
        summary = "Creates an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK/Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/document/{documentId}/attachment",
        produces = "application/json",
        consumes = "multipart/form-data"
    )
    ResponseEntity<Attachment> createAttachment(
        @Parameter(name = "documentId", description = "The identifier of the Document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "name", description = "The name of the attachment") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "description", description = "A narrative text describing the content of the attachment") @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "url", description = "Uniform Resource Locator, is a web page address (a subset of URI)") @Valid @RequestParam(value = "url", required = false) URI url,
        @Parameter(name = "content", description = "The actual contents of the attachment object, if embedded, encoded as base64") @RequestPart(value = "content", required = false) MultipartFile content,
        @Parameter(name = "size", description = "") @Valid @RequestParam(value = "size", required = false) Quantity size,
        @Parameter(name = "validFor", description = "") @Valid @RequestParam(value = "validFor", required = false) TimePeriod validFor,
        @Parameter(name = "attachmentType", description = "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy") @Valid @RequestParam(value = "attachmentType", required = false) String attachmentType,
        @Parameter(name = "mimeType", description = "a technical characterization of the attachment content format using IETF Mime Types") @Valid @RequestParam(value = "mimeType", required = false) String mimeType
    );


    /**
     * POST /document/{documentId}/attachment : Creates an Attachment
     * This operation creates an Attachment entity.
     *
     * @param documentId The identifier of the Document. (required)
     * @param attachmentFVO The Attachment to be created. (optional)
     * @return OK/Created (status code 201)
     *         or Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "createAttachment",
        summary = "Creates an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK/Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/document/{documentId}/attachment",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<Attachment> createAttachment(
        @Parameter(name = "documentId", description = "The identifier of the Document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "AttachmentFVO", description = "The Attachment to be created.", required = true) @Valid @RequestBody AttachmentFVO attachmentFVO
    );

    /**
     * DELETE /document/{documentId}/attachment/{attachmentId} : Deletes an Attachment
     * This operation deletes an attachment entity.
     *
     * @param documentId Identifier of the document. (required)
     * @param attachmentId Identifier of the attachment. (required)
     * @return Accepted (status code 202)
     *         or Deleted (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deleteAttachment",
        summary = "Deletes an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/document/{documentId}/attachment/{attachmentId}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteAttachment(
        @Parameter(name = "documentId", description = "Identifier of the document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "Identifier of the attachment.", required = true) @PathVariable("attachmentId") String attachmentId
    );


    /**
     * GET /document/{documentId}/attachment : List or find Attachment objects
     * This operation list or find Attachment entities of a Document
     *
     * @param documentId The identifier of the Document. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "listAttachment",
        summary = "List or find Attachment objects",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/{documentId}/attachment",
        produces = "application/json"
    )
    ResponseEntity<List<Attachment>> listAttachment(
        @Parameter(name = "documentId", description = "The identifier of the Document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "fields", description = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) Optional<String> fields
    );


    /**
     * PATCH /document/{documentId}/attachment/{attachmentId} : Updates an Attachment
     * This operation updates an attachment entity.
     *
     * @param documentId The identifier of the document. (required)
     * @param attachmentId The identifier of the attachment. (required)
     * @param name The name of the attachment (optional)
     * @param description A narrative text describing the content of the attachment (optional)
     * @param url Uniform Resource Locator, is a web page address (a subset of URI) (optional)
     * @param content The actual contents of the attachment object, if embedded, encoded as base64 (optional)
     * @param size  (optional)
     * @param validFor  (optional)
     * @param attachmentType a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy (optional)
     * @param mimeType a technical characterization of the attachment content format using IETF Mime Types (optional)
     * @return Success (status code 200)
     *         or Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "patchAttachment",
        summary = "Updates an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/document/{documentId}/attachment/{attachmentId}",
        produces = "application/json",
        consumes = "multipart/form-data"
    )
    ResponseEntity<Attachment> patchAttachment(
        @Parameter(name = "documentId", description = "The identifier of the document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "The identifier of the attachment.", required = true) @PathVariable("attachmentId") String attachmentId,
        @Parameter(name = "name", description = "The name of the attachment") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "description", description = "A narrative text describing the content of the attachment") @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "url", description = "Uniform Resource Locator, is a web page address (a subset of URI)") @Valid @RequestParam(value = "url", required = false) URI url,
        @Parameter(name = "content", description = "The actual contents of the attachment object, if embedded, encoded as base64") @RequestPart(value = "content", required = false) MultipartFile content,
        @Parameter(name = "size", description = "") @Valid @RequestParam(value = "size", required = false) Quantity size,
        @Parameter(name = "validFor", description = "") @Valid @RequestParam(value = "validFor", required = false) TimePeriod validFor,
        @Parameter(name = "attachmentType", description = "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy") @Valid @RequestParam(value = "attachmentType", required = false) String attachmentType,
        @Parameter(name = "mimeType", description = "a technical characterization of the attachment content format using IETF Mime Types") @Valid @RequestParam(value = "mimeType", required = false) String mimeType
    );


    /**
     * PATCH /document/{documentId}/attachment/{attachmentId} : Updates an Attachment
     * This operation updates an attachment entity.
     *
     * @param documentId The identifier of the document. (required)
     * @param attachmentId The identifier of the attachment. (required)
     * @param attachmentMVO The Attachment to be patched. (required)
     * @return Success (status code 200)
     *         or Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "patchAttachment",
        summary = "Updates an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/document/{documentId}/attachment/{attachmentId}",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<Attachment> patchAttachment(
        @Parameter(name = "documentId", description = "The identifier of the document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "The identifier of the attachment.", required = true) @PathVariable("attachmentId") String attachmentId,
        @Parameter(name = "AttachmentMVO", description = "The Attachment to be patched.", required = true) @Valid @RequestBody AttachmentMVO attachmentMVO
    );


    /**
     * GET /document/{documentId}/attachment/{attachmentId} : Retrieves an Attachment by ID
     * This operation retrieves an Attachment entity. Attribute selection is enabled for all first level attributes.
     *
     * @param documentId The identifier of the Document. (required)
     * @param attachmentId The identifier of the Attachment. (required)
     * @param fields Comma-separated properties to be provided in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "retrieveAttachment",
        summary = "Retrieves an Attachment by ID",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/{documentId}/attachment/{attachmentId}",
        produces = "application/json"
    )
    ResponseEntity<Attachment> retrieveAttachment(
        @Parameter(name = "documentId", description = "The identifier of the Document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "The identifier of the Attachment.", required = true) @PathVariable("attachmentId") String attachmentId,
        @Parameter(name = "fields", description = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) Optional<String> fields
    );


    /**
     * GET /document/{documentId}/attachment/{attachmentId}/content : Retrieves an Attachment content by ID
     * This operation retrieves the content of an attachment for direct download.
     *
     * @param documentId The identifier of the Document. (required)
     * @param attachmentId The identifier of the Attachment. (required)
     * @return Success (status code 200)
     *         or Found (status code 302)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "retrieveAttachmentContent",
        summary = "Retrieves an Attachment content by ID",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "302", description = "Found"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/{documentId}/attachment/{attachmentId}/content",
        produces = "application/json"
    )
    ResponseEntity<org.springframework.core.io.Resource> retrieveAttachmentContent(
        @Parameter(name = "documentId", description = "The identifier of the Document.", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "The identifier of the Attachment.", required = true) @PathVariable("attachmentId") String attachmentId
    );


    /**
     * PUT /document/{documentId}/attachment/{attachmentId}/content : Updates the content of an Attachment
     * This operation updates the content of an Attachment.
     *
     * @param documentId Identifier of the Document (required)
     * @param attachmentId Identifier of the Attachment (required)
     * @param body The Attachment to be created (required)
     * @return Updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "updateAttachmentContent",
        summary = "Updates the content of an Attachment",
        tags = { "attachment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Attachment.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/document/{documentId}/attachment/{attachmentId}/content",
        produces = "application/json"
    )
    ResponseEntity<Attachment> updateAttachmentContent(
        @Parameter(name = "documentId", description = "Identifier of the Document", required = true) @PathVariable("documentId") String documentId,
        @Parameter(name = "attachmentId", description = "Identifier of the Attachment", required = true) @PathVariable("attachmentId") String attachmentId,
        @Parameter(name = "body", description = "The Attachment to be created", required = true) @Valid @RequestBody org.springframework.core.io.Resource body
    );

}
