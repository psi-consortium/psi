/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import com.cgi.space.psi.common.model.CancelPerformanceJob;
import com.cgi.space.psi.common.model.CancelPerformanceJobCreate;
import com.cgi.space.psi.common.model.CancelPerformanceJobFind;
import org.springframework.format.annotation.DateTimeFormat;
import com.cgi.space.psi.common.model.Error400;
import com.cgi.space.psi.common.model.Error401;
import com.cgi.space.psi.common.model.Error403;
import com.cgi.space.psi.common.model.Error404;
import com.cgi.space.psi.common.model.Error422;
import com.cgi.space.psi.common.model.Error500;
import com.cgi.space.psi.common.model.Error501;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "CancelPerformanceJob", description = "Performance Monitoring Job API")
public interface CancelPerformanceJobApi {

    /**
     * POST /cancelPerformanceJob
     * A request initiated by the Buyer/Client to cancel  a Performance Monitoring Job in the Seller/Server system.
     *
     * @param cancelPerformanceJobCreate The CancelPerformanceJob to be created. (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     *         or Method not implemented. (status code 501)
     */
    @Operation(
        operationId = "createCancelPerformanceJob",
        tags = { "cancelPerformanceJob" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = CancelPerformanceJob.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            }),
            @ApiResponse(responseCode = "501", description = "Method not implemented.", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error501.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cancelPerformanceJob",
        produces = "application/json;charset=utf-8",
        consumes = "application/json;charset=utf-8"
    )
    ResponseEntity<CancelPerformanceJob> createCancelPerformanceJob(
        @Parameter(name = "CancelPerformanceJobCreate", description = "The CancelPerformanceJob to be created.", required = true) @Valid @RequestBody CancelPerformanceJobCreate cancelPerformanceJobCreate
    );


    /**
     * GET /cancelPerformanceJob : Lists or finds CancelPerformanceJob objects.
     * The Buyer/Client requests a list of Cancel Performance Monitoring Job based on a set of filter criteria.
     *
     * @param performanceJobId Identifer of Performance Job that is a subject of CancelPerformanceJob. (optional)
     * @param state State of CancelPerformanceJob. See &#x60;PerformanceJobProcessStateType&#x60; definition for details. (optional)
     * @param creationDateGt Date when the CancelPerformanceJob was created - greater than. (optional)
     * @param creationDateLt Date when the CancelPerformanceJob was created - lower than. (optional)
     * @param offset Requested index for start of item to be provided in response requested by client. Note that the index starts with \&quot;0\&quot;. (optional)
     * @param limit Requested number of items to be provided in response requested by client. (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     *         or Method not implemented. (status code 501)
     */
    @Operation(
        operationId = "listCancelPerformanceJob",
        summary = "Lists or finds CancelPerformanceJob objects.",
        tags = { "cancelPerformanceJob" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = CancelPerformanceJobFind.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            }),
            @ApiResponse(responseCode = "501", description = "Method not implemented.", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error501.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cancelPerformanceJob",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<List<CancelPerformanceJobFind>> listCancelPerformanceJob(
        @Parameter(name = "performanceJobId", description = "Identifer of Performance Job that is a subject of CancelPerformanceJob.") @Valid @RequestParam(value = "performanceJobId", required = false) Optional<String> performanceJobId,
        @Parameter(name = "state", description = "State of CancelPerformanceJob. See `PerformanceJobProcessStateType` definition for details.") @Valid @RequestParam(value = "state", required = false) Optional<String> state,
        @Parameter(name = "creationDate.gt", description = "Date when the CancelPerformanceJob was created - greater than.") @Valid @RequestParam(value = "creationDate.gt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateGt,
        @Parameter(name = "creationDate.lt", description = "Date when the CancelPerformanceJob was created - lower than.") @Valid @RequestParam(value = "creationDate.lt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateLt,
        @Parameter(name = "offset", description = "Requested index for start of item to be provided in response requested by client. Note that the index starts with \"0\".") @Valid @RequestParam(value = "offset", required = false) Optional<Integer> offset,
        @Parameter(name = "limit", description = "Requested number of items to be provided in response requested by client.") @Valid @RequestParam(value = "limit", required = false) Optional<Integer> limit
    );


    /**
     * GET /cancelPerformanceJob/{id} : Retrieves a CancelPerformanceJob by ID.
     * The Buyer/Client requests detailed information about a single  Cancel Performance Monitoring Job based on the  Cancel Performance Monitoring Job Identifier.
     *
     * @param id Identifier of the CancelPerformanceJob (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Method not implemented. (status code 501)
     */
    @Operation(
        operationId = "retrieveCancelPerformanceJob",
        summary = "Retrieves a CancelPerformanceJob by ID.",
        tags = { "cancelPerformanceJob" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = CancelPerformanceJob.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error404.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            }),
            @ApiResponse(responseCode = "501", description = "Method not implemented.", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error501.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cancelPerformanceJob/{id}",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<CancelPerformanceJob> retrieveCancelPerformanceJob(
        @Parameter(name = "id", description = "Identifier of the CancelPerformanceJob", required = true) @PathVariable("id") String id
    );

}
