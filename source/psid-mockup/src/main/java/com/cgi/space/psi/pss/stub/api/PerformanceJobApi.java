/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cgi.space.psi.pss.stub.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.cgi.space.psi.common.model.Error400;
import com.cgi.space.psi.common.model.Error401;
import com.cgi.space.psi.common.model.Error403;
import com.cgi.space.psi.common.model.Error404;
import com.cgi.space.psi.common.model.Error422;
import com.cgi.space.psi.common.model.Error500;
import com.cgi.space.psi.common.model.Interval;
import com.cgi.space.psi.common.model.JobType;
import java.time.OffsetDateTime;
import com.cgi.space.psi.common.model.PerformanceJob;
import com.cgi.space.psi.common.model.PerformanceJobCreate;
import com.cgi.space.psi.common.model.PerformanceJobFind;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "PerformanceJob", description = "Performance Monitoring Job API")
public interface PerformanceJobApi {

    /**
     * POST /performanceJob : Creates a Performance Job.
     * A request initiated by the Buyer/Client to create a Performance Job in the Seller/Server system to indicate performance monitoring objectives.
     *
     * @param performanceJobCreate The Performance Job to be created. (required)
     * @return &#39;Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)&#39; (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createPerformanceJob",
        summary = "Creates a Performance Job.",
        tags = { "performanceJob" },
        responses = {
            @ApiResponse(responseCode = "201", description = "'Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceJob.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/performanceJob",
        produces = "application/json;charset=utf-8",
        consumes = "application/json;charset=utf-8"
    )
    ResponseEntity<PerformanceJob> createPerformanceJob(
        @Parameter(name = "PerformanceJobCreate", description = "The Performance Job to be created.", required = true) @Valid @RequestBody PerformanceJobCreate performanceJobCreate
    );


    /**
     * GET /performanceJob : List or find Performance Job objects.
     * The Buyer/Client requests a list of PM Jobs based on a set of filter criteria. The Seller/Server returns a summarized list of PM  Jobs. For each PM Job returned, the Seller/Server also provides a  Performance Job Identifier that uniquely identifiers this PM Job within the Seller/Server. The order of the elements returned to the  Buyer/Client is defined by the Seller/Server (e.g. natural order) and does not change between the pages.
     *
     * @param buyerJobId Identifier assigned and understandable by Buyer/Client to  facilitate search requests. (optional)
     * @param state State of the Performance Job. See &#x60;PerformanceJobStateType&#x60;  definition for details. (optional)
     * @param creationDateGt Date when the job was created - greater than. (optional)
     * @param creationDateLt Date when the job was created - lower than. (optional)
     * @param jobType Type of the Performance Job (optional)
     * @param granularity Sampling rate of the collection of measurements. (optional)
     * @param reportingPeriod Definition of time period during which report will be active  and collect measurements. (optional)
     * @param consumingApplicationId Identifier of consuming application. (optional)
     * @param producingApplicationId Identifier of producing application. (optional)
     * @param jobPriority The priority of the Performance Job. (optional)
     * @param offset Requested index for start of item to be provided in response requested by the client. Note that the index starts with \&quot;0\&quot;. (optional)
     * @param limit Requested number of resources to be provided in response. (optional)
     * @return &#39;OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)&#39; (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable entity due to the business validation problems (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listPerformanceJob",
        summary = "List or find Performance Job objects.",
        tags = { "performanceJob" },
        responses = {
            @ApiResponse(responseCode = "200", description = "'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceJobFind.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable entity due to the business validation problems", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error422.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/performanceJob",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<List<PerformanceJobFind>> listPerformanceJob(
        @Parameter(name = "buyerJobId", description = "Identifier assigned and understandable by Buyer/Client to  facilitate search requests.") @Valid @RequestParam(value = "buyerJobId", required = false) Optional<String> buyerJobId,
        @Parameter(name = "state", description = "State of the Performance Job. See `PerformanceJobStateType`  definition for details.") @Valid @RequestParam(value = "state", required = false) Optional<String> state,
        @Parameter(name = "creationDate.gt", description = "Date when the job was created - greater than.") @Valid @RequestParam(value = "creationDate.gt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateGt,
        @Parameter(name = "creationDate.lt", description = "Date when the job was created - lower than.") @Valid @RequestParam(value = "creationDate.lt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> creationDateLt,
        @Parameter(name = "jobType", description = "Type of the Performance Job") @Valid @RequestParam(value = "jobType", required = false) Optional<JobType> jobType,
        @Parameter(name = "granularity", description = "Sampling rate of the collection of measurements.") @Valid @RequestParam(value = "granularity", required = false) Optional<Interval> granularity,
        @Parameter(name = "reportingPeriod", description = "Definition of time period during which report will be active  and collect measurements.") @Valid @RequestParam(value = "reportingPeriod", required = false) Optional<Interval> reportingPeriod,
        @Parameter(name = "consumingApplicationId", description = "Identifier of consuming application.") @Valid @RequestParam(value = "consumingApplicationId", required = false) Optional<String> consumingApplicationId,
        @Parameter(name = "producingApplicationId", description = "Identifier of producing application.") @Valid @RequestParam(value = "producingApplicationId", required = false) Optional<String> producingApplicationId,
        @Parameter(name = "jobPriority", description = "The priority of the Performance Job.") @Valid @RequestParam(value = "jobPriority", required = false) Optional<String> jobPriority,
        @Parameter(name = "offset", description = "Requested index for start of item to be provided in response requested by the client. Note that the index starts with \"0\".") @Valid @RequestParam(value = "offset", required = false) Optional<Integer> offset,
        @Parameter(name = "limit", description = "Requested number of resources to be provided in response.") @Valid @RequestParam(value = "limit", required = false) Optional<Integer> limit
    );


    /**
     * GET /performanceJob/{id} : Retrieves a Performance Job by ID.
     * The Buyer/Client requests detailed information about a single Performance Job based on the Job Identifier.
     *
     * @param id Identifier of the Performance Job (required)
     * @return &#39;OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)&#39; (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "retrievePerformanceJob",
        summary = "Retrieves a Performance Job by ID.",
        tags = { "performanceJob" },
        responses = {
            @ApiResponse(responseCode = "200", description = "'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = PerformanceJob.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error401.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error403.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error404.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error500.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/performanceJob/{id}",
        produces = "application/json;charset=utf-8"
    )
    ResponseEntity<PerformanceJob> retrievePerformanceJob(
        @Parameter(name = "id", description = "Identifier of the Performance Job", required = true) @PathVariable("id") String id
    );

}
