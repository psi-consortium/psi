---
$schema: http://json-schema.org/draft-07/schema#
title:
  PSI Hardware Common Types
# ---------------------
# Disclaimer
#
# Creator: THE PSI CONSORTIUM 2025.
# This document is based on content originally published by the MEF Forum but has been modified and/or adapted. 
# It is not an official publication of the MEF Forum.
# It is a pre-release before an official endoresement by MEF Forum.
#
# The original document is available at <https://github.com/MEF-GIT/MEF-LSO-Sonata-SDK/tree/irene/productSchema>.
#
# The modifications to this document were made by the publisher of this version. 
# The MEF Forum is not responsible for the content, accuracy, or applicability of this modified version and assumes no liability for its use.
#
# The publisher of this version acknowledges the copyrights of the MEF Forum and expressly states that this document must not be used or cited as an official MEF document.
#
# ---------------------
#
# Â© MEF Forum 2023. All Rights Reserved.
#
# The information in this publication is freely available for reproduction
# and use by any recipient and is believed to be accurate as of its
# publication date. Such information is subject to change without notice
# and MEF Forum (MEF) is not responsible for any errors. MEF does not
# assume responsibility to update or correct any information in this
# publication. No representation or warranty, expressed or implied, is
# made by MEF concerning the completeness, accuracy, or applicability of
# any information contained herein and no liability of any kind shall be
# assumed by MEF as a result of reliance upon such information.
#
# The information contained herein is intended to be used without
# modification by the recipient or user of this document. MEF is not
# responsible or liable for any modifications to this document made by any
# other party.
#
# The receipt or any use of this document or its contents
# does not in any way create, by implication or otherwise:
#
# a) any express or implied license or right to or under any patent,
# copyright, trademark or trade secret rights held or claimed by any MEF
# member which are or may be associated with the ideas, techniques,
# concepts or expressions contained herein; nor
#
# b) any warranty or representation that any MEF members will announce
# any product(s) and/or service(s) related thereto, or if such
# announcements are made, that such announced product(s) and/or service(s)
# embody any or all of the ideas, technologies, or concepts contained
# herein; nor
#
# c) any form of relationship between any MEF member and the recipient
# or user of this document.
#
# Implementation or use of specific MEF standards, specifications, or
# recommendations will be voluntary, and no Member shall be obliged to
# implement them by virtue of participation in MEF Forum. MEF is a
# non-profit international organization to enable the development and
# worldwide adoption of agile, assured and orchestrated network services.
# MEF does not, expressly or otherwise, endorse or promote any specific
# products or services.
# ---------------------
#
definitions:
  Dimension:
    description: This class is used to describe dimensions expressed as a 2-tuple, (value, units).
    type: object
    properties:
      dimensionValue:
        description: >-
          The value of the dimension. For example, if the dimension is 20 cm, this
          element is 20.
        type: number
        minimum: 0
      dimensionUnits:
        description: >-
          The unit of measure in the duration. For example, if a dimension is
          20 cm, this element is CM.
        $ref: '#/definitions/DimensionUnits'
  DimensionUnits:
    description: Enum listing the units of measure for a dimension
    type: string
    enum:
      - 'INCH'
      - 'MM'
      - 'CM'
      - 'M'
  IdentifierString:
    description: Identifier String - max 53 alpha-numerical characters
    type: string
    maxLength: 53
    pattern: "[ -\x7F]+"
  Weight:
    description: This class is used to describe weights expressed as a 2-tuple, (value, units).
    type: object
    properties:
      weightValue:
        description: >-
          The value of the weight. For example, if the weight is 20 kg, this
          element is 20.
        type: number
        minimum: 0
      weightUnits:
        description: >-
          The unit of measure in the weight. For example, if a weight is
          20 kg, this element is KG.
        $ref: '#/definitions/WeightUnits'
  WeightUnits:
    description: Enum listing the units of measure for a weight
    type: string
    enum:
      - 'POUNDS'
      - 'G'
      - 'KG'
