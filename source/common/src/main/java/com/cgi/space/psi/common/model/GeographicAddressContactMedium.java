package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.ContactMedium;
import com.cgi.space.psi.common.model.EmailContactMedium;
import com.cgi.space.psi.common.model.FaxContactMedium;
import com.cgi.space.psi.common.model.GeographicAddressContactMedium;
import com.cgi.space.psi.common.model.GeographicAddressRef;
import com.cgi.space.psi.common.model.PhoneContactMedium;
import com.cgi.space.psi.common.model.SocialContactMedium;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * GeographicAddressContactMedium
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ContactMedium.class, name = "ContactMedium"),
  @JsonSubTypes.Type(value = EmailContactMedium.class, name = "EmailContactMedium"),
  @JsonSubTypes.Type(value = FaxContactMedium.class, name = "FaxContactMedium"),
  @JsonSubTypes.Type(value = GeographicAddressContactMedium.class, name = "GeographicAddressContactMedium"),
  @JsonSubTypes.Type(value = PhoneContactMedium.class, name = "PhoneContactMedium"),
  @JsonSubTypes.Type(value = SocialContactMedium.class, name = "SocialContactMedium")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class GeographicAddressContactMedium extends ContactMedium {

  @JsonProperty("city")
  private String city;

  @JsonProperty("country")
  private String country;

  @JsonProperty("postCode")
  private String postCode;

  @JsonProperty("stateOrProvince")
  private String stateOrProvince;

  @JsonProperty("street1")
  private String street1;

  @JsonProperty("street2")
  private String street2;

  @JsonProperty("geographicAddress")
  private GeographicAddressRef geographicAddress;

  public GeographicAddressContactMedium city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city
   * @return city
  */
  
  @Schema(name = "city", description = "The city", required = false)
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public GeographicAddressContactMedium country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country
   * @return country
  */
  
  @Schema(name = "country", description = "The country", required = false)
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public GeographicAddressContactMedium postCode(String postCode) {
    this.postCode = postCode;
    return this;
  }

  /**
   * Postcode
   * @return postCode
  */
  
  @Schema(name = "postCode", description = "Postcode", required = false)
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }

  public GeographicAddressContactMedium stateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
    return this;
  }

  /**
   * State or province
   * @return stateOrProvince
  */
  
  @Schema(name = "stateOrProvince", description = "State or province", required = false)
  public String getStateOrProvince() {
    return stateOrProvince;
  }

  public void setStateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
  }

  public GeographicAddressContactMedium street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   * Describes the street
   * @return street1
  */
  
  @Schema(name = "street1", description = "Describes the street", required = false)
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }

  public GeographicAddressContactMedium street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   * Complementary street description
   * @return street2
  */
  
  @Schema(name = "street2", description = "Complementary street description", required = false)
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }

  public GeographicAddressContactMedium geographicAddress(GeographicAddressRef geographicAddress) {
    this.geographicAddress = geographicAddress;
    return this;
  }

  /**
   * Get geographicAddress
   * @return geographicAddress
  */
  @Valid 
  @Schema(name = "geographicAddress", required = false)
  public GeographicAddressRef getGeographicAddress() {
    return geographicAddress;
  }

  public void setGeographicAddress(GeographicAddressRef geographicAddress) {
    this.geographicAddress = geographicAddress;
  }

  public GeographicAddressContactMedium atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public GeographicAddressContactMedium atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public GeographicAddressContactMedium atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public GeographicAddressContactMedium id(String id) {
    super.setId(id);
    return this;
  }

  public GeographicAddressContactMedium preferred(Boolean preferred) {
    super.setPreferred(preferred);
    return this;
  }

  public GeographicAddressContactMedium contactType(String contactType) {
    super.setContactType(contactType);
    return this;
  }

  public GeographicAddressContactMedium validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeographicAddressContactMedium geographicAddressContactMedium = (GeographicAddressContactMedium) o;
    return Objects.equals(this.city, geographicAddressContactMedium.city) &&
        Objects.equals(this.country, geographicAddressContactMedium.country) &&
        Objects.equals(this.postCode, geographicAddressContactMedium.postCode) &&
        Objects.equals(this.stateOrProvince, geographicAddressContactMedium.stateOrProvince) &&
        Objects.equals(this.street1, geographicAddressContactMedium.street1) &&
        Objects.equals(this.street2, geographicAddressContactMedium.street2) &&
        Objects.equals(this.geographicAddress, geographicAddressContactMedium.geographicAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, postCode, stateOrProvince, street1, street2, geographicAddress, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeographicAddressContactMedium {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    stateOrProvince: ").append(toIndentedString(stateOrProvince)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    geographicAddress: ").append(toIndentedString(geographicAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

