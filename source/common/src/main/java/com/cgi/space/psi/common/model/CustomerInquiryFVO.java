package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.CustomerCharacteristic;
import com.cgi.space.psi.common.model.CustomerInquiryFVO;
import com.cgi.space.psi.common.model.InquiredProduct;
import com.cgi.space.psi.common.model.InquiredProvider;
import com.cgi.space.psi.common.model.PlaceRefOrValue;
import com.cgi.space.psi.common.model.ResourceSpecification;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * CustomerInquiryFVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CustomerInquiryFVO.class, name = "CustomerInquiry")
})

@JsonTypeName("CustomerInquiry_FVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class CustomerInquiryFVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("id")
  private String id;

  @JsonProperty("customerProfile")
  @Valid
  private List<CustomerCharacteristic> customerProfile = null;

  @JsonProperty("bundlesOnly")
  private Boolean bundlesOnly = true;

  @JsonProperty("customerResource")
  @Valid
  private List<ResourceSpecification> customerResource = null;

  @JsonProperty("place")
  @Valid
  private List<PlaceRefOrValue> place = null;

  @JsonProperty("inquiredProduct")
  @Valid
  private List<InquiredProduct> inquiredProduct = null;

  @JsonProperty("inquiredProvider")
  @Valid
  private List<InquiredProvider> inquiredProvider = null;

  public CustomerInquiryFVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public CustomerInquiryFVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public CustomerInquiryFVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public CustomerInquiryFVO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * unique identifier
   * @return id
  */
  
  @Schema(name = "id", description = "unique identifier", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CustomerInquiryFVO customerProfile(List<CustomerCharacteristic> customerProfile) {
    this.customerProfile = customerProfile;
    return this;
  }

  public CustomerInquiryFVO addCustomerProfileItem(CustomerCharacteristic customerProfileItem) {
    if (this.customerProfile == null) {
      this.customerProfile = new ArrayList<>();
    }
    this.customerProfile.add(customerProfileItem);
    return this;
  }

  /**
   * Characteristics describing the customer. Used to scope results of a CustomerInquiry.
   * @return customerProfile
  */
  @Valid 
  @Schema(name = "customerProfile", description = "Characteristics describing the customer. Used to scope results of a CustomerInquiry.", required = false)
  public List<CustomerCharacteristic> getCustomerProfile() {
    return customerProfile;
  }

  public void setCustomerProfile(List<CustomerCharacteristic> customerProfile) {
    this.customerProfile = customerProfile;
  }

  public CustomerInquiryFVO bundlesOnly(Boolean bundlesOnly) {
    this.bundlesOnly = bundlesOnly;
    return this;
  }

  /**
   * Whether or not to return only products/offerings which include all requested products. If set to false, the response may contain results which only partially satisfy the inquiry.
   * @return bundlesOnly
  */
  
  @Schema(name = "bundlesOnly", description = "Whether or not to return only products/offerings which include all requested products. If set to false, the response may contain results which only partially satisfy the inquiry.", required = false)
  public Boolean getBundlesOnly() {
    return bundlesOnly;
  }

  public void setBundlesOnly(Boolean bundlesOnly) {
    this.bundlesOnly = bundlesOnly;
  }

  public CustomerInquiryFVO customerResource(List<ResourceSpecification> customerResource) {
    this.customerResource = customerResource;
    return this;
  }

  public CustomerInquiryFVO addCustomerResourceItem(ResourceSpecification customerResourceItem) {
    if (this.customerResource == null) {
      this.customerResource = new ArrayList<>();
    }
    this.customerResource.add(customerResourceItem);
    return this;
  }

  /**
   * List of ResourceSpecifications the customer already posseses and wants to re-use.
   * @return customerResource
  */
  @Valid 
  @Schema(name = "customerResource", description = "List of ResourceSpecifications the customer already posseses and wants to re-use.", required = false)
  public List<ResourceSpecification> getCustomerResource() {
    return customerResource;
  }

  public void setCustomerResource(List<ResourceSpecification> customerResource) {
    this.customerResource = customerResource;
  }

  public CustomerInquiryFVO place(List<PlaceRefOrValue> place) {
    this.place = place;
    return this;
  }

  public CustomerInquiryFVO addPlaceItem(PlaceRefOrValue placeItem) {
    if (this.place == null) {
      this.place = new ArrayList<>();
    }
    this.place.add(placeItem);
    return this;
  }

  /**
   * List of places where the products are needed.
   * @return place
  */
  @Valid 
  @Schema(name = "place", description = "List of places where the products are needed.", required = false)
  public List<PlaceRefOrValue> getPlace() {
    return place;
  }

  public void setPlace(List<PlaceRefOrValue> place) {
    this.place = place;
  }

  public CustomerInquiryFVO inquiredProduct(List<InquiredProduct> inquiredProduct) {
    this.inquiredProduct = inquiredProduct;
    return this;
  }

  public CustomerInquiryFVO addInquiredProductItem(InquiredProduct inquiredProductItem) {
    if (this.inquiredProduct == null) {
      this.inquiredProduct = new ArrayList<>();
    }
    this.inquiredProduct.add(inquiredProductItem);
    return this;
  }

  /**
   * List of inquired products.
   * @return inquiredProduct
  */
  @Valid 
  @Schema(name = "inquiredProduct", description = "List of inquired products.", required = false)
  public List<InquiredProduct> getInquiredProduct() {
    return inquiredProduct;
  }

  public void setInquiredProduct(List<InquiredProduct> inquiredProduct) {
    this.inquiredProduct = inquiredProduct;
  }

  public CustomerInquiryFVO inquiredProvider(List<InquiredProvider> inquiredProvider) {
    this.inquiredProvider = inquiredProvider;
    return this;
  }

  public CustomerInquiryFVO addInquiredProviderItem(InquiredProvider inquiredProviderItem) {
    if (this.inquiredProvider == null) {
      this.inquiredProvider = new ArrayList<>();
    }
    this.inquiredProvider.add(inquiredProviderItem);
    return this;
  }

  /**
   * The list of providers that are inquired to respond with a product offering.
   * @return inquiredProvider
  */
  @Valid 
  @Schema(name = "inquiredProvider", description = "The list of providers that are inquired to respond with a product offering.", required = false)
  public List<InquiredProvider> getInquiredProvider() {
    return inquiredProvider;
  }

  public void setInquiredProvider(List<InquiredProvider> inquiredProvider) {
    this.inquiredProvider = inquiredProvider;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerInquiryFVO customerInquiryFVO = (CustomerInquiryFVO) o;
    return Objects.equals(this.atType, customerInquiryFVO.atType) &&
        Objects.equals(this.atBaseType, customerInquiryFVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, customerInquiryFVO.atSchemaLocation) &&
        Objects.equals(this.id, customerInquiryFVO.id) &&
        Objects.equals(this.customerProfile, customerInquiryFVO.customerProfile) &&
        Objects.equals(this.bundlesOnly, customerInquiryFVO.bundlesOnly) &&
        Objects.equals(this.customerResource, customerInquiryFVO.customerResource) &&
        Objects.equals(this.place, customerInquiryFVO.place) &&
        Objects.equals(this.inquiredProduct, customerInquiryFVO.inquiredProduct) &&
        Objects.equals(this.inquiredProvider, customerInquiryFVO.inquiredProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, id, customerProfile, bundlesOnly, customerResource, place, inquiredProduct, inquiredProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerInquiryFVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerProfile: ").append(toIndentedString(customerProfile)).append("\n");
    sb.append("    bundlesOnly: ").append(toIndentedString(bundlesOnly)).append("\n");
    sb.append("    customerResource: ").append(toIndentedString(customerResource)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    inquiredProduct: ").append(toIndentedString(inquiredProduct)).append("\n");
    sb.append("    inquiredProvider: ").append(toIndentedString(inquiredProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

