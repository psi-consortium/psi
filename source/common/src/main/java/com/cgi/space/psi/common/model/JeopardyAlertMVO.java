package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.JeopardyAlertMVO;
import com.cgi.space.psi.common.model.ProductOrderJeopardyAlertMVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * JeopardyAlertMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = JeopardyAlertMVO.class, name = "JeopardyAlert"),
  @JsonSubTypes.Type(value = ProductOrderJeopardyAlertMVO.class, name = "ProductOrderJeopardyAlert"),
  @JsonSubTypes.Type(value = ProductOrderJeopardyAlertMVO.class, name = "ProductOrderJeopardyAlert_MVO")
})

@JsonTypeName("JeopardyAlert_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class JeopardyAlertMVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("id")
  private String id;

  @JsonProperty("alertDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime alertDate;

  @JsonProperty("name")
  private String name;

  @JsonProperty("jeopardyType")
  private String jeopardyType;

  @JsonProperty("exception")
  private String exception;

  @JsonProperty("message")
  private String message;

  public JeopardyAlertMVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public JeopardyAlertMVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public JeopardyAlertMVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public JeopardyAlertMVO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * identifier of the JeopardyAlert
   * @return id
  */
  
  @Schema(name = "id", description = "identifier of the JeopardyAlert", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public JeopardyAlertMVO alertDate(OffsetDateTime alertDate) {
    this.alertDate = alertDate;
    return this;
  }

  /**
   * A date time( DateTime). The date that the alert issued
   * @return alertDate
  */
  @Valid 
  @Schema(name = "alertDate", description = "A date time( DateTime). The date that the alert issued", required = false)
  public OffsetDateTime getAlertDate() {
    return alertDate;
  }

  public void setAlertDate(OffsetDateTime alertDate) {
    this.alertDate = alertDate;
  }

  public JeopardyAlertMVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A string used to give a name to the jeopardy alert
   * @return name
  */
  
  @Schema(name = "name", description = "A string used to give a name to the jeopardy alert", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JeopardyAlertMVO jeopardyType(String jeopardyType) {
    this.jeopardyType = jeopardyType;
    return this;
  }

  /**
   * A string represents the type of jeopardy/risk like Normal, Hazard, Critical, ...
   * @return jeopardyType
  */
  
  @Schema(name = "jeopardyType", description = "A string represents the type of jeopardy/risk like Normal, Hazard, Critical, ...", required = false)
  public String getJeopardyType() {
    return jeopardyType;
  }

  public void setJeopardyType(String jeopardyType) {
    this.jeopardyType = jeopardyType;
  }

  public JeopardyAlertMVO exception(String exception) {
    this.exception = exception;
    return this;
  }

  /**
   *  The exception associated with this jeopardy alert
   * @return exception
  */
  
  @Schema(name = "exception", description = " The exception associated with this jeopardy alert", required = false)
  public String getException() {
    return exception;
  }

  public void setException(String exception) {
    this.exception = exception;
  }

  public JeopardyAlertMVO message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A string represents the message of the alert
   * @return message
  */
  
  @Schema(name = "message", description = "A string represents the message of the alert", required = false)
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JeopardyAlertMVO jeopardyAlertMVO = (JeopardyAlertMVO) o;
    return Objects.equals(this.atType, jeopardyAlertMVO.atType) &&
        Objects.equals(this.atBaseType, jeopardyAlertMVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, jeopardyAlertMVO.atSchemaLocation) &&
        Objects.equals(this.id, jeopardyAlertMVO.id) &&
        Objects.equals(this.alertDate, jeopardyAlertMVO.alertDate) &&
        Objects.equals(this.name, jeopardyAlertMVO.name) &&
        Objects.equals(this.jeopardyType, jeopardyAlertMVO.jeopardyType) &&
        Objects.equals(this.exception, jeopardyAlertMVO.exception) &&
        Objects.equals(this.message, jeopardyAlertMVO.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, id, alertDate, name, jeopardyType, exception, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JeopardyAlertMVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    alertDate: ").append(toIndentedString(alertDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    jeopardyType: ").append(toIndentedString(jeopardyType)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

