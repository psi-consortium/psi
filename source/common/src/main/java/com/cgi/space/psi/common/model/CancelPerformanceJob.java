package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.PerformanceJobProcessStateType;
import com.cgi.space.psi.common.model.PerformanceJobRef;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.net.URI;
import java.time.OffsetDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * CancelPerformanceJob
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class CancelPerformanceJob {

  @JsonProperty("cancellationReason")
  private String cancellationReason;

  @JsonProperty("performanceJob")
  private PerformanceJobRef performanceJob;

  @JsonProperty("cancellationDeniedReason")
  private String cancellationDeniedReason;

  @JsonProperty("creationDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime creationDate;

  @JsonProperty("href")
  private URI href;

  @JsonProperty("id")
  private String id;

  @JsonProperty("state")
  private PerformanceJobProcessStateType state;

  public CancelPerformanceJob cancellationReason(String cancellationReason) {
    this.cancellationReason = cancellationReason;
    return this;
  }

  /**
   * An optional attribute that allows the Buyer/Client to provide additional detail to the Seller/Server on the reason for cancelling Performance Job.
   * @return cancellationReason
  */
  
  @Schema(name = "cancellationReason", description = "An optional attribute that allows the Buyer/Client to provide additional detail to the Seller/Server on the reason for cancelling Performance Job.", required = false)
  public String getCancellationReason() {
    return cancellationReason;
  }

  public void setCancellationReason(String cancellationReason) {
    this.cancellationReason = cancellationReason;
  }

  public CancelPerformanceJob performanceJob(PerformanceJobRef performanceJob) {
    this.performanceJob = performanceJob;
    return this;
  }

  /**
   * Get performanceJob
   * @return performanceJob
  */
  @NotNull @Valid 
  @Schema(name = "performanceJob", required = true)
  public PerformanceJobRef getPerformanceJob() {
    return performanceJob;
  }

  public void setPerformanceJob(PerformanceJobRef performanceJob) {
    this.performanceJob = performanceJob;
  }

  public CancelPerformanceJob cancellationDeniedReason(String cancellationDeniedReason) {
    this.cancellationDeniedReason = cancellationDeniedReason;
    return this;
  }

  /**
   * If the Cancel Performance Job request is denied by the  Seller/Server, the Seller/Server provides a reason to the Buyer/Client using this attribute.
   * @return cancellationDeniedReason
  */
  
  @Schema(name = "cancellationDeniedReason", description = "If the Cancel Performance Job request is denied by the  Seller/Server, the Seller/Server provides a reason to the Buyer/Client using this attribute.", required = false)
  public String getCancellationDeniedReason() {
    return cancellationDeniedReason;
  }

  public void setCancellationDeniedReason(String cancellationDeniedReason) {
    this.cancellationDeniedReason = cancellationDeniedReason;
  }

  public CancelPerformanceJob creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date when the Cancel Performance Job was created.
   * @return creationDate
  */
  @NotNull @Valid 
  @Schema(name = "creationDate", description = "Date when the Cancel Performance Job was created.", required = true)
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public CancelPerformanceJob href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * Hyperlink to the Cancel Performance Job entity
   * @return href
  */
  @Valid 
  @Schema(name = "href", description = "Hyperlink to the Cancel Performance Job entity", required = false)
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }

  public CancelPerformanceJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the Cancel Performance Job that is generated by the Seller/Server when the Cancel Performance Job request  `state` is set to `acknowledged`.
   * @return id
  */
  @NotNull 
  @Schema(name = "id", description = "Unique identifier for the Cancel Performance Job that is generated by the Seller/Server when the Cancel Performance Job request  `state` is set to `acknowledged`.", required = true)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CancelPerformanceJob state(PerformanceJobProcessStateType state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
  */
  @NotNull @Valid 
  @Schema(name = "state", required = true)
  public PerformanceJobProcessStateType getState() {
    return state;
  }

  public void setState(PerformanceJobProcessStateType state) {
    this.state = state;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancelPerformanceJob cancelPerformanceJob = (CancelPerformanceJob) o;
    return Objects.equals(this.cancellationReason, cancelPerformanceJob.cancellationReason) &&
        Objects.equals(this.performanceJob, cancelPerformanceJob.performanceJob) &&
        Objects.equals(this.cancellationDeniedReason, cancelPerformanceJob.cancellationDeniedReason) &&
        Objects.equals(this.creationDate, cancelPerformanceJob.creationDate) &&
        Objects.equals(this.href, cancelPerformanceJob.href) &&
        Objects.equals(this.id, cancelPerformanceJob.id) &&
        Objects.equals(this.state, cancelPerformanceJob.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationReason, performanceJob, cancellationDeniedReason, creationDate, href, id, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancelPerformanceJob {\n");
    sb.append("    cancellationReason: ").append(toIndentedString(cancellationReason)).append("\n");
    sb.append("    performanceJob: ").append(toIndentedString(performanceJob)).append("\n");
    sb.append("    cancellationDeniedReason: ").append(toIndentedString(cancellationDeniedReason)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

