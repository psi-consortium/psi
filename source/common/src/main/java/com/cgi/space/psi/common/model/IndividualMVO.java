package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.CharacteristicMVO;
import com.cgi.space.psi.common.model.ContactMediumMVO;
import com.cgi.space.psi.common.model.Disability;
import com.cgi.space.psi.common.model.ExternalIdentifierMVO;
import com.cgi.space.psi.common.model.IndividualIdentificationMVO;
import com.cgi.space.psi.common.model.IndividualMVO;
import com.cgi.space.psi.common.model.IndividualStateType;
import com.cgi.space.psi.common.model.LanguageAbility;
import com.cgi.space.psi.common.model.OrganizationMVO;
import com.cgi.space.psi.common.model.OtherNameIndividual;
import com.cgi.space.psi.common.model.PartyCreditProfileMVO;
import com.cgi.space.psi.common.model.PartyMVO;
import com.cgi.space.psi.common.model.RelatedPartyOrPartyRoleMVO;
import com.cgi.space.psi.common.model.Skill;
import com.cgi.space.psi.common.model.TaxExemptionCertificateMVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.net.URI;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * IndividualMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = IndividualMVO.class, name = "Individual"),
  @JsonSubTypes.Type(value = OrganizationMVO.class, name = "Organization"),
  @JsonSubTypes.Type(value = PartyMVO.class, name = "Party")
})

@JsonTypeName("Individual_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class IndividualMVO extends PartyMVO implements PartyOrPartyRoleMVO {

  @JsonProperty("gender")
  private String gender;

  @JsonProperty("placeOfBirth")
  private String placeOfBirth;

  @JsonProperty("countryOfBirth")
  private String countryOfBirth;

  @JsonProperty("nationality")
  private String nationality;

  @JsonProperty("maritalStatus")
  private String maritalStatus;

  @JsonProperty("birthDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime birthDate;

  @JsonProperty("deathDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime deathDate;

  @JsonProperty("title")
  private String title;

  @JsonProperty("aristocraticTitle")
  private String aristocraticTitle;

  @JsonProperty("generation")
  private String generation;

  @JsonProperty("preferredGivenName")
  private String preferredGivenName;

  @JsonProperty("familyNamePrefix")
  private String familyNamePrefix;

  @JsonProperty("legalName")
  private String legalName;

  @JsonProperty("middleName")
  private String middleName;

  @JsonProperty("name")
  private String name;

  @JsonProperty("formattedName")
  private String formattedName;

  @JsonProperty("location")
  private String location;

  @JsonProperty("status")
  private IndividualStateType status;

  @JsonProperty("otherName")
  @Valid
  private List<OtherNameIndividual> otherName = null;

  @JsonProperty("individualIdentification")
  @Valid
  private List<IndividualIdentificationMVO> individualIdentification = null;

  @JsonProperty("disability")
  @Valid
  private List<Disability> disability = null;

  @JsonProperty("languageAbility")
  @Valid
  private List<LanguageAbility> languageAbility = null;

  @JsonProperty("skill")
  @Valid
  private List<Skill> skill = null;

  @JsonProperty("familyName")
  private String familyName;

  @JsonProperty("givenName")
  private String givenName;

  public IndividualMVO gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Gender
   * @return gender
  */
  
  @Schema(name = "gender", description = "Gender", required = false)
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }

  public IndividualMVO placeOfBirth(String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
    return this;
  }

  /**
   * Reference to the place where the individual was born
   * @return placeOfBirth
  */
  
  @Schema(name = "placeOfBirth", description = "Reference to the place where the individual was born", required = false)
  public String getPlaceOfBirth() {
    return placeOfBirth;
  }

  public void setPlaceOfBirth(String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }

  public IndividualMVO countryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
    return this;
  }

  /**
   * Country where the individual was born
   * @return countryOfBirth
  */
  
  @Schema(name = "countryOfBirth", description = "Country where the individual was born", required = false)
  public String getCountryOfBirth() {
    return countryOfBirth;
  }

  public void setCountryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
  }

  public IndividualMVO nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Nationality
   * @return nationality
  */
  
  @Schema(name = "nationality", description = "Nationality", required = false)
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public IndividualMVO maritalStatus(String maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  /**
   * Marital status (married, divorced, widow ...)
   * @return maritalStatus
  */
  
  @Schema(name = "maritalStatus", description = "Marital status (married, divorced, widow ...)", required = false)
  public String getMaritalStatus() {
    return maritalStatus;
  }

  public void setMaritalStatus(String maritalStatus) {
    this.maritalStatus = maritalStatus;
  }

  public IndividualMVO birthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Birth date
   * @return birthDate
  */
  @Valid 
  @Schema(name = "birthDate", description = "Birth date", required = false)
  public OffsetDateTime getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }

  public IndividualMVO deathDate(OffsetDateTime deathDate) {
    this.deathDate = deathDate;
    return this;
  }

  /**
   * Date of death
   * @return deathDate
  */
  @Valid 
  @Schema(name = "deathDate", description = "Date of death", required = false)
  public OffsetDateTime getDeathDate() {
    return deathDate;
  }

  public void setDeathDate(OffsetDateTime deathDate) {
    this.deathDate = deathDate;
  }

  public IndividualMVO title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...
   * @return title
  */
  
  @Schema(name = "title", description = "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...", required = false)
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public IndividualMVO aristocraticTitle(String aristocraticTitle) {
    this.aristocraticTitle = aristocraticTitle;
    return this;
  }

  /**
   * e.g. Baron, Graf, Earl
   * @return aristocraticTitle
  */
  
  @Schema(name = "aristocraticTitle", description = "e.g. Baron, Graf, Earl", required = false)
  public String getAristocraticTitle() {
    return aristocraticTitle;
  }

  public void setAristocraticTitle(String aristocraticTitle) {
    this.aristocraticTitle = aristocraticTitle;
  }

  public IndividualMVO generation(String generation) {
    this.generation = generation;
    return this;
  }

  /**
   * e.g.. Sr, Jr, III (the third)
   * @return generation
  */
  
  @Schema(name = "generation", description = "e.g.. Sr, Jr, III (the third)", required = false)
  public String getGeneration() {
    return generation;
  }

  public void setGeneration(String generation) {
    this.generation = generation;
  }

  public IndividualMVO preferredGivenName(String preferredGivenName) {
    this.preferredGivenName = preferredGivenName;
    return this;
  }

  /**
   * Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname
   * @return preferredGivenName
  */
  
  @Schema(name = "preferredGivenName", description = "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname", required = false)
  public String getPreferredGivenName() {
    return preferredGivenName;
  }

  public void setPreferredGivenName(String preferredGivenName) {
    this.preferredGivenName = preferredGivenName;
  }

  public IndividualMVO familyNamePrefix(String familyNamePrefix) {
    this.familyNamePrefix = familyNamePrefix;
    return this;
  }

  /**
   * Family name prefix
   * @return familyNamePrefix
  */
  
  @Schema(name = "familyNamePrefix", description = "Family name prefix", required = false)
  public String getFamilyNamePrefix() {
    return familyNamePrefix;
  }

  public void setFamilyNamePrefix(String familyNamePrefix) {
    this.familyNamePrefix = familyNamePrefix;
  }

  public IndividualMVO legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * Legal name or birth name (name one has for official purposes)
   * @return legalName
  */
  
  @Schema(name = "legalName", description = "Legal name or birth name (name one has for official purposes)", required = false)
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }

  public IndividualMVO middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Middles name or initial
   * @return middleName
  */
  
  @Schema(name = "middleName", description = "Middles name or initial", required = false)
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public IndividualMVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual
   * @return name
  */
  
  @Schema(name = "name", description = "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IndividualMVO formattedName(String formattedName) {
    this.formattedName = formattedName;
    return this;
  }

  /**
   * A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)
   * @return formattedName
  */
  
  @Schema(name = "formattedName", description = "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)", required = false)
  public String getFormattedName() {
    return formattedName;
  }

  public void setFormattedName(String formattedName) {
    this.formattedName = formattedName;
  }

  public IndividualMVO location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Temporary current location of the individual (may be used if the individual has approved its sharing)
   * @return location
  */
  
  @Schema(name = "location", description = "Temporary current location of the individual (may be used if the individual has approved its sharing)", required = false)
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public IndividualMVO status(IndividualStateType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
  */
  @Valid 
  @Schema(name = "status", required = false)
  public IndividualStateType getStatus() {
    return status;
  }

  public void setStatus(IndividualStateType status) {
    this.status = status;
  }

  public IndividualMVO otherName(List<OtherNameIndividual> otherName) {
    this.otherName = otherName;
    return this;
  }

  public IndividualMVO addOtherNameItem(OtherNameIndividual otherNameItem) {
    if (this.otherName == null) {
      this.otherName = new ArrayList<>();
    }
    this.otherName.add(otherNameItem);
    return this;
  }

  /**
   * List of other names by which this individual is known
   * @return otherName
  */
  @Valid 
  @Schema(name = "otherName", description = "List of other names by which this individual is known", required = false)
  public List<OtherNameIndividual> getOtherName() {
    return otherName;
  }

  public void setOtherName(List<OtherNameIndividual> otherName) {
    this.otherName = otherName;
  }

  public IndividualMVO individualIdentification(List<IndividualIdentificationMVO> individualIdentification) {
    this.individualIdentification = individualIdentification;
    return this;
  }

  public IndividualMVO addIndividualIdentificationItem(IndividualIdentificationMVO individualIdentificationItem) {
    if (this.individualIdentification == null) {
      this.individualIdentification = new ArrayList<>();
    }
    this.individualIdentification.add(individualIdentificationItem);
    return this;
  }

  /**
   * List of official identifications issued to the individual, such as passport, driving licence, social security number
   * @return individualIdentification
  */
  @Valid 
  @Schema(name = "individualIdentification", description = "List of official identifications issued to the individual, such as passport, driving licence, social security number", required = false)
  public List<IndividualIdentificationMVO> getIndividualIdentification() {
    return individualIdentification;
  }

  public void setIndividualIdentification(List<IndividualIdentificationMVO> individualIdentification) {
    this.individualIdentification = individualIdentification;
  }

  public IndividualMVO disability(List<Disability> disability) {
    this.disability = disability;
    return this;
  }

  public IndividualMVO addDisabilityItem(Disability disabilityItem) {
    if (this.disability == null) {
      this.disability = new ArrayList<>();
    }
    this.disability.add(disabilityItem);
    return this;
  }

  /**
   * List of disabilities suffered by the individual
   * @return disability
  */
  @Valid 
  @Schema(name = "disability", description = "List of disabilities suffered by the individual", required = false)
  public List<Disability> getDisability() {
    return disability;
  }

  public void setDisability(List<Disability> disability) {
    this.disability = disability;
  }

  public IndividualMVO languageAbility(List<LanguageAbility> languageAbility) {
    this.languageAbility = languageAbility;
    return this;
  }

  public IndividualMVO addLanguageAbilityItem(LanguageAbility languageAbilityItem) {
    if (this.languageAbility == null) {
      this.languageAbility = new ArrayList<>();
    }
    this.languageAbility.add(languageAbilityItem);
    return this;
  }

  /**
   * List of national languages known by the individual
   * @return languageAbility
  */
  @Valid 
  @Schema(name = "languageAbility", description = "List of national languages known by the individual", required = false)
  public List<LanguageAbility> getLanguageAbility() {
    return languageAbility;
  }

  public void setLanguageAbility(List<LanguageAbility> languageAbility) {
    this.languageAbility = languageAbility;
  }

  public IndividualMVO skill(List<Skill> skill) {
    this.skill = skill;
    return this;
  }

  public IndividualMVO addSkillItem(Skill skillItem) {
    if (this.skill == null) {
      this.skill = new ArrayList<>();
    }
    this.skill.add(skillItem);
    return this;
  }

  /**
   * List of skills exhibited by the individual
   * @return skill
  */
  @Valid 
  @Schema(name = "skill", description = "List of skills exhibited by the individual", required = false)
  public List<Skill> getSkill() {
    return skill;
  }

  public void setSkill(List<Skill> skill) {
    this.skill = skill;
  }

  public IndividualMVO familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * Contains the non-chosen or inherited name. Also known as last name in the Western context
   * @return familyName
  */
  
  @Schema(name = "familyName", description = "Contains the non-chosen or inherited name. Also known as last name in the Western context", required = false)
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }

  public IndividualMVO givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * First name of the individual
   * @return givenName
  */
  
  @Schema(name = "givenName", description = "First name of the individual", required = false)
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }

  public IndividualMVO atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public IndividualMVO atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public IndividualMVO atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public IndividualMVO externalReference(List<ExternalIdentifierMVO> externalReference) {
    super.setExternalReference(externalReference);
    return this;
  }

  public IndividualMVO addExternalReferenceItem(ExternalIdentifierMVO externalReferenceItem) {
    super.addExternalReferenceItem(externalReferenceItem);
    return this;
  }

  public IndividualMVO partyCharacteristic(List<CharacteristicMVO> partyCharacteristic) {
    super.setPartyCharacteristic(partyCharacteristic);
    return this;
  }

  public IndividualMVO addPartyCharacteristicItem(CharacteristicMVO partyCharacteristicItem) {
    super.addPartyCharacteristicItem(partyCharacteristicItem);
    return this;
  }

  public IndividualMVO taxExemptionCertificate(List<TaxExemptionCertificateMVO> taxExemptionCertificate) {
    super.setTaxExemptionCertificate(taxExemptionCertificate);
    return this;
  }

  public IndividualMVO addTaxExemptionCertificateItem(TaxExemptionCertificateMVO taxExemptionCertificateItem) {
    super.addTaxExemptionCertificateItem(taxExemptionCertificateItem);
    return this;
  }

  public IndividualMVO creditRating(List<PartyCreditProfileMVO> creditRating) {
    super.setCreditRating(creditRating);
    return this;
  }

  public IndividualMVO addCreditRatingItem(PartyCreditProfileMVO creditRatingItem) {
    super.addCreditRatingItem(creditRatingItem);
    return this;
  }

  public IndividualMVO relatedParty(List<RelatedPartyOrPartyRoleMVO> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public IndividualMVO addRelatedPartyItem(RelatedPartyOrPartyRoleMVO relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public IndividualMVO contactMedium(List<ContactMediumMVO> contactMedium) {
    super.setContactMedium(contactMedium);
    return this;
  }

  public IndividualMVO addContactMediumItem(ContactMediumMVO contactMediumItem) {
    super.addContactMediumItem(contactMediumItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualMVO individualMVO = (IndividualMVO) o;
    return Objects.equals(this.gender, individualMVO.gender) &&
        Objects.equals(this.placeOfBirth, individualMVO.placeOfBirth) &&
        Objects.equals(this.countryOfBirth, individualMVO.countryOfBirth) &&
        Objects.equals(this.nationality, individualMVO.nationality) &&
        Objects.equals(this.maritalStatus, individualMVO.maritalStatus) &&
        Objects.equals(this.birthDate, individualMVO.birthDate) &&
        Objects.equals(this.deathDate, individualMVO.deathDate) &&
        Objects.equals(this.title, individualMVO.title) &&
        Objects.equals(this.aristocraticTitle, individualMVO.aristocraticTitle) &&
        Objects.equals(this.generation, individualMVO.generation) &&
        Objects.equals(this.preferredGivenName, individualMVO.preferredGivenName) &&
        Objects.equals(this.familyNamePrefix, individualMVO.familyNamePrefix) &&
        Objects.equals(this.legalName, individualMVO.legalName) &&
        Objects.equals(this.middleName, individualMVO.middleName) &&
        Objects.equals(this.name, individualMVO.name) &&
        Objects.equals(this.formattedName, individualMVO.formattedName) &&
        Objects.equals(this.location, individualMVO.location) &&
        Objects.equals(this.status, individualMVO.status) &&
        Objects.equals(this.otherName, individualMVO.otherName) &&
        Objects.equals(this.individualIdentification, individualMVO.individualIdentification) &&
        Objects.equals(this.disability, individualMVO.disability) &&
        Objects.equals(this.languageAbility, individualMVO.languageAbility) &&
        Objects.equals(this.skill, individualMVO.skill) &&
        Objects.equals(this.familyName, individualMVO.familyName) &&
        Objects.equals(this.givenName, individualMVO.givenName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gender, placeOfBirth, countryOfBirth, nationality, maritalStatus, birthDate, deathDate, title, aristocraticTitle, generation, preferredGivenName, familyNamePrefix, legalName, middleName, name, formattedName, location, status, otherName, individualIdentification, disability, languageAbility, skill, familyName, givenName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualMVO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    countryOfBirth: ").append(toIndentedString(countryOfBirth)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    deathDate: ").append(toIndentedString(deathDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    aristocraticTitle: ").append(toIndentedString(aristocraticTitle)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    preferredGivenName: ").append(toIndentedString(preferredGivenName)).append("\n");
    sb.append("    familyNamePrefix: ").append(toIndentedString(familyNamePrefix)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    formattedName: ").append(toIndentedString(formattedName)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    otherName: ").append(toIndentedString(otherName)).append("\n");
    sb.append("    individualIdentification: ").append(toIndentedString(individualIdentification)).append("\n");
    sb.append("    disability: ").append(toIndentedString(disability)).append("\n");
    sb.append("    languageAbility: ").append(toIndentedString(languageAbility)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

