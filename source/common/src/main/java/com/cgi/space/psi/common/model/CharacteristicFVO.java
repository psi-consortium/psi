package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.BooleanArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.BooleanCharacteristicFVO;
import com.cgi.space.psi.common.model.CharacteristicFVO;
import com.cgi.space.psi.common.model.CharacteristicRelationshipFVO;
import com.cgi.space.psi.common.model.FloatArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.FloatCharacteristicFVO;
import com.cgi.space.psi.common.model.IntegerArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.IntegerCharacteristicFVO;
import com.cgi.space.psi.common.model.NumberArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.NumberCharacteristicFVO;
import com.cgi.space.psi.common.model.ObjectArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.ObjectCharacteristicFVO;
import com.cgi.space.psi.common.model.StringArrayCharacteristicFVO;
import com.cgi.space.psi.common.model.StringCharacteristicFVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * CharacteristicFVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BooleanArrayCharacteristicFVO.class, name = "BooleanArrayCharacteristic"),
  @JsonSubTypes.Type(value = BooleanArrayCharacteristicFVO.class, name = "BooleanArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = BooleanCharacteristicFVO.class, name = "BooleanCharacteristic"),
  @JsonSubTypes.Type(value = BooleanCharacteristicFVO.class, name = "BooleanCharacteristic_FVO"),
  @JsonSubTypes.Type(value = CharacteristicFVO.class, name = "Characteristic"),
  @JsonSubTypes.Type(value = FloatArrayCharacteristicFVO.class, name = "FloatArrayCharacteristic"),
  @JsonSubTypes.Type(value = FloatArrayCharacteristicFVO.class, name = "FloatArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = FloatCharacteristicFVO.class, name = "FloatCharacteristic"),
  @JsonSubTypes.Type(value = FloatCharacteristicFVO.class, name = "FloatCharacteristic_FVO"),
  @JsonSubTypes.Type(value = IntegerArrayCharacteristicFVO.class, name = "IntegerArrayCharacteristic"),
  @JsonSubTypes.Type(value = IntegerArrayCharacteristicFVO.class, name = "IntegerArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = IntegerCharacteristicFVO.class, name = "IntegerCharacteristic"),
  @JsonSubTypes.Type(value = IntegerCharacteristicFVO.class, name = "IntegerCharacteristic_FVO"),
  @JsonSubTypes.Type(value = NumberArrayCharacteristicFVO.class, name = "NumberArrayCharacteristic"),
  @JsonSubTypes.Type(value = NumberArrayCharacteristicFVO.class, name = "NumberArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = NumberCharacteristicFVO.class, name = "NumberCharacteristic"),
  @JsonSubTypes.Type(value = NumberCharacteristicFVO.class, name = "NumberCharacteristic_FVO"),
  @JsonSubTypes.Type(value = ObjectArrayCharacteristicFVO.class, name = "ObjectArrayCharacteristic"),
  @JsonSubTypes.Type(value = ObjectArrayCharacteristicFVO.class, name = "ObjectArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = ObjectCharacteristicFVO.class, name = "ObjectCharacteristic"),
  @JsonSubTypes.Type(value = ObjectCharacteristicFVO.class, name = "ObjectCharacteristic_FVO"),
  @JsonSubTypes.Type(value = StringArrayCharacteristicFVO.class, name = "StringArrayCharacteristic"),
  @JsonSubTypes.Type(value = StringArrayCharacteristicFVO.class, name = "StringArrayCharacteristic_FVO"),
  @JsonSubTypes.Type(value = StringCharacteristicFVO.class, name = "StringCharacteristic"),
  @JsonSubTypes.Type(value = StringCharacteristicFVO.class, name = "StringCharacteristic_FVO")
})

@JsonTypeName("Characteristic_FVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class CharacteristicFVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("id")
  private String id;

  @JsonProperty("name")
  private String name;

  @JsonProperty("valueType")
  private String valueType;

  @JsonProperty("characteristicRelationship")
  @Valid
  private List<CharacteristicRelationshipFVO> characteristicRelationship = null;

  @JsonProperty("unitOfMeasure")
  private String unitOfMeasure;

  public CharacteristicFVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public CharacteristicFVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public CharacteristicFVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public CharacteristicFVO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the characteristic
   * @return id
  */
  
  @Schema(name = "id", description = "Unique identifier of the characteristic", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CharacteristicFVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the characteristic
   * @return name
  */
  @NotNull 
  @Schema(name = "name", description = "Name of the characteristic", required = true)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CharacteristicFVO valueType(String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Data type of the value of the characteristic
   * @return valueType
  */
  
  @Schema(name = "valueType", description = "Data type of the value of the characteristic", required = false)
  public String getValueType() {
    return valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = valueType;
  }

  public CharacteristicFVO characteristicRelationship(List<CharacteristicRelationshipFVO> characteristicRelationship) {
    this.characteristicRelationship = characteristicRelationship;
    return this;
  }

  public CharacteristicFVO addCharacteristicRelationshipItem(CharacteristicRelationshipFVO characteristicRelationshipItem) {
    if (this.characteristicRelationship == null) {
      this.characteristicRelationship = new ArrayList<>();
    }
    this.characteristicRelationship.add(characteristicRelationshipItem);
    return this;
  }

  /**
   * Get characteristicRelationship
   * @return characteristicRelationship
  */
  @Valid 
  @Schema(name = "characteristicRelationship", required = false)
  public List<CharacteristicRelationshipFVO> getCharacteristicRelationship() {
    return characteristicRelationship;
  }

  public void setCharacteristicRelationship(List<CharacteristicRelationshipFVO> characteristicRelationship) {
    this.characteristicRelationship = characteristicRelationship;
  }

  public CharacteristicFVO unitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot.
   * @return unitOfMeasure
  */
  
  @Schema(name = "unitOfMeasure", description = "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning them to numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot.", required = false)
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharacteristicFVO characteristicFVO = (CharacteristicFVO) o;
    return Objects.equals(this.atType, characteristicFVO.atType) &&
        Objects.equals(this.atBaseType, characteristicFVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, characteristicFVO.atSchemaLocation) &&
        Objects.equals(this.id, characteristicFVO.id) &&
        Objects.equals(this.name, characteristicFVO.name) &&
        Objects.equals(this.valueType, characteristicFVO.valueType) &&
        Objects.equals(this.characteristicRelationship, characteristicFVO.characteristicRelationship) &&
        Objects.equals(this.unitOfMeasure, characteristicFVO.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, id, name, valueType, characteristicRelationship, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharacteristicFVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    characteristicRelationship: ").append(toIndentedString(characteristicRelationship)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

