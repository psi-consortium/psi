package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.Characteristic;
import com.cgi.space.psi.common.model.ExternalIdentifier;
import com.cgi.space.psi.common.model.Feature;
import com.cgi.space.psi.common.model.IntentRef;
import com.cgi.space.psi.common.model.LogicalResource;
import com.cgi.space.psi.common.model.Note;
import com.cgi.space.psi.common.model.PhysicalResource;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRef;
import com.cgi.space.psi.common.model.RelatedPlaceRef;
import com.cgi.space.psi.common.model.RelatedResourceOrderItem;
import com.cgi.space.psi.common.model.Resource;
import com.cgi.space.psi.common.model.ResourceAdministrativeStateType;
import com.cgi.space.psi.common.model.ResourceCollection;
import com.cgi.space.psi.common.model.ResourceOperationalStateType;
import com.cgi.space.psi.common.model.ResourceRefOrValue;
import com.cgi.space.psi.common.model.ResourceRelationship;
import com.cgi.space.psi.common.model.ResourceSpecificationRef;
import com.cgi.space.psi.common.model.ResourceStatusType;
import com.cgi.space.psi.common.model.ResourceUsageStateType;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * PhysicalResource
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = LogicalResource.class, name = "LogicalResource"),
  @JsonSubTypes.Type(value = PhysicalResource.class, name = "PhysicalResource"),
  @JsonSubTypes.Type(value = Resource.class, name = "Resource"),
  @JsonSubTypes.Type(value = ResourceCollection.class, name = "ResourceCollection")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class PhysicalResource extends Resource {

  @JsonProperty("manufactureDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime manufactureDate;

  @JsonProperty("powerState")
  private String powerState;

  @JsonProperty("serialNumber")
  private String serialNumber;

  @JsonProperty("versionNumber")
  private String versionNumber;

  public PhysicalResource manufactureDate(OffsetDateTime manufactureDate) {
    this.manufactureDate = manufactureDate;
    return this;
  }

  /**
   * This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute.
   * @return manufactureDate
  */
  @Valid 
  @Schema(name = "manufactureDate", description = "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute.", required = false)
  public OffsetDateTime getManufactureDate() {
    return manufactureDate;
  }

  public void setManufactureDate(OffsetDateTime manufactureDate) {
    this.manufactureDate = manufactureDate;
  }

  public PhysicalResource powerState(String powerState) {
    this.powerState = powerState;
    return this;
  }

  /**
   * This defines the current power status of the hardware item. Values include:    0:  Unknown   1:  Not Applicable   2:  No Power Applied   3: Full Power Applied   4:  Power Save - Normal   5:  Power Save - Degraded   6:  Power Save - Standby   7:  Power Save - Critical   8:  Power Save - Low Power Mode   9:  Power Save - Unknown  10: Power Cycle  11: Power Warning  12: Power Off
   * @return powerState
  */
  
  @Schema(name = "powerState", description = "This defines the current power status of the hardware item. Values include:    0:  Unknown   1:  Not Applicable   2:  No Power Applied   3: Full Power Applied   4:  Power Save - Normal   5:  Power Save - Degraded   6:  Power Save - Standby   7:  Power Save - Critical   8:  Power Save - Low Power Mode   9:  Power Save - Unknown  10: Power Cycle  11: Power Warning  12: Power Off", required = false)
  public String getPowerState() {
    return powerState;
  }

  public void setPowerState(String powerState) {
    this.powerState = powerState;
  }

  public PhysicalResource serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.
   * @return serialNumber
  */
  
  @Schema(name = "serialNumber", description = "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.", required = false)
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public PhysicalResource versionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * This is a string that identifies the version of this physical resource. This is an optional attribute.
   * @return versionNumber
  */
  
  @Schema(name = "versionNumber", description = "This is a string that identifies the version of this physical resource. This is an optional attribute.", required = false)
  public String getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
  }

  public PhysicalResource atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public PhysicalResource atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public PhysicalResource atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public PhysicalResource href(URI href) {
    super.setHref(href);
    return this;
  }

  public PhysicalResource id(String id) {
    super.setId(id);
    return this;
  }

  public PhysicalResource category(String category) {
    super.setCategory(category);
    return this;
  }

  public PhysicalResource description(String description) {
    super.setDescription(description);
    return this;
  }

  public PhysicalResource name(String name) {
    super.setName(name);
    return this;
  }

  public PhysicalResource endOperatingDate(OffsetDateTime endOperatingDate) {
    super.setEndOperatingDate(endOperatingDate);
    return this;
  }

  public PhysicalResource administrativeState(ResourceAdministrativeStateType administrativeState) {
    super.setAdministrativeState(administrativeState);
    return this;
  }

  public PhysicalResource operationalState(ResourceOperationalStateType operationalState) {
    super.setOperationalState(operationalState);
    return this;
  }

  public PhysicalResource resourceStatus(ResourceStatusType resourceStatus) {
    super.setResourceStatus(resourceStatus);
    return this;
  }

  public PhysicalResource usageState(ResourceUsageStateType usageState) {
    super.setUsageState(usageState);
    return this;
  }

  public PhysicalResource validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  public PhysicalResource note(List<Note> note) {
    super.setNote(note);
    return this;
  }

  public PhysicalResource addNoteItem(Note noteItem) {
    super.addNoteItem(noteItem);
    return this;
  }

  public PhysicalResource resourceOrderItem(List<RelatedResourceOrderItem> resourceOrderItem) {
    super.setResourceOrderItem(resourceOrderItem);
    return this;
  }

  public PhysicalResource addResourceOrderItemItem(RelatedResourceOrderItem resourceOrderItemItem) {
    super.addResourceOrderItemItem(resourceOrderItemItem);
    return this;
  }

  public PhysicalResource place(List<RelatedPlaceRef> place) {
    super.setPlace(place);
    return this;
  }

  public PhysicalResource addPlaceItem(RelatedPlaceRef placeItem) {
    super.addPlaceItem(placeItem);
    return this;
  }

  public PhysicalResource relatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public PhysicalResource addRelatedPartyItem(RelatedPartyRefOrPartyRoleRef relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public PhysicalResource supportingResource(List<ResourceRefOrValue> supportingResource) {
    super.setSupportingResource(supportingResource);
    return this;
  }

  public PhysicalResource addSupportingResourceItem(ResourceRefOrValue supportingResourceItem) {
    super.addSupportingResourceItem(supportingResourceItem);
    return this;
  }

  public PhysicalResource resourceRelationship(List<ResourceRelationship> resourceRelationship) {
    super.setResourceRelationship(resourceRelationship);
    return this;
  }

  public PhysicalResource addResourceRelationshipItem(ResourceRelationship resourceRelationshipItem) {
    super.addResourceRelationshipItem(resourceRelationshipItem);
    return this;
  }

  public PhysicalResource resourceCharacteristic(List<Characteristic> resourceCharacteristic) {
    super.setResourceCharacteristic(resourceCharacteristic);
    return this;
  }

  public PhysicalResource addResourceCharacteristicItem(Characteristic resourceCharacteristicItem) {
    super.addResourceCharacteristicItem(resourceCharacteristicItem);
    return this;
  }

  public PhysicalResource attachment(List<AttachmentOrDocumentRef> attachment) {
    super.setAttachment(attachment);
    return this;
  }

  public PhysicalResource addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    super.addAttachmentItem(attachmentItem);
    return this;
  }

  public PhysicalResource resourceSpecification(ResourceSpecificationRef resourceSpecification) {
    super.setResourceSpecification(resourceSpecification);
    return this;
  }

  public PhysicalResource startOperatingDate(OffsetDateTime startOperatingDate) {
    super.setStartOperatingDate(startOperatingDate);
    return this;
  }

  public PhysicalResource resourceVersion(String resourceVersion) {
    super.setResourceVersion(resourceVersion);
    return this;
  }

  public PhysicalResource activationFeature(List<Feature> activationFeature) {
    super.setActivationFeature(activationFeature);
    return this;
  }

  public PhysicalResource addActivationFeatureItem(Feature activationFeatureItem) {
    super.addActivationFeatureItem(activationFeatureItem);
    return this;
  }

  public PhysicalResource intent(IntentRef intent) {
    super.setIntent(intent);
    return this;
  }

  public PhysicalResource externalIdentifier(List<ExternalIdentifier> externalIdentifier) {
    super.setExternalIdentifier(externalIdentifier);
    return this;
  }

  public PhysicalResource addExternalIdentifierItem(ExternalIdentifier externalIdentifierItem) {
    super.addExternalIdentifierItem(externalIdentifierItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalResource physicalResource = (PhysicalResource) o;
    return Objects.equals(this.manufactureDate, physicalResource.manufactureDate) &&
        Objects.equals(this.powerState, physicalResource.powerState) &&
        Objects.equals(this.serialNumber, physicalResource.serialNumber) &&
        Objects.equals(this.versionNumber, physicalResource.versionNumber) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(manufactureDate, powerState, serialNumber, versionNumber, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalResource {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    manufactureDate: ").append(toIndentedString(manufactureDate)).append("\n");
    sb.append("    powerState: ").append(toIndentedString(powerState)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

