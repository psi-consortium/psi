package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.ContactMediumFVO;
import com.cgi.space.psi.common.model.EmailContactMediumFVO;
import com.cgi.space.psi.common.model.FaxContactMediumFVO;
import com.cgi.space.psi.common.model.GeographicAddressContactMediumFVO;
import com.cgi.space.psi.common.model.PhoneContactMediumFVO;
import com.cgi.space.psi.common.model.SocialContactMediumFVO;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ContactMediumFVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ContactMediumFVO.class, name = "ContactMedium"),
  @JsonSubTypes.Type(value = EmailContactMediumFVO.class, name = "EmailContactMedium"),
  @JsonSubTypes.Type(value = EmailContactMediumFVO.class, name = "EmailContactMedium_FVO"),
  @JsonSubTypes.Type(value = FaxContactMediumFVO.class, name = "FaxContactMedium"),
  @JsonSubTypes.Type(value = FaxContactMediumFVO.class, name = "FaxContactMedium_FVO"),
  @JsonSubTypes.Type(value = GeographicAddressContactMediumFVO.class, name = "GeographicAddressContactMedium"),
  @JsonSubTypes.Type(value = GeographicAddressContactMediumFVO.class, name = "GeographicAddressContactMedium_FVO"),
  @JsonSubTypes.Type(value = PhoneContactMediumFVO.class, name = "PhoneContactMedium"),
  @JsonSubTypes.Type(value = PhoneContactMediumFVO.class, name = "PhoneContactMedium_FVO"),
  @JsonSubTypes.Type(value = SocialContactMediumFVO.class, name = "SocialContactMedium"),
  @JsonSubTypes.Type(value = SocialContactMediumFVO.class, name = "SocialContactMedium_FVO")
})

@JsonTypeName("ContactMedium_FVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ContactMediumFVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("id")
  private String id;

  @JsonProperty("preferred")
  private Boolean preferred;

  @JsonProperty("contactType")
  private String contactType;

  @JsonProperty("validFor")
  private TimePeriod validFor;

  public ContactMediumFVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public ContactMediumFVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public ContactMediumFVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public ContactMediumFVO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier for this contact medium.
   * @return id
  */
  
  @Schema(name = "id", description = "Identifier for this contact medium.", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ContactMediumFVO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * If true, indicates that is the preferred contact medium
   * @return preferred
  */
  
  @Schema(name = "preferred", description = "If true, indicates that is the preferred contact medium", required = false)
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }

  public ContactMediumFVO contactType(String contactType) {
    this.contactType = contactType;
    return this;
  }

  /**
   * Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used.
   * @return contactType
  */
  
  @Schema(name = "contactType", description = "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used.", required = false)
  public String getContactType() {
    return contactType;
  }

  public void setContactType(String contactType) {
    this.contactType = contactType;
  }

  public ContactMediumFVO validFor(TimePeriod validFor) {
    this.validFor = validFor;
    return this;
  }

  /**
   * Get validFor
   * @return validFor
  */
  @Valid 
  @Schema(name = "validFor", required = false)
  public TimePeriod getValidFor() {
    return validFor;
  }

  public void setValidFor(TimePeriod validFor) {
    this.validFor = validFor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactMediumFVO contactMediumFVO = (ContactMediumFVO) o;
    return Objects.equals(this.atType, contactMediumFVO.atType) &&
        Objects.equals(this.atBaseType, contactMediumFVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, contactMediumFVO.atSchemaLocation) &&
        Objects.equals(this.id, contactMediumFVO.id) &&
        Objects.equals(this.preferred, contactMediumFVO.preferred) &&
        Objects.equals(this.contactType, contactMediumFVO.contactType) &&
        Objects.equals(this.validFor, contactMediumFVO.validFor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, id, preferred, contactType, validFor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactMediumFVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    validFor: ").append(toIndentedString(validFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

