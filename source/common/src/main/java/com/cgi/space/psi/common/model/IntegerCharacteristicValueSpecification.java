package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.CharacteristicValueSpecification;
import com.cgi.space.psi.common.model.IntegerArrayCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.IntegerCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.MapArrayCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.MapCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.NumberArrayCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.NumberCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.ObjectArrayCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.ObjectCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.StringArrayCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.StringCharacteristicValueSpecification;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * IntegerCharacteristicValueSpecification
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CharacteristicValueSpecification.class, name = "CharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = IntegerArrayCharacteristicValueSpecification.class, name = "IntegerArrayCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = IntegerCharacteristicValueSpecification.class, name = "IntegerCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = MapArrayCharacteristicValueSpecification.class, name = "MapArrayCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = MapCharacteristicValueSpecification.class, name = "MapCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = NumberArrayCharacteristicValueSpecification.class, name = "NumberArrayCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = NumberCharacteristicValueSpecification.class, name = "NumberCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = ObjectArrayCharacteristicValueSpecification.class, name = "ObjectArrayCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = ObjectCharacteristicValueSpecification.class, name = "ObjectCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = StringArrayCharacteristicValueSpecification.class, name = "StringArrayCharacteristicValueSpecification"),
  @JsonSubTypes.Type(value = StringCharacteristicValueSpecification.class, name = "StringCharacteristicValueSpecification")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class IntegerCharacteristicValueSpecification extends CharacteristicValueSpecification {

  @JsonProperty("value")
  private Integer value;

  public IntegerCharacteristicValueSpecification value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Value of the characteristic
   * @return value
  */
  
  @Schema(name = "value", description = "Value of the characteristic", required = false)
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }

  public IntegerCharacteristicValueSpecification atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public IntegerCharacteristicValueSpecification atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public IntegerCharacteristicValueSpecification atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public IntegerCharacteristicValueSpecification valueType(String valueType) {
    super.setValueType(valueType);
    return this;
  }

  public IntegerCharacteristicValueSpecification isDefault(Boolean isDefault) {
    super.setIsDefault(isDefault);
    return this;
  }

  public IntegerCharacteristicValueSpecification unitOfMeasure(String unitOfMeasure) {
    super.setUnitOfMeasure(unitOfMeasure);
    return this;
  }

  public IntegerCharacteristicValueSpecification validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  public IntegerCharacteristicValueSpecification valueFrom(Integer valueFrom) {
    super.setValueFrom(valueFrom);
    return this;
  }

  public IntegerCharacteristicValueSpecification valueTo(Integer valueTo) {
    super.setValueTo(valueTo);
    return this;
  }

  public IntegerCharacteristicValueSpecification rangeInterval(String rangeInterval) {
    super.setRangeInterval(rangeInterval);
    return this;
  }

  public IntegerCharacteristicValueSpecification regex(String regex) {
    super.setRegex(regex);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegerCharacteristicValueSpecification integerCharacteristicValueSpecification = (IntegerCharacteristicValueSpecification) o;
    return Objects.equals(this.value, integerCharacteristicValueSpecification.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegerCharacteristicValueSpecification {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

