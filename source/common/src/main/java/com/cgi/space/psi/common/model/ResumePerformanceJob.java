package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.PerformanceJobProcessStateType;
import com.cgi.space.psi.common.model.PerformanceJobRef;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.net.URI;
import java.time.OffsetDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ResumePerformanceJob
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ResumePerformanceJob {

  @JsonProperty("performanceJob")
  private PerformanceJobRef performanceJob;

  @JsonProperty("resumptionReason")
  private String resumptionReason;

  @JsonProperty("creationDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime creationDate;

  @JsonProperty("href")
  private URI href;

  @JsonProperty("id")
  private String id;

  @JsonProperty("resumptionDeniedReason")
  private String resumptionDeniedReason;

  @JsonProperty("state")
  private PerformanceJobProcessStateType state;

  public ResumePerformanceJob performanceJob(PerformanceJobRef performanceJob) {
    this.performanceJob = performanceJob;
    return this;
  }

  /**
   * Get performanceJob
   * @return performanceJob
  */
  @NotNull @Valid 
  @Schema(name = "performanceJob", required = true)
  public PerformanceJobRef getPerformanceJob() {
    return performanceJob;
  }

  public void setPerformanceJob(PerformanceJobRef performanceJob) {
    this.performanceJob = performanceJob;
  }

  public ResumePerformanceJob resumptionReason(String resumptionReason) {
    this.resumptionReason = resumptionReason;
    return this;
  }

  /**
   * An optional attribute that allows the Buyer/Client to provide additional detail to the Seller/Server on the reason for resuming Performance Job.
   * @return resumptionReason
  */
  
  @Schema(name = "resumptionReason", description = "An optional attribute that allows the Buyer/Client to provide additional detail to the Seller/Server on the reason for resuming Performance Job.", required = false)
  public String getResumptionReason() {
    return resumptionReason;
  }

  public void setResumptionReason(String resumptionReason) {
    this.resumptionReason = resumptionReason;
  }

  public ResumePerformanceJob creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date when the Suspend Performance Job was created.
   * @return creationDate
  */
  @NotNull @Valid 
  @Schema(name = "creationDate", description = "Date when the Suspend Performance Job was created.", required = true)
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public ResumePerformanceJob href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * Hyperlink to the Resume Performance Job entity
   * @return href
  */
  @Valid 
  @Schema(name = "href", description = "Hyperlink to the Resume Performance Job entity", required = false)
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }

  public ResumePerformanceJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the Resume Performance Job that is generated by the Seller/Server when the Resume Performance Job request `state` is set to `acknowledged`.
   * @return id
  */
  @NotNull 
  @Schema(name = "id", description = "Unique identifier for the Resume Performance Job that is generated by the Seller/Server when the Resume Performance Job request `state` is set to `acknowledged`.", required = true)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ResumePerformanceJob resumptionDeniedReason(String resumptionDeniedReason) {
    this.resumptionDeniedReason = resumptionDeniedReason;
    return this;
  }

  /**
   * If the Resume Performance Job request is denied by the Seller/Server, the Seller/Server provides a reason to the Buyer/Client using this attribute.
   * @return resumptionDeniedReason
  */
  
  @Schema(name = "resumptionDeniedReason", description = "If the Resume Performance Job request is denied by the Seller/Server, the Seller/Server provides a reason to the Buyer/Client using this attribute.", required = false)
  public String getResumptionDeniedReason() {
    return resumptionDeniedReason;
  }

  public void setResumptionDeniedReason(String resumptionDeniedReason) {
    this.resumptionDeniedReason = resumptionDeniedReason;
  }

  public ResumePerformanceJob state(PerformanceJobProcessStateType state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
  */
  @NotNull @Valid 
  @Schema(name = "state", required = true)
  public PerformanceJobProcessStateType getState() {
    return state;
  }

  public void setState(PerformanceJobProcessStateType state) {
    this.state = state;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResumePerformanceJob resumePerformanceJob = (ResumePerformanceJob) o;
    return Objects.equals(this.performanceJob, resumePerformanceJob.performanceJob) &&
        Objects.equals(this.resumptionReason, resumePerformanceJob.resumptionReason) &&
        Objects.equals(this.creationDate, resumePerformanceJob.creationDate) &&
        Objects.equals(this.href, resumePerformanceJob.href) &&
        Objects.equals(this.id, resumePerformanceJob.id) &&
        Objects.equals(this.resumptionDeniedReason, resumePerformanceJob.resumptionDeniedReason) &&
        Objects.equals(this.state, resumePerformanceJob.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(performanceJob, resumptionReason, creationDate, href, id, resumptionDeniedReason, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResumePerformanceJob {\n");
    sb.append("    performanceJob: ").append(toIndentedString(performanceJob)).append("\n");
    sb.append("    resumptionReason: ").append(toIndentedString(resumptionReason)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    resumptionDeniedReason: ").append(toIndentedString(resumptionDeniedReason)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

