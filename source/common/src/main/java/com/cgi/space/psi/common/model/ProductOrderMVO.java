package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AgreementRefMVO;
import com.cgi.space.psi.common.model.BillingAccountRefMVO;
import com.cgi.space.psi.common.model.ExternalIdentifierMVO;
import com.cgi.space.psi.common.model.NoteMVO;
import com.cgi.space.psi.common.model.OrderPriceMVO;
import com.cgi.space.psi.common.model.OrderRelationshipMVO;
import com.cgi.space.psi.common.model.PaymentRefMVO;
import com.cgi.space.psi.common.model.ProductOfferingQualificationRefMVO;
import com.cgi.space.psi.common.model.ProductOrderErrorMessageMVO;
import com.cgi.space.psi.common.model.ProductOrderItemMVO;
import com.cgi.space.psi.common.model.ProductOrderJeopardyAlertMVO;
import com.cgi.space.psi.common.model.ProductOrderMVO;
import com.cgi.space.psi.common.model.ProductOrderMilestoneMVO;
import com.cgi.space.psi.common.model.ProductOrderStateType;
import com.cgi.space.psi.common.model.QuoteRefMVO;
import com.cgi.space.psi.common.model.RelatedChannelMVO;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRefMVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ProductOrderMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProductOrderMVO.class, name = "ProductOrder")
})

@JsonTypeName("ProductOrder_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ProductOrderMVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("agreement")
  @Valid
  private List<AgreementRefMVO> agreement = null;

  @JsonProperty("billingAccount")
  private BillingAccountRefMVO billingAccount;

  @JsonProperty("state")
  private ProductOrderStateType state;

  @JsonProperty("cancellationDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime cancellationDate;

  @JsonProperty("cancellationReason")
  private String cancellationReason;

  @JsonProperty("category")
  private String category;

  @JsonProperty("channel")
  @Valid
  private List<RelatedChannelMVO> channel = null;

  @JsonProperty("description")
  private String description;

  @JsonProperty("expectedCompletionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime expectedCompletionDate;

  @JsonProperty("externalId")
  @Valid
  private List<ExternalIdentifierMVO> externalId = null;

  @JsonProperty("note")
  @Valid
  private List<NoteMVO> note = null;

  @JsonProperty("notificationContact")
  private String notificationContact;

  @JsonProperty("orderTotalPrice")
  @Valid
  private List<OrderPriceMVO> orderTotalPrice = null;

  @JsonProperty("payment")
  @Valid
  private List<PaymentRefMVO> payment = null;

  @JsonProperty("orderRelationship")
  @Valid
  private List<OrderRelationshipMVO> orderRelationship = null;

  @JsonProperty("priority")
  private String priority;

  @JsonProperty("productOfferingQualification")
  @Valid
  private List<ProductOfferingQualificationRefMVO> productOfferingQualification = null;

  @JsonProperty("quote")
  @Valid
  private List<QuoteRefMVO> quote = null;

  @JsonProperty("productOrderErrorMessage")
  @Valid
  private List<ProductOrderErrorMessageMVO> productOrderErrorMessage = null;

  @JsonProperty("productOrderJeopardyAlert")
  @Valid
  private List<ProductOrderJeopardyAlertMVO> productOrderJeopardyAlert = null;

  @JsonProperty("productOrderMilestone")
  @Valid
  private List<ProductOrderMilestoneMVO> productOrderMilestone = null;

  @JsonProperty("productOrderItem")
  @Valid
  private List<ProductOrderItemMVO> productOrderItem = null;

  @JsonProperty("relatedParty")
  @Valid
  private List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty = null;

  @JsonProperty("requestedCompletionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime requestedCompletionDate;

  @JsonProperty("requestedStartDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime requestedStartDate;

  @JsonProperty("completionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime completionDate;

  public ProductOrderMVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public ProductOrderMVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public ProductOrderMVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public ProductOrderMVO agreement(List<AgreementRefMVO> agreement) {
    this.agreement = agreement;
    return this;
  }

  public ProductOrderMVO addAgreementItem(AgreementRefMVO agreementItem) {
    if (this.agreement == null) {
      this.agreement = new ArrayList<>();
    }
    this.agreement.add(agreementItem);
    return this;
  }

  /**
   * A reference to an agreement defined in the context of the product order
   * @return agreement
  */
  @Valid 
  @Schema(name = "agreement", description = "A reference to an agreement defined in the context of the product order", required = false)
  public List<AgreementRefMVO> getAgreement() {
    return agreement;
  }

  public void setAgreement(List<AgreementRefMVO> agreement) {
    this.agreement = agreement;
  }

  public ProductOrderMVO billingAccount(BillingAccountRefMVO billingAccount) {
    this.billingAccount = billingAccount;
    return this;
  }

  /**
   * Get billingAccount
   * @return billingAccount
  */
  @Valid 
  @Schema(name = "billingAccount", required = false)
  public BillingAccountRefMVO getBillingAccount() {
    return billingAccount;
  }

  public void setBillingAccount(BillingAccountRefMVO billingAccount) {
    this.billingAccount = billingAccount;
  }

  public ProductOrderMVO state(ProductOrderStateType state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
  */
  @Valid 
  @Schema(name = "state", required = false)
  public ProductOrderStateType getState() {
    return state;
  }

  public void setState(ProductOrderStateType state) {
    this.state = state;
  }

  public ProductOrderMVO cancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
    return this;
  }

  /**
   * Date when the order is cancelled. This is used when order is cancelled. 
   * @return cancellationDate
  */
  @Valid 
  @Schema(name = "cancellationDate", description = "Date when the order is cancelled. This is used when order is cancelled. ", required = false)
  public OffsetDateTime getCancellationDate() {
    return cancellationDate;
  }

  public void setCancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
  }

  public ProductOrderMVO cancellationReason(String cancellationReason) {
    this.cancellationReason = cancellationReason;
    return this;
  }

  /**
   * Reason why the order is cancelled. This is used when order is cancelled. 
   * @return cancellationReason
  */
  
  @Schema(name = "cancellationReason", description = "Reason why the order is cancelled. This is used when order is cancelled. ", required = false)
  public String getCancellationReason() {
    return cancellationReason;
  }

  public void setCancellationReason(String cancellationReason) {
    this.cancellationReason = cancellationReason;
  }

  public ProductOrderMVO category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Used to categorize the order from a business perspective that can be useful for the OM system (e.g. \"enterprise\", \"residential\", ...)
   * @return category
  */
  
  @Schema(name = "category", description = "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. \"enterprise\", \"residential\", ...)", required = false)
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public ProductOrderMVO channel(List<RelatedChannelMVO> channel) {
    this.channel = channel;
    return this;
  }

  public ProductOrderMVO addChannelItem(RelatedChannelMVO channelItem) {
    if (this.channel == null) {
      this.channel = new ArrayList<>();
    }
    this.channel.add(channelItem);
    return this;
  }

  /**
   * Get channel
   * @return channel
  */
  @Valid 
  @Schema(name = "channel", required = false)
  public List<RelatedChannelMVO> getChannel() {
    return channel;
  }

  public void setChannel(List<RelatedChannelMVO> channel) {
    this.channel = channel;
  }

  public ProductOrderMVO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the product order
   * @return description
  */
  
  @Schema(name = "description", description = "Description of the product order", required = false)
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProductOrderMVO expectedCompletionDate(OffsetDateTime expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
    return this;
  }

  /**
   * Expected delivery date amended by the provider
   * @return expectedCompletionDate
  */
  @Valid 
  @Schema(name = "expectedCompletionDate", description = "Expected delivery date amended by the provider", required = false)
  public OffsetDateTime getExpectedCompletionDate() {
    return expectedCompletionDate;
  }

  public void setExpectedCompletionDate(OffsetDateTime expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
  }

  public ProductOrderMVO externalId(List<ExternalIdentifierMVO> externalId) {
    this.externalId = externalId;
    return this;
  }

  public ProductOrderMVO addExternalIdItem(ExternalIdentifierMVO externalIdItem) {
    if (this.externalId == null) {
      this.externalId = new ArrayList<>();
    }
    this.externalId.add(externalIdItem);
    return this;
  }

  /**
   * Get externalId
   * @return externalId
  */
  @Valid 
  @Schema(name = "externalId", required = false)
  public List<ExternalIdentifierMVO> getExternalId() {
    return externalId;
  }

  public void setExternalId(List<ExternalIdentifierMVO> externalId) {
    this.externalId = externalId;
  }

  public ProductOrderMVO note(List<NoteMVO> note) {
    this.note = note;
    return this;
  }

  public ProductOrderMVO addNoteItem(NoteMVO noteItem) {
    if (this.note == null) {
      this.note = new ArrayList<>();
    }
    this.note.add(noteItem);
    return this;
  }

  /**
   * Get note
   * @return note
  */
  @Valid 
  @Schema(name = "note", required = false)
  public List<NoteMVO> getNote() {
    return note;
  }

  public void setNote(List<NoteMVO> note) {
    this.note = note;
  }

  public ProductOrderMVO notificationContact(String notificationContact) {
    this.notificationContact = notificationContact;
    return this;
  }

  /**
   * Contact attached to the order to send back information regarding this order
   * @return notificationContact
  */
  
  @Schema(name = "notificationContact", description = "Contact attached to the order to send back information regarding this order", required = false)
  public String getNotificationContact() {
    return notificationContact;
  }

  public void setNotificationContact(String notificationContact) {
    this.notificationContact = notificationContact;
  }

  public ProductOrderMVO orderTotalPrice(List<OrderPriceMVO> orderTotalPrice) {
    this.orderTotalPrice = orderTotalPrice;
    return this;
  }

  public ProductOrderMVO addOrderTotalPriceItem(OrderPriceMVO orderTotalPriceItem) {
    if (this.orderTotalPrice == null) {
      this.orderTotalPrice = new ArrayList<>();
    }
    this.orderTotalPrice.add(orderTotalPriceItem);
    return this;
  }

  /**
   * Get orderTotalPrice
   * @return orderTotalPrice
  */
  @Valid 
  @Schema(name = "orderTotalPrice", required = false)
  public List<OrderPriceMVO> getOrderTotalPrice() {
    return orderTotalPrice;
  }

  public void setOrderTotalPrice(List<OrderPriceMVO> orderTotalPrice) {
    this.orderTotalPrice = orderTotalPrice;
  }

  public ProductOrderMVO payment(List<PaymentRefMVO> payment) {
    this.payment = payment;
    return this;
  }

  public ProductOrderMVO addPaymentItem(PaymentRefMVO paymentItem) {
    if (this.payment == null) {
      this.payment = new ArrayList<>();
    }
    this.payment.add(paymentItem);
    return this;
  }

  /**
   * Get payment
   * @return payment
  */
  @Valid 
  @Schema(name = "payment", required = false)
  public List<PaymentRefMVO> getPayment() {
    return payment;
  }

  public void setPayment(List<PaymentRefMVO> payment) {
    this.payment = payment;
  }

  public ProductOrderMVO orderRelationship(List<OrderRelationshipMVO> orderRelationship) {
    this.orderRelationship = orderRelationship;
    return this;
  }

  public ProductOrderMVO addOrderRelationshipItem(OrderRelationshipMVO orderRelationshipItem) {
    if (this.orderRelationship == null) {
      this.orderRelationship = new ArrayList<>();
    }
    this.orderRelationship.add(orderRelationshipItem);
    return this;
  }

  /**
   * Get orderRelationship
   * @return orderRelationship
  */
  @Valid 
  @Schema(name = "orderRelationship", required = false)
  public List<OrderRelationshipMVO> getOrderRelationship() {
    return orderRelationship;
  }

  public void setOrderRelationship(List<OrderRelationshipMVO> orderRelationship) {
    this.orderRelationship = orderRelationship;
  }

  public ProductOrderMVO priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)
   * @return priority
  */
  
  @Schema(name = "priority", description = "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)", required = false)
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }

  public ProductOrderMVO productOfferingQualification(List<ProductOfferingQualificationRefMVO> productOfferingQualification) {
    this.productOfferingQualification = productOfferingQualification;
    return this;
  }

  public ProductOrderMVO addProductOfferingQualificationItem(ProductOfferingQualificationRefMVO productOfferingQualificationItem) {
    if (this.productOfferingQualification == null) {
      this.productOfferingQualification = new ArrayList<>();
    }
    this.productOfferingQualification.add(productOfferingQualificationItem);
    return this;
  }

  /**
   * Get productOfferingQualification
   * @return productOfferingQualification
  */
  @Valid 
  @Schema(name = "productOfferingQualification", required = false)
  public List<ProductOfferingQualificationRefMVO> getProductOfferingQualification() {
    return productOfferingQualification;
  }

  public void setProductOfferingQualification(List<ProductOfferingQualificationRefMVO> productOfferingQualification) {
    this.productOfferingQualification = productOfferingQualification;
  }

  public ProductOrderMVO quote(List<QuoteRefMVO> quote) {
    this.quote = quote;
    return this;
  }

  public ProductOrderMVO addQuoteItem(QuoteRefMVO quoteItem) {
    if (this.quote == null) {
      this.quote = new ArrayList<>();
    }
    this.quote.add(quoteItem);
    return this;
  }

  /**
   * Get quote
   * @return quote
  */
  @Valid 
  @Schema(name = "quote", required = false)
  public List<QuoteRefMVO> getQuote() {
    return quote;
  }

  public void setQuote(List<QuoteRefMVO> quote) {
    this.quote = quote;
  }

  public ProductOrderMVO productOrderErrorMessage(List<ProductOrderErrorMessageMVO> productOrderErrorMessage) {
    this.productOrderErrorMessage = productOrderErrorMessage;
    return this;
  }

  public ProductOrderMVO addProductOrderErrorMessageItem(ProductOrderErrorMessageMVO productOrderErrorMessageItem) {
    if (this.productOrderErrorMessage == null) {
      this.productOrderErrorMessage = new ArrayList<>();
    }
    this.productOrderErrorMessage.add(productOrderErrorMessageItem);
    return this;
  }

  /**
   * Get productOrderErrorMessage
   * @return productOrderErrorMessage
  */
  @Valid 
  @Schema(name = "productOrderErrorMessage", required = false)
  public List<ProductOrderErrorMessageMVO> getProductOrderErrorMessage() {
    return productOrderErrorMessage;
  }

  public void setProductOrderErrorMessage(List<ProductOrderErrorMessageMVO> productOrderErrorMessage) {
    this.productOrderErrorMessage = productOrderErrorMessage;
  }

  public ProductOrderMVO productOrderJeopardyAlert(List<ProductOrderJeopardyAlertMVO> productOrderJeopardyAlert) {
    this.productOrderJeopardyAlert = productOrderJeopardyAlert;
    return this;
  }

  public ProductOrderMVO addProductOrderJeopardyAlertItem(ProductOrderJeopardyAlertMVO productOrderJeopardyAlertItem) {
    if (this.productOrderJeopardyAlert == null) {
      this.productOrderJeopardyAlert = new ArrayList<>();
    }
    this.productOrderJeopardyAlert.add(productOrderJeopardyAlertItem);
    return this;
  }

  /**
   * Get productOrderJeopardyAlert
   * @return productOrderJeopardyAlert
  */
  @Valid 
  @Schema(name = "productOrderJeopardyAlert", required = false)
  public List<ProductOrderJeopardyAlertMVO> getProductOrderJeopardyAlert() {
    return productOrderJeopardyAlert;
  }

  public void setProductOrderJeopardyAlert(List<ProductOrderJeopardyAlertMVO> productOrderJeopardyAlert) {
    this.productOrderJeopardyAlert = productOrderJeopardyAlert;
  }

  public ProductOrderMVO productOrderMilestone(List<ProductOrderMilestoneMVO> productOrderMilestone) {
    this.productOrderMilestone = productOrderMilestone;
    return this;
  }

  public ProductOrderMVO addProductOrderMilestoneItem(ProductOrderMilestoneMVO productOrderMilestoneItem) {
    if (this.productOrderMilestone == null) {
      this.productOrderMilestone = new ArrayList<>();
    }
    this.productOrderMilestone.add(productOrderMilestoneItem);
    return this;
  }

  /**
   * Get productOrderMilestone
   * @return productOrderMilestone
  */
  @Valid 
  @Schema(name = "productOrderMilestone", required = false)
  public List<ProductOrderMilestoneMVO> getProductOrderMilestone() {
    return productOrderMilestone;
  }

  public void setProductOrderMilestone(List<ProductOrderMilestoneMVO> productOrderMilestone) {
    this.productOrderMilestone = productOrderMilestone;
  }

  public ProductOrderMVO productOrderItem(List<ProductOrderItemMVO> productOrderItem) {
    this.productOrderItem = productOrderItem;
    return this;
  }

  public ProductOrderMVO addProductOrderItemItem(ProductOrderItemMVO productOrderItemItem) {
    if (this.productOrderItem == null) {
      this.productOrderItem = new ArrayList<>();
    }
    this.productOrderItem.add(productOrderItemItem);
    return this;
  }

  /**
   * Get productOrderItem
   * @return productOrderItem
  */
  @Valid @Size(min = 1) 
  @Schema(name = "productOrderItem", required = false)
  public List<ProductOrderItemMVO> getProductOrderItem() {
    return productOrderItem;
  }

  public void setProductOrderItem(List<ProductOrderItemMVO> productOrderItem) {
    this.productOrderItem = productOrderItem;
  }

  public ProductOrderMVO relatedParty(List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public ProductOrderMVO addRelatedPartyItem(RelatedPartyRefOrPartyRoleRefMVO relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

  /**
   * Get relatedParty
   * @return relatedParty
  */
  @Valid 
  @Schema(name = "relatedParty", required = false)
  public List<RelatedPartyRefOrPartyRoleRefMVO> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public ProductOrderMVO requestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
    return this;
  }

  /**
   * Requested delivery date from the requestor perspective
   * @return requestedCompletionDate
  */
  @Valid 
  @Schema(name = "requestedCompletionDate", description = "Requested delivery date from the requestor perspective", required = false)
  public OffsetDateTime getRequestedCompletionDate() {
    return requestedCompletionDate;
  }

  public void setRequestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
  }

  public ProductOrderMVO requestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
    return this;
  }

  /**
   * Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date. 
   * @return requestedStartDate
  */
  @Valid 
  @Schema(name = "requestedStartDate", description = "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date. ", required = false)
  public OffsetDateTime getRequestedStartDate() {
    return requestedStartDate;
  }

  public void setRequestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
  }

  public ProductOrderMVO completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Date when the ProductOrder was completed
   * @return completionDate
  */
  @Valid 
  @Schema(name = "completionDate", description = "Date when the ProductOrder was completed", required = false)
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductOrderMVO productOrderMVO = (ProductOrderMVO) o;
    return Objects.equals(this.atType, productOrderMVO.atType) &&
        Objects.equals(this.atBaseType, productOrderMVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, productOrderMVO.atSchemaLocation) &&
        Objects.equals(this.agreement, productOrderMVO.agreement) &&
        Objects.equals(this.billingAccount, productOrderMVO.billingAccount) &&
        Objects.equals(this.state, productOrderMVO.state) &&
        Objects.equals(this.cancellationDate, productOrderMVO.cancellationDate) &&
        Objects.equals(this.cancellationReason, productOrderMVO.cancellationReason) &&
        Objects.equals(this.category, productOrderMVO.category) &&
        Objects.equals(this.channel, productOrderMVO.channel) &&
        Objects.equals(this.description, productOrderMVO.description) &&
        Objects.equals(this.expectedCompletionDate, productOrderMVO.expectedCompletionDate) &&
        Objects.equals(this.externalId, productOrderMVO.externalId) &&
        Objects.equals(this.note, productOrderMVO.note) &&
        Objects.equals(this.notificationContact, productOrderMVO.notificationContact) &&
        Objects.equals(this.orderTotalPrice, productOrderMVO.orderTotalPrice) &&
        Objects.equals(this.payment, productOrderMVO.payment) &&
        Objects.equals(this.orderRelationship, productOrderMVO.orderRelationship) &&
        Objects.equals(this.priority, productOrderMVO.priority) &&
        Objects.equals(this.productOfferingQualification, productOrderMVO.productOfferingQualification) &&
        Objects.equals(this.quote, productOrderMVO.quote) &&
        Objects.equals(this.productOrderErrorMessage, productOrderMVO.productOrderErrorMessage) &&
        Objects.equals(this.productOrderJeopardyAlert, productOrderMVO.productOrderJeopardyAlert) &&
        Objects.equals(this.productOrderMilestone, productOrderMVO.productOrderMilestone) &&
        Objects.equals(this.productOrderItem, productOrderMVO.productOrderItem) &&
        Objects.equals(this.relatedParty, productOrderMVO.relatedParty) &&
        Objects.equals(this.requestedCompletionDate, productOrderMVO.requestedCompletionDate) &&
        Objects.equals(this.requestedStartDate, productOrderMVO.requestedStartDate) &&
        Objects.equals(this.completionDate, productOrderMVO.completionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, agreement, billingAccount, state, cancellationDate, cancellationReason, category, channel, description, expectedCompletionDate, externalId, note, notificationContact, orderTotalPrice, payment, orderRelationship, priority, productOfferingQualification, quote, productOrderErrorMessage, productOrderJeopardyAlert, productOrderMilestone, productOrderItem, relatedParty, requestedCompletionDate, requestedStartDate, completionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductOrderMVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    agreement: ").append(toIndentedString(agreement)).append("\n");
    sb.append("    billingAccount: ").append(toIndentedString(billingAccount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    cancellationReason: ").append(toIndentedString(cancellationReason)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expectedCompletionDate: ").append(toIndentedString(expectedCompletionDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    notificationContact: ").append(toIndentedString(notificationContact)).append("\n");
    sb.append("    orderTotalPrice: ").append(toIndentedString(orderTotalPrice)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    orderRelationship: ").append(toIndentedString(orderRelationship)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    productOfferingQualification: ").append(toIndentedString(productOfferingQualification)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    productOrderErrorMessage: ").append(toIndentedString(productOrderErrorMessage)).append("\n");
    sb.append("    productOrderJeopardyAlert: ").append(toIndentedString(productOrderJeopardyAlert)).append("\n");
    sb.append("    productOrderMilestone: ").append(toIndentedString(productOrderMilestone)).append("\n");
    sb.append("    productOrderItem: ").append(toIndentedString(productOrderItem)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    requestedCompletionDate: ").append(toIndentedString(requestedCompletionDate)).append("\n");
    sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

