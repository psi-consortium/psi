package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.GeographicSubAddress;
import com.cgi.space.psi.common.model.GeographicSubAddressUnit;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * GeographicSubAddress
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = GeographicSubAddress.class, name = "GeographicSubAddress")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class GeographicSubAddress {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("href")
  private URI href;

  @JsonProperty("id")
  private String id;

  @JsonProperty("buildingName")
  private String buildingName;

  @JsonProperty("levelNumber")
  private String levelNumber;

  @JsonProperty("levelType")
  private String levelType;

  @JsonProperty("name")
  private String name;

  @JsonProperty("privateStreetName")
  private String privateStreetName;

  @JsonProperty("privateStreetNumber")
  private String privateStreetNumber;

  @JsonProperty("subUnit")
  @Valid
  private List<GeographicSubAddressUnit> subUnit = null;

  @JsonProperty("subAddressType")
  private String subAddressType;

  public GeographicSubAddress atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public GeographicSubAddress atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public GeographicSubAddress atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public GeographicSubAddress href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * Link to the subAddress
   * @return href
  */
  @Valid 
  @Schema(name = "href", description = "Link to the subAddress", required = false)
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }

  public GeographicSubAddress id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique Identifier of the subAddress
   * @return id
  */
  
  @Schema(name = "id", description = "Unique Identifier of the subAddress", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public GeographicSubAddress buildingName(String buildingName) {
    this.buildingName = buildingName;
    return this;
  }

  /**
   * allows for buildings that have well-known names
   * @return buildingName
  */
  
  @Schema(name = "buildingName", description = "allows for buildings that have well-known names", required = false)
  public String getBuildingName() {
    return buildingName;
  }

  public void setBuildingName(String buildingName) {
    this.buildingName = buildingName;
  }

  public GeographicSubAddress levelNumber(String levelNumber) {
    this.levelNumber = levelNumber;
    return this;
  }

  /**
   * used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2
   * @return levelNumber
  */
  
  @Schema(name = "levelNumber", description = "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2", required = false)
  public String getLevelNumber() {
    return levelNumber;
  }

  public void setLevelNumber(String levelNumber) {
    this.levelNumber = levelNumber;
  }

  public GeographicSubAddress levelType(String levelType) {
    this.levelType = levelType;
    return this;
  }

  /**
   * describes level types within a building
   * @return levelType
  */
  
  @Schema(name = "levelType", description = "describes level types within a building", required = false)
  public String getLevelType() {
    return levelType;
  }

  public void setLevelType(String levelType) {
    this.levelType = levelType;
  }

  public GeographicSubAddress name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the subAddress to identify it with a meaningful identification
   * @return name
  */
  
  @Schema(name = "name", description = "Name of the subAddress to identify it with a meaningful identification", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GeographicSubAddress privateStreetName(String privateStreetName) {
    this.privateStreetName = privateStreetName;
    return this;
  }

  /**
   * private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office.
   * @return privateStreetName
  */
  
  @Schema(name = "privateStreetName", description = "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office.", required = false)
  public String getPrivateStreetName() {
    return privateStreetName;
  }

  public void setPrivateStreetName(String privateStreetName) {
    this.privateStreetName = privateStreetName;
  }

  public GeographicSubAddress privateStreetNumber(String privateStreetNumber) {
    this.privateStreetNumber = privateStreetNumber;
    return this;
  }

  /**
   * private streets numbers internal to a private street
   * @return privateStreetNumber
  */
  
  @Schema(name = "privateStreetNumber", description = "private streets numbers internal to a private street", required = false)
  public String getPrivateStreetNumber() {
    return privateStreetNumber;
  }

  public void setPrivateStreetNumber(String privateStreetNumber) {
    this.privateStreetNumber = privateStreetNumber;
  }

  public GeographicSubAddress subUnit(List<GeographicSubAddressUnit> subUnit) {
    this.subUnit = subUnit;
    return this;
  }

  public GeographicSubAddress addSubUnitItem(GeographicSubAddressUnit subUnitItem) {
    if (this.subUnit == null) {
      this.subUnit = new ArrayList<>();
    }
    this.subUnit.add(subUnitItem);
    return this;
  }

  /**
   * Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.
   * @return subUnit
  */
  @Valid 
  @Schema(name = "subUnit", description = "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.", required = false)
  public List<GeographicSubAddressUnit> getSubUnit() {
    return subUnit;
  }

  public void setSubUnit(List<GeographicSubAddressUnit> subUnit) {
    this.subUnit = subUnit;
  }

  public GeographicSubAddress subAddressType(String subAddressType) {
    this.subAddressType = subAddressType;
    return this;
  }

  /**
   * Type of subAddress : it can be a subunit or a private street
   * @return subAddressType
  */
  
  @Schema(name = "subAddressType", description = "Type of subAddress : it can be a subunit or a private street", required = false)
  public String getSubAddressType() {
    return subAddressType;
  }

  public void setSubAddressType(String subAddressType) {
    this.subAddressType = subAddressType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeographicSubAddress geographicSubAddress = (GeographicSubAddress) o;
    return Objects.equals(this.atType, geographicSubAddress.atType) &&
        Objects.equals(this.atBaseType, geographicSubAddress.atBaseType) &&
        Objects.equals(this.atSchemaLocation, geographicSubAddress.atSchemaLocation) &&
        Objects.equals(this.href, geographicSubAddress.href) &&
        Objects.equals(this.id, geographicSubAddress.id) &&
        Objects.equals(this.buildingName, geographicSubAddress.buildingName) &&
        Objects.equals(this.levelNumber, geographicSubAddress.levelNumber) &&
        Objects.equals(this.levelType, geographicSubAddress.levelType) &&
        Objects.equals(this.name, geographicSubAddress.name) &&
        Objects.equals(this.privateStreetName, geographicSubAddress.privateStreetName) &&
        Objects.equals(this.privateStreetNumber, geographicSubAddress.privateStreetNumber) &&
        Objects.equals(this.subUnit, geographicSubAddress.subUnit) &&
        Objects.equals(this.subAddressType, geographicSubAddress.subAddressType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, href, id, buildingName, levelNumber, levelType, name, privateStreetName, privateStreetNumber, subUnit, subAddressType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeographicSubAddress {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    buildingName: ").append(toIndentedString(buildingName)).append("\n");
    sb.append("    levelNumber: ").append(toIndentedString(levelNumber)).append("\n");
    sb.append("    levelType: ").append(toIndentedString(levelType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privateStreetName: ").append(toIndentedString(privateStreetName)).append("\n");
    sb.append("    privateStreetNumber: ").append(toIndentedString(privateStreetNumber)).append("\n");
    sb.append("    subUnit: ").append(toIndentedString(subUnit)).append("\n");
    sb.append("    subAddressType: ").append(toIndentedString(subAddressType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

