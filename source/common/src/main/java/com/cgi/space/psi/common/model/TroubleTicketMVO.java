package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.ChannelRefMVO;
import com.cgi.space.psi.common.model.CharacteristicMVO;
import com.cgi.space.psi.common.model.ExternalIdentifierMVO;
import com.cgi.space.psi.common.model.NoteMVO;
import com.cgi.space.psi.common.model.RelatedEntityMVO;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRefMVO;
import com.cgi.space.psi.common.model.StatusChangeMVO;
import com.cgi.space.psi.common.model.TroubleTicketMVO;
import com.cgi.space.psi.common.model.TroubleTicketRelationshipMVO;
import com.cgi.space.psi.common.model.TroubleTicketSpecificationRefMVO;
import com.cgi.space.psi.common.model.TroubleTicketStatusType;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * TroubleTicketMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = TroubleTicketMVO.class, name = "TroubleTicket")
})

@JsonTypeName("TroubleTicket_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class TroubleTicketMVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("name")
  private String name;

  @JsonProperty("description")
  private String description;

  @JsonProperty("severity")
  private String severity;

  @JsonProperty("ticketType")
  private String ticketType;

  @JsonProperty("attachment")
  @Valid
  private List<AttachmentOrDocumentRef> attachment = null;

  @JsonProperty("channel")
  private ChannelRefMVO channel;

  @JsonProperty("requestedResolutionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime requestedResolutionDate;

  @JsonProperty("expectedResolutionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime expectedResolutionDate;

  @JsonProperty("resolutionDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime resolutionDate;

  @JsonProperty("externalIdentifier")
  @Valid
  private List<ExternalIdentifierMVO> externalIdentifier = null;

  @JsonProperty("note")
  @Valid
  private List<NoteMVO> note = null;

  @JsonProperty("priority")
  private String priority;

  @JsonProperty("relatedEntity")
  @Valid
  private List<RelatedEntityMVO> relatedEntity = null;

  @JsonProperty("relatedParty")
  @Valid
  private List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty = null;

  @JsonProperty("status")
  private TroubleTicketStatusType status;

  @JsonProperty("statusChangeReason")
  private String statusChangeReason;

  @JsonProperty("statusChangeHistory")
  @Valid
  private List<StatusChangeMVO> statusChangeHistory = null;

  @JsonProperty("troubleTicketRelationship")
  @Valid
  private List<TroubleTicketRelationshipMVO> troubleTicketRelationship = null;

  @JsonProperty("troubleTicketSpecification")
  private TroubleTicketSpecificationRefMVO troubleTicketSpecification;

  @JsonProperty("troubleTicketCharacteristic")
  @Valid
  private List<CharacteristicMVO> troubleTicketCharacteristic = null;

  public TroubleTicketMVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public TroubleTicketMVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public TroubleTicketMVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public TroubleTicketMVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the trouble ticket, typically a short description provided by the user that create the ticket
   * @return name
  */
  
  @Schema(name = "name", description = "Name of the trouble ticket, typically a short description provided by the user that create the ticket", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TroubleTicketMVO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the trouble or issue
   * @return description
  */
  
  @Schema(name = "description", description = "Description of the trouble or issue", required = false)
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TroubleTicketMVO severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor
   * @return severity
  */
  
  @Schema(name = "severity", description = "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor", required = false)
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }

  public TroubleTicketMVO ticketType(String ticketType) {
    this.ticketType = ticketType;
    return this;
  }

  /**
   * represent a business type of the trouble ticket e.g. incident, complain, request
   * @return ticketType
  */
  
  @Schema(name = "ticketType", description = "represent a business type of the trouble ticket e.g. incident, complain, request", required = false)
  public String getTicketType() {
    return ticketType;
  }

  public void setTicketType(String ticketType) {
    this.ticketType = ticketType;
  }

  public TroubleTicketMVO attachment(List<AttachmentOrDocumentRef> attachment) {
    this.attachment = attachment;
    return this;
  }

  public TroubleTicketMVO addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    if (this.attachment == null) {
      this.attachment = new ArrayList<>();
    }
    this.attachment.add(attachmentItem);
    return this;
  }

  /**
   * Get attachment
   * @return attachment
  */
  @Valid 
  @Schema(name = "attachment", required = false)
  public List<AttachmentOrDocumentRef> getAttachment() {
    return attachment;
  }

  public void setAttachment(List<AttachmentOrDocumentRef> attachment) {
    this.attachment = attachment;
  }

  public TroubleTicketMVO channel(ChannelRefMVO channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
  */
  @Valid 
  @Schema(name = "channel", required = false)
  public ChannelRefMVO getChannel() {
    return channel;
  }

  public void setChannel(ChannelRefMVO channel) {
    this.channel = channel;
  }

  public TroubleTicketMVO requestedResolutionDate(OffsetDateTime requestedResolutionDate) {
    this.requestedResolutionDate = requestedResolutionDate;
    return this;
  }

  /**
   * The resolution date requested by the user
   * @return requestedResolutionDate
  */
  @Valid 
  @Schema(name = "requestedResolutionDate", description = "The resolution date requested by the user", required = false)
  public OffsetDateTime getRequestedResolutionDate() {
    return requestedResolutionDate;
  }

  public void setRequestedResolutionDate(OffsetDateTime requestedResolutionDate) {
    this.requestedResolutionDate = requestedResolutionDate;
  }

  public TroubleTicketMVO expectedResolutionDate(OffsetDateTime expectedResolutionDate) {
    this.expectedResolutionDate = expectedResolutionDate;
    return this;
  }

  /**
   * The expected resolution date determined by the trouble ticket system
   * @return expectedResolutionDate
  */
  @Valid 
  @Schema(name = "expectedResolutionDate", description = "The expected resolution date determined by the trouble ticket system", required = false)
  public OffsetDateTime getExpectedResolutionDate() {
    return expectedResolutionDate;
  }

  public void setExpectedResolutionDate(OffsetDateTime expectedResolutionDate) {
    this.expectedResolutionDate = expectedResolutionDate;
  }

  public TroubleTicketMVO resolutionDate(OffsetDateTime resolutionDate) {
    this.resolutionDate = resolutionDate;
    return this;
  }

  /**
   * The date and time the trouble ticket was resolved
   * @return resolutionDate
  */
  @Valid 
  @Schema(name = "resolutionDate", description = "The date and time the trouble ticket was resolved", required = false)
  public OffsetDateTime getResolutionDate() {
    return resolutionDate;
  }

  public void setResolutionDate(OffsetDateTime resolutionDate) {
    this.resolutionDate = resolutionDate;
  }

  public TroubleTicketMVO externalIdentifier(List<ExternalIdentifierMVO> externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
    return this;
  }

  public TroubleTicketMVO addExternalIdentifierItem(ExternalIdentifierMVO externalIdentifierItem) {
    if (this.externalIdentifier == null) {
      this.externalIdentifier = new ArrayList<>();
    }
    this.externalIdentifier.add(externalIdentifierItem);
    return this;
  }

  /**
   * Get externalIdentifier
   * @return externalIdentifier
  */
  @Valid 
  @Schema(name = "externalIdentifier", required = false)
  public List<ExternalIdentifierMVO> getExternalIdentifier() {
    return externalIdentifier;
  }

  public void setExternalIdentifier(List<ExternalIdentifierMVO> externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }

  public TroubleTicketMVO note(List<NoteMVO> note) {
    this.note = note;
    return this;
  }

  public TroubleTicketMVO addNoteItem(NoteMVO noteItem) {
    if (this.note == null) {
      this.note = new ArrayList<>();
    }
    this.note.add(noteItem);
    return this;
  }

  /**
   * The note(s) that are associated to the ticket.
   * @return note
  */
  @Valid 
  @Schema(name = "note", description = "The note(s) that are associated to the ticket.", required = false)
  public List<NoteMVO> getNote() {
    return note;
  }

  public void setNote(List<NoteMVO> note) {
    this.note = note;
  }

  public TroubleTicketMVO priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...
   * @return priority
  */
  
  @Schema(name = "priority", description = "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...", required = false)
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }

  public TroubleTicketMVO relatedEntity(List<RelatedEntityMVO> relatedEntity) {
    this.relatedEntity = relatedEntity;
    return this;
  }

  public TroubleTicketMVO addRelatedEntityItem(RelatedEntityMVO relatedEntityItem) {
    if (this.relatedEntity == null) {
      this.relatedEntity = new ArrayList<>();
    }
    this.relatedEntity.add(relatedEntityItem);
    return this;
  }

  /**
   * An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.
   * @return relatedEntity
  */
  @Valid 
  @Schema(name = "relatedEntity", description = "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.", required = false)
  public List<RelatedEntityMVO> getRelatedEntity() {
    return relatedEntity;
  }

  public void setRelatedEntity(List<RelatedEntityMVO> relatedEntity) {
    this.relatedEntity = relatedEntity;
  }

  public TroubleTicketMVO relatedParty(List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public TroubleTicketMVO addRelatedPartyItem(RelatedPartyRefOrPartyRoleRefMVO relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

  /**
   * The related party(ies) that are associated to the ticket.
   * @return relatedParty
  */
  @Valid 
  @Schema(name = "relatedParty", description = "The related party(ies) that are associated to the ticket.", required = false)
  public List<RelatedPartyRefOrPartyRoleRefMVO> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedPartyRefOrPartyRoleRefMVO> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public TroubleTicketMVO status(TroubleTicketStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
  */
  @Valid 
  @Schema(name = "status", required = false)
  public TroubleTicketStatusType getStatus() {
    return status;
  }

  public void setStatus(TroubleTicketStatusType status) {
    this.status = status;
  }

  public TroubleTicketMVO statusChangeReason(String statusChangeReason) {
    this.statusChangeReason = statusChangeReason;
    return this;
  }

  /**
   * The reason for changing the status
   * @return statusChangeReason
  */
  
  @Schema(name = "statusChangeReason", description = "The reason for changing the status", required = false)
  public String getStatusChangeReason() {
    return statusChangeReason;
  }

  public void setStatusChangeReason(String statusChangeReason) {
    this.statusChangeReason = statusChangeReason;
  }

  public TroubleTicketMVO statusChangeHistory(List<StatusChangeMVO> statusChangeHistory) {
    this.statusChangeHistory = statusChangeHistory;
    return this;
  }

  public TroubleTicketMVO addStatusChangeHistoryItem(StatusChangeMVO statusChangeHistoryItem) {
    if (this.statusChangeHistory == null) {
      this.statusChangeHistory = new ArrayList<>();
    }
    this.statusChangeHistory.add(statusChangeHistoryItem);
    return this;
  }

  /**
   * The status change history that are associated to the ticket. Populated by the server
   * @return statusChangeHistory
  */
  @Valid 
  @Schema(name = "statusChangeHistory", description = "The status change history that are associated to the ticket. Populated by the server", required = false)
  public List<StatusChangeMVO> getStatusChangeHistory() {
    return statusChangeHistory;
  }

  public void setStatusChangeHistory(List<StatusChangeMVO> statusChangeHistory) {
    this.statusChangeHistory = statusChangeHistory;
  }

  public TroubleTicketMVO troubleTicketRelationship(List<TroubleTicketRelationshipMVO> troubleTicketRelationship) {
    this.troubleTicketRelationship = troubleTicketRelationship;
    return this;
  }

  public TroubleTicketMVO addTroubleTicketRelationshipItem(TroubleTicketRelationshipMVO troubleTicketRelationshipItem) {
    if (this.troubleTicketRelationship == null) {
      this.troubleTicketRelationship = new ArrayList<>();
    }
    this.troubleTicketRelationship.add(troubleTicketRelationshipItem);
    return this;
  }

  /**
   * A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets
   * @return troubleTicketRelationship
  */
  @Valid 
  @Schema(name = "troubleTicketRelationship", description = "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets", required = false)
  public List<TroubleTicketRelationshipMVO> getTroubleTicketRelationship() {
    return troubleTicketRelationship;
  }

  public void setTroubleTicketRelationship(List<TroubleTicketRelationshipMVO> troubleTicketRelationship) {
    this.troubleTicketRelationship = troubleTicketRelationship;
  }

  public TroubleTicketMVO troubleTicketSpecification(TroubleTicketSpecificationRefMVO troubleTicketSpecification) {
    this.troubleTicketSpecification = troubleTicketSpecification;
    return this;
  }

  /**
   * Get troubleTicketSpecification
   * @return troubleTicketSpecification
  */
  @Valid 
  @Schema(name = "troubleTicketSpecification", required = false)
  public TroubleTicketSpecificationRefMVO getTroubleTicketSpecification() {
    return troubleTicketSpecification;
  }

  public void setTroubleTicketSpecification(TroubleTicketSpecificationRefMVO troubleTicketSpecification) {
    this.troubleTicketSpecification = troubleTicketSpecification;
  }

  public TroubleTicketMVO troubleTicketCharacteristic(List<CharacteristicMVO> troubleTicketCharacteristic) {
    this.troubleTicketCharacteristic = troubleTicketCharacteristic;
    return this;
  }

  public TroubleTicketMVO addTroubleTicketCharacteristicItem(CharacteristicMVO troubleTicketCharacteristicItem) {
    if (this.troubleTicketCharacteristic == null) {
      this.troubleTicketCharacteristic = new ArrayList<>();
    }
    this.troubleTicketCharacteristic.add(troubleTicketCharacteristicItem);
    return this;
  }

  /**
   * List of characteristics of the trouble ticket
   * @return troubleTicketCharacteristic
  */
  @Valid 
  @Schema(name = "troubleTicketCharacteristic", description = "List of characteristics of the trouble ticket", required = false)
  public List<CharacteristicMVO> getTroubleTicketCharacteristic() {
    return troubleTicketCharacteristic;
  }

  public void setTroubleTicketCharacteristic(List<CharacteristicMVO> troubleTicketCharacteristic) {
    this.troubleTicketCharacteristic = troubleTicketCharacteristic;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TroubleTicketMVO troubleTicketMVO = (TroubleTicketMVO) o;
    return Objects.equals(this.atType, troubleTicketMVO.atType) &&
        Objects.equals(this.atBaseType, troubleTicketMVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, troubleTicketMVO.atSchemaLocation) &&
        Objects.equals(this.name, troubleTicketMVO.name) &&
        Objects.equals(this.description, troubleTicketMVO.description) &&
        Objects.equals(this.severity, troubleTicketMVO.severity) &&
        Objects.equals(this.ticketType, troubleTicketMVO.ticketType) &&
        Objects.equals(this.attachment, troubleTicketMVO.attachment) &&
        Objects.equals(this.channel, troubleTicketMVO.channel) &&
        Objects.equals(this.requestedResolutionDate, troubleTicketMVO.requestedResolutionDate) &&
        Objects.equals(this.expectedResolutionDate, troubleTicketMVO.expectedResolutionDate) &&
        Objects.equals(this.resolutionDate, troubleTicketMVO.resolutionDate) &&
        Objects.equals(this.externalIdentifier, troubleTicketMVO.externalIdentifier) &&
        Objects.equals(this.note, troubleTicketMVO.note) &&
        Objects.equals(this.priority, troubleTicketMVO.priority) &&
        Objects.equals(this.relatedEntity, troubleTicketMVO.relatedEntity) &&
        Objects.equals(this.relatedParty, troubleTicketMVO.relatedParty) &&
        Objects.equals(this.status, troubleTicketMVO.status) &&
        Objects.equals(this.statusChangeReason, troubleTicketMVO.statusChangeReason) &&
        Objects.equals(this.statusChangeHistory, troubleTicketMVO.statusChangeHistory) &&
        Objects.equals(this.troubleTicketRelationship, troubleTicketMVO.troubleTicketRelationship) &&
        Objects.equals(this.troubleTicketSpecification, troubleTicketMVO.troubleTicketSpecification) &&
        Objects.equals(this.troubleTicketCharacteristic, troubleTicketMVO.troubleTicketCharacteristic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, name, description, severity, ticketType, attachment, channel, requestedResolutionDate, expectedResolutionDate, resolutionDate, externalIdentifier, note, priority, relatedEntity, relatedParty, status, statusChangeReason, statusChangeHistory, troubleTicketRelationship, troubleTicketSpecification, troubleTicketCharacteristic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TroubleTicketMVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    ticketType: ").append(toIndentedString(ticketType)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    requestedResolutionDate: ").append(toIndentedString(requestedResolutionDate)).append("\n");
    sb.append("    expectedResolutionDate: ").append(toIndentedString(expectedResolutionDate)).append("\n");
    sb.append("    resolutionDate: ").append(toIndentedString(resolutionDate)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    relatedEntity: ").append(toIndentedString(relatedEntity)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusChangeReason: ").append(toIndentedString(statusChangeReason)).append("\n");
    sb.append("    statusChangeHistory: ").append(toIndentedString(statusChangeHistory)).append("\n");
    sb.append("    troubleTicketRelationship: ").append(toIndentedString(troubleTicketRelationship)).append("\n");
    sb.append("    troubleTicketSpecification: ").append(toIndentedString(troubleTicketSpecification)).append("\n");
    sb.append("    troubleTicketCharacteristic: ").append(toIndentedString(troubleTicketCharacteristic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

