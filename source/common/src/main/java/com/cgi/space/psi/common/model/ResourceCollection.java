package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.Characteristic;
import com.cgi.space.psi.common.model.ExternalIdentifier;
import com.cgi.space.psi.common.model.Feature;
import com.cgi.space.psi.common.model.IntentRef;
import com.cgi.space.psi.common.model.LogicalResource;
import com.cgi.space.psi.common.model.Note;
import com.cgi.space.psi.common.model.PhysicalResource;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRef;
import com.cgi.space.psi.common.model.RelatedPlaceRef;
import com.cgi.space.psi.common.model.RelatedResourceOrderItem;
import com.cgi.space.psi.common.model.Resource;
import com.cgi.space.psi.common.model.ResourceAdministrativeStateType;
import com.cgi.space.psi.common.model.ResourceCollection;
import com.cgi.space.psi.common.model.ResourceOperationalStateType;
import com.cgi.space.psi.common.model.ResourceRefOrValue;
import com.cgi.space.psi.common.model.ResourceRelationship;
import com.cgi.space.psi.common.model.ResourceSpecificationRef;
import com.cgi.space.psi.common.model.ResourceStatusType;
import com.cgi.space.psi.common.model.ResourceUsageStateType;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ResourceCollection
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = LogicalResource.class, name = "LogicalResource"),
  @JsonSubTypes.Type(value = PhysicalResource.class, name = "PhysicalResource"),
  @JsonSubTypes.Type(value = Resource.class, name = "Resource"),
  @JsonSubTypes.Type(value = ResourceCollection.class, name = "ResourceCollection")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ResourceCollection extends Resource {

  @JsonProperty("containedResource")
  @Valid
  private List<ResourceRefOrValue> containedResource = null;

  public ResourceCollection containedResource(List<ResourceRefOrValue> containedResource) {
    this.containedResource = containedResource;
    return this;
  }

  public ResourceCollection addContainedResourceItem(ResourceRefOrValue containedResourceItem) {
    if (this.containedResource == null) {
      this.containedResource = new ArrayList<>();
    }
    this.containedResource.add(containedResourceItem);
    return this;
  }

  /**
   * The Resource members of the collection.
   * @return containedResource
  */
  @Valid 
  @Schema(name = "containedResource", description = "The Resource members of the collection.", required = false)
  public List<ResourceRefOrValue> getContainedResource() {
    return containedResource;
  }

  public void setContainedResource(List<ResourceRefOrValue> containedResource) {
    this.containedResource = containedResource;
  }

  public ResourceCollection atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public ResourceCollection atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public ResourceCollection atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public ResourceCollection href(URI href) {
    super.setHref(href);
    return this;
  }

  public ResourceCollection id(String id) {
    super.setId(id);
    return this;
  }

  public ResourceCollection category(String category) {
    super.setCategory(category);
    return this;
  }

  public ResourceCollection description(String description) {
    super.setDescription(description);
    return this;
  }

  public ResourceCollection name(String name) {
    super.setName(name);
    return this;
  }

  public ResourceCollection endOperatingDate(OffsetDateTime endOperatingDate) {
    super.setEndOperatingDate(endOperatingDate);
    return this;
  }

  public ResourceCollection administrativeState(ResourceAdministrativeStateType administrativeState) {
    super.setAdministrativeState(administrativeState);
    return this;
  }

  public ResourceCollection operationalState(ResourceOperationalStateType operationalState) {
    super.setOperationalState(operationalState);
    return this;
  }

  public ResourceCollection resourceStatus(ResourceStatusType resourceStatus) {
    super.setResourceStatus(resourceStatus);
    return this;
  }

  public ResourceCollection usageState(ResourceUsageStateType usageState) {
    super.setUsageState(usageState);
    return this;
  }

  public ResourceCollection validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  public ResourceCollection note(List<Note> note) {
    super.setNote(note);
    return this;
  }

  public ResourceCollection addNoteItem(Note noteItem) {
    super.addNoteItem(noteItem);
    return this;
  }

  public ResourceCollection resourceOrderItem(List<RelatedResourceOrderItem> resourceOrderItem) {
    super.setResourceOrderItem(resourceOrderItem);
    return this;
  }

  public ResourceCollection addResourceOrderItemItem(RelatedResourceOrderItem resourceOrderItemItem) {
    super.addResourceOrderItemItem(resourceOrderItemItem);
    return this;
  }

  public ResourceCollection place(List<RelatedPlaceRef> place) {
    super.setPlace(place);
    return this;
  }

  public ResourceCollection addPlaceItem(RelatedPlaceRef placeItem) {
    super.addPlaceItem(placeItem);
    return this;
  }

  public ResourceCollection relatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public ResourceCollection addRelatedPartyItem(RelatedPartyRefOrPartyRoleRef relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public ResourceCollection supportingResource(List<ResourceRefOrValue> supportingResource) {
    super.setSupportingResource(supportingResource);
    return this;
  }

  public ResourceCollection addSupportingResourceItem(ResourceRefOrValue supportingResourceItem) {
    super.addSupportingResourceItem(supportingResourceItem);
    return this;
  }

  public ResourceCollection resourceRelationship(List<ResourceRelationship> resourceRelationship) {
    super.setResourceRelationship(resourceRelationship);
    return this;
  }

  public ResourceCollection addResourceRelationshipItem(ResourceRelationship resourceRelationshipItem) {
    super.addResourceRelationshipItem(resourceRelationshipItem);
    return this;
  }

  public ResourceCollection resourceCharacteristic(List<Characteristic> resourceCharacteristic) {
    super.setResourceCharacteristic(resourceCharacteristic);
    return this;
  }

  public ResourceCollection addResourceCharacteristicItem(Characteristic resourceCharacteristicItem) {
    super.addResourceCharacteristicItem(resourceCharacteristicItem);
    return this;
  }

  public ResourceCollection attachment(List<AttachmentOrDocumentRef> attachment) {
    super.setAttachment(attachment);
    return this;
  }

  public ResourceCollection addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    super.addAttachmentItem(attachmentItem);
    return this;
  }

  public ResourceCollection resourceSpecification(ResourceSpecificationRef resourceSpecification) {
    super.setResourceSpecification(resourceSpecification);
    return this;
  }

  public ResourceCollection startOperatingDate(OffsetDateTime startOperatingDate) {
    super.setStartOperatingDate(startOperatingDate);
    return this;
  }

  public ResourceCollection resourceVersion(String resourceVersion) {
    super.setResourceVersion(resourceVersion);
    return this;
  }

  public ResourceCollection activationFeature(List<Feature> activationFeature) {
    super.setActivationFeature(activationFeature);
    return this;
  }

  public ResourceCollection addActivationFeatureItem(Feature activationFeatureItem) {
    super.addActivationFeatureItem(activationFeatureItem);
    return this;
  }

  public ResourceCollection intent(IntentRef intent) {
    super.setIntent(intent);
    return this;
  }

  public ResourceCollection externalIdentifier(List<ExternalIdentifier> externalIdentifier) {
    super.setExternalIdentifier(externalIdentifier);
    return this;
  }

  public ResourceCollection addExternalIdentifierItem(ExternalIdentifier externalIdentifierItem) {
    super.addExternalIdentifierItem(externalIdentifierItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCollection resourceCollection = (ResourceCollection) o;
    return Objects.equals(this.containedResource, resourceCollection.containedResource) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containedResource, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCollection {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    containedResource: ").append(toIndentedString(containedResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

