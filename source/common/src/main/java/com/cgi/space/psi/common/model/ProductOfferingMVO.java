package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AgreementRefMVO;
import com.cgi.space.psi.common.model.AllowedProductActionMVO;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.BundledGroupProductOffering;
import com.cgi.space.psi.common.model.BundledProductOfferingMVO;
import com.cgi.space.psi.common.model.CategoryRefMVO;
import com.cgi.space.psi.common.model.ChannelRefMVO;
import com.cgi.space.psi.common.model.CharacteristicSpecificationMVO;
import com.cgi.space.psi.common.model.ExternalIdentifierMVO;
import com.cgi.space.psi.common.model.MarketSegmentRefMVO;
import com.cgi.space.psi.common.model.PlaceRefMVO;
import com.cgi.space.psi.common.model.PolicyRefMVO;
import com.cgi.space.psi.common.model.ProductOfferingMVO;
import com.cgi.space.psi.common.model.ProductOfferingPrice;
import com.cgi.space.psi.common.model.ProductOfferingRelationshipMVO;
import com.cgi.space.psi.common.model.ProductOfferingTermMVO;
import com.cgi.space.psi.common.model.ProductSpecificationCharacteristicValueUseMVO;
import com.cgi.space.psi.common.model.ProductSpecificationRefMVO;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRef;
import com.cgi.space.psi.common.model.ResourceCandidateRefMVO;
import com.cgi.space.psi.common.model.ServiceCandidateRefMVO;
import com.cgi.space.psi.common.model.ServiceLevelSpecificationRef;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ProductOfferingMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProductOfferingMVO.class, name = "ProductOffering")
})

@JsonTypeName("ProductOffering_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ProductOfferingMVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("description")
  private String description;

  @JsonProperty("isBundle")
  private Boolean isBundle;

  @JsonProperty("isSellable")
  private Boolean isSellable;

  @JsonProperty("statusReason")
  private String statusReason;

  @JsonProperty("validFor")
  private TimePeriod validFor;

  @JsonProperty("version")
  private String version;

  @JsonProperty("place")
  @Valid
  private List<PlaceRefMVO> place = null;

  @JsonProperty("serviceLevelSpecification")
  private ServiceLevelSpecificationRef serviceLevelSpecification;

  @JsonProperty("channel")
  @Valid
  private List<ChannelRefMVO> channel = null;

  @JsonProperty("serviceCandidate")
  private ServiceCandidateRefMVO serviceCandidate;

  @JsonProperty("category")
  @Valid
  private List<CategoryRefMVO> category = null;

  @JsonProperty("resourceCandidate")
  private ResourceCandidateRefMVO resourceCandidate;

  @JsonProperty("productOfferingTerm")
  @Valid
  private List<ProductOfferingTermMVO> productOfferingTerm = null;

  @JsonProperty("productOfferingPrice")
  @Valid
  private List<ProductOfferingPrice> productOfferingPrice = null;

  @JsonProperty("agreement")
  @Valid
  private List<AgreementRefMVO> agreement = null;

  @JsonProperty("bundledProductOffering")
  @Valid
  private List<BundledProductOfferingMVO> bundledProductOffering = null;

  @JsonProperty("bundledGroupProductOffering")
  @Valid
  private List<BundledGroupProductOffering> bundledGroupProductOffering = null;

  @JsonProperty("attachment")
  @Valid
  private List<AttachmentOrDocumentRef> attachment = null;

  @JsonProperty("marketSegment")
  @Valid
  private List<MarketSegmentRefMVO> marketSegment = null;

  @JsonProperty("productOfferingRelationship")
  @Valid
  private List<ProductOfferingRelationshipMVO> productOfferingRelationship = null;

  @JsonProperty("productOfferingCharacteristic")
  @Valid
  private List<CharacteristicSpecificationMVO> productOfferingCharacteristic = null;

  @JsonProperty("prodSpecCharValueUse")
  @Valid
  private List<ProductSpecificationCharacteristicValueUseMVO> prodSpecCharValueUse = null;

  @JsonProperty("policy")
  @Valid
  private List<PolicyRefMVO> policy = null;

  @JsonProperty("allowedAction")
  @Valid
  private List<AllowedProductActionMVO> allowedAction = null;

  @JsonProperty("lifecycleStatus")
  private String lifecycleStatus;

  @JsonProperty("name")
  private String name;

  @JsonProperty("productSpecification")
  private ProductSpecificationRefMVO productSpecification;

  @JsonProperty("externalIdentifier")
  @Valid
  private List<ExternalIdentifierMVO> externalIdentifier = null;

  @JsonProperty("accessProbability")
  private Integer accessProbability;

  @JsonProperty("relatedParty")
  @Valid
  private List<RelatedPartyRefOrPartyRoleRef> relatedParty = null;

  public ProductOfferingMVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public ProductOfferingMVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public ProductOfferingMVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public ProductOfferingMVO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the productOffering
   * @return description
  */
  
  @Schema(name = "description", description = "Description of the productOffering", required = false)
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProductOfferingMVO isBundle(Boolean isBundle) {
    this.isBundle = isBundle;
    return this;
  }

  /**
   * isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true).
   * @return isBundle
  */
  
  @Schema(name = "isBundle", description = "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true).", required = false)
  public Boolean getIsBundle() {
    return isBundle;
  }

  public void setIsBundle(Boolean isBundle) {
    this.isBundle = isBundle;
  }

  public ProductOfferingMVO isSellable(Boolean isSellable) {
    this.isSellable = isSellable;
    return this;
  }

  /**
   * A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle.
   * @return isSellable
  */
  
  @Schema(name = "isSellable", description = "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle.", required = false)
  public Boolean getIsSellable() {
    return isSellable;
  }

  public void setIsSellable(Boolean isSellable) {
    this.isSellable = isSellable;
  }

  public ProductOfferingMVO statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * A string providing a complementary information on the value of the lifecycle status attribute.
   * @return statusReason
  */
  
  @Schema(name = "statusReason", description = "A string providing a complementary information on the value of the lifecycle status attribute.", required = false)
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }

  public ProductOfferingMVO validFor(TimePeriod validFor) {
    this.validFor = validFor;
    return this;
  }

  /**
   * Get validFor
   * @return validFor
  */
  @Valid 
  @Schema(name = "validFor", required = false)
  public TimePeriod getValidFor() {
    return validFor;
  }

  public void setValidFor(TimePeriod validFor) {
    this.validFor = validFor;
  }

  public ProductOfferingMVO version(String version) {
    this.version = version;
    return this;
  }

  /**
   * ProductOffering version
   * @return version
  */
  
  @Schema(name = "version", description = "ProductOffering version", required = false)
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public ProductOfferingMVO place(List<PlaceRefMVO> place) {
    this.place = place;
    return this;
  }

  public ProductOfferingMVO addPlaceItem(PlaceRefMVO placeItem) {
    if (this.place == null) {
      this.place = new ArrayList<>();
    }
    this.place.add(placeItem);
    return this;
  }

  /**
   * Place defines the places where the products are sold or delivered.
   * @return place
  */
  @Valid 
  @Schema(name = "place", description = "Place defines the places where the products are sold or delivered.", required = false)
  public List<PlaceRefMVO> getPlace() {
    return place;
  }

  public void setPlace(List<PlaceRefMVO> place) {
    this.place = place;
  }

  public ProductOfferingMVO serviceLevelSpecification(ServiceLevelSpecificationRef serviceLevelSpecification) {
    this.serviceLevelSpecification = serviceLevelSpecification;
    return this;
  }

  /**
   * Get serviceLevelSpecification
   * @return serviceLevelSpecification
  */
  @Valid 
  @Schema(name = "serviceLevelSpecification", required = false)
  public ServiceLevelSpecificationRef getServiceLevelSpecification() {
    return serviceLevelSpecification;
  }

  public void setServiceLevelSpecification(ServiceLevelSpecificationRef serviceLevelSpecification) {
    this.serviceLevelSpecification = serviceLevelSpecification;
  }

  public ProductOfferingMVO channel(List<ChannelRefMVO> channel) {
    this.channel = channel;
    return this;
  }

  public ProductOfferingMVO addChannelItem(ChannelRefMVO channelItem) {
    if (this.channel == null) {
      this.channel = new ArrayList<>();
    }
    this.channel.add(channelItem);
    return this;
  }

  /**
   * The channel defines the channel for selling product offerings.
   * @return channel
  */
  @Valid 
  @Schema(name = "channel", description = "The channel defines the channel for selling product offerings.", required = false)
  public List<ChannelRefMVO> getChannel() {
    return channel;
  }

  public void setChannel(List<ChannelRefMVO> channel) {
    this.channel = channel;
  }

  public ProductOfferingMVO serviceCandidate(ServiceCandidateRefMVO serviceCandidate) {
    this.serviceCandidate = serviceCandidate;
    return this;
  }

  /**
   * Get serviceCandidate
   * @return serviceCandidate
  */
  @Valid 
  @Schema(name = "serviceCandidate", required = false)
  public ServiceCandidateRefMVO getServiceCandidate() {
    return serviceCandidate;
  }

  public void setServiceCandidate(ServiceCandidateRefMVO serviceCandidate) {
    this.serviceCandidate = serviceCandidate;
  }

  public ProductOfferingMVO category(List<CategoryRefMVO> category) {
    this.category = category;
    return this;
  }

  public ProductOfferingMVO addCategoryItem(CategoryRefMVO categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.
   * @return category
  */
  @Valid 
  @Schema(name = "category", description = "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.", required = false)
  public List<CategoryRefMVO> getCategory() {
    return category;
  }

  public void setCategory(List<CategoryRefMVO> category) {
    this.category = category;
  }

  public ProductOfferingMVO resourceCandidate(ResourceCandidateRefMVO resourceCandidate) {
    this.resourceCandidate = resourceCandidate;
    return this;
  }

  /**
   * Get resourceCandidate
   * @return resourceCandidate
  */
  @Valid 
  @Schema(name = "resourceCandidate", required = false)
  public ResourceCandidateRefMVO getResourceCandidate() {
    return resourceCandidate;
  }

  public void setResourceCandidate(ResourceCandidateRefMVO resourceCandidate) {
    this.resourceCandidate = resourceCandidate;
  }

  public ProductOfferingMVO productOfferingTerm(List<ProductOfferingTermMVO> productOfferingTerm) {
    this.productOfferingTerm = productOfferingTerm;
    return this;
  }

  public ProductOfferingMVO addProductOfferingTermItem(ProductOfferingTermMVO productOfferingTermItem) {
    if (this.productOfferingTerm == null) {
      this.productOfferingTerm = new ArrayList<>();
    }
    this.productOfferingTerm.add(productOfferingTermItem);
    return this;
  }

  /**
   * A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.
   * @return productOfferingTerm
  */
  @Valid 
  @Schema(name = "productOfferingTerm", description = "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.", required = false)
  public List<ProductOfferingTermMVO> getProductOfferingTerm() {
    return productOfferingTerm;
  }

  public void setProductOfferingTerm(List<ProductOfferingTermMVO> productOfferingTerm) {
    this.productOfferingTerm = productOfferingTerm;
  }

  public ProductOfferingMVO productOfferingPrice(List<ProductOfferingPrice> productOfferingPrice) {
    this.productOfferingPrice = productOfferingPrice;
    return this;
  }

  public ProductOfferingMVO addProductOfferingPriceItem(ProductOfferingPrice productOfferingPriceItem) {
    if (this.productOfferingPrice == null) {
      this.productOfferingPrice = new ArrayList<>();
    }
    this.productOfferingPrice.add(productOfferingPriceItem);
    return this;
  }

  /**
   * An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.
   * @return productOfferingPrice
  */
  @Valid 
  @Schema(name = "productOfferingPrice", description = "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.", required = false)
  public List<ProductOfferingPrice> getProductOfferingPrice() {
    return productOfferingPrice;
  }

  public void setProductOfferingPrice(List<ProductOfferingPrice> productOfferingPrice) {
    this.productOfferingPrice = productOfferingPrice;
  }

  public ProductOfferingMVO agreement(List<AgreementRefMVO> agreement) {
    this.agreement = agreement;
    return this;
  }

  public ProductOfferingMVO addAgreementItem(AgreementRefMVO agreementItem) {
    if (this.agreement == null) {
      this.agreement = new ArrayList<>();
    }
    this.agreement.add(agreementItem);
    return this;
  }

  /**
   * An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.
   * @return agreement
  */
  @Valid 
  @Schema(name = "agreement", description = "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.", required = false)
  public List<AgreementRefMVO> getAgreement() {
    return agreement;
  }

  public void setAgreement(List<AgreementRefMVO> agreement) {
    this.agreement = agreement;
  }

  public ProductOfferingMVO bundledProductOffering(List<BundledProductOfferingMVO> bundledProductOffering) {
    this.bundledProductOffering = bundledProductOffering;
    return this;
  }

  public ProductOfferingMVO addBundledProductOfferingItem(BundledProductOfferingMVO bundledProductOfferingItem) {
    if (this.bundledProductOffering == null) {
      this.bundledProductOffering = new ArrayList<>();
    }
    this.bundledProductOffering.add(bundledProductOfferingItem);
    return this;
  }

  /**
   * A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.
   * @return bundledProductOffering
  */
  @Valid 
  @Schema(name = "bundledProductOffering", description = "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.", required = false)
  public List<BundledProductOfferingMVO> getBundledProductOffering() {
    return bundledProductOffering;
  }

  public void setBundledProductOffering(List<BundledProductOfferingMVO> bundledProductOffering) {
    this.bundledProductOffering = bundledProductOffering;
  }

  public ProductOfferingMVO bundledGroupProductOffering(List<BundledGroupProductOffering> bundledGroupProductOffering) {
    this.bundledGroupProductOffering = bundledGroupProductOffering;
    return this;
  }

  public ProductOfferingMVO addBundledGroupProductOfferingItem(BundledGroupProductOffering bundledGroupProductOfferingItem) {
    if (this.bundledGroupProductOffering == null) {
      this.bundledGroupProductOffering = new ArrayList<>();
    }
    this.bundledGroupProductOffering.add(bundledGroupProductOfferingItem);
    return this;
  }

  /**
   * A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.
   * @return bundledGroupProductOffering
  */
  @Valid 
  @Schema(name = "bundledGroupProductOffering", description = "A group of product offerings that can be selected for instantiation, e.g. between 2 and 7 from a list of 15 channel packs.", required = false)
  public List<BundledGroupProductOffering> getBundledGroupProductOffering() {
    return bundledGroupProductOffering;
  }

  public void setBundledGroupProductOffering(List<BundledGroupProductOffering> bundledGroupProductOffering) {
    this.bundledGroupProductOffering = bundledGroupProductOffering;
  }

  public ProductOfferingMVO attachment(List<AttachmentOrDocumentRef> attachment) {
    this.attachment = attachment;
    return this;
  }

  public ProductOfferingMVO addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    if (this.attachment == null) {
      this.attachment = new ArrayList<>();
    }
    this.attachment.add(attachmentItem);
    return this;
  }

  /**
   * Get attachment
   * @return attachment
  */
  @Valid 
  @Schema(name = "attachment", required = false)
  public List<AttachmentOrDocumentRef> getAttachment() {
    return attachment;
  }

  public void setAttachment(List<AttachmentOrDocumentRef> attachment) {
    this.attachment = attachment;
  }

  public ProductOfferingMVO marketSegment(List<MarketSegmentRefMVO> marketSegment) {
    this.marketSegment = marketSegment;
    return this;
  }

  public ProductOfferingMVO addMarketSegmentItem(MarketSegmentRefMVO marketSegmentItem) {
    if (this.marketSegment == null) {
      this.marketSegment = new ArrayList<>();
    }
    this.marketSegment.add(marketSegmentItem);
    return this;
  }

  /**
   * provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.
   * @return marketSegment
  */
  @Valid 
  @Schema(name = "marketSegment", description = "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.", required = false)
  public List<MarketSegmentRefMVO> getMarketSegment() {
    return marketSegment;
  }

  public void setMarketSegment(List<MarketSegmentRefMVO> marketSegment) {
    this.marketSegment = marketSegment;
  }

  public ProductOfferingMVO productOfferingRelationship(List<ProductOfferingRelationshipMVO> productOfferingRelationship) {
    this.productOfferingRelationship = productOfferingRelationship;
    return this;
  }

  public ProductOfferingMVO addProductOfferingRelationshipItem(ProductOfferingRelationshipMVO productOfferingRelationshipItem) {
    if (this.productOfferingRelationship == null) {
      this.productOfferingRelationship = new ArrayList<>();
    }
    this.productOfferingRelationship.add(productOfferingRelationshipItem);
    return this;
  }

  /**
   * A relationship between this product offering and other product offerings.
   * @return productOfferingRelationship
  */
  @Valid 
  @Schema(name = "productOfferingRelationship", description = "A relationship between this product offering and other product offerings.", required = false)
  public List<ProductOfferingRelationshipMVO> getProductOfferingRelationship() {
    return productOfferingRelationship;
  }

  public void setProductOfferingRelationship(List<ProductOfferingRelationshipMVO> productOfferingRelationship) {
    this.productOfferingRelationship = productOfferingRelationship;
  }

  public ProductOfferingMVO productOfferingCharacteristic(List<CharacteristicSpecificationMVO> productOfferingCharacteristic) {
    this.productOfferingCharacteristic = productOfferingCharacteristic;
    return this;
  }

  public ProductOfferingMVO addProductOfferingCharacteristicItem(CharacteristicSpecificationMVO productOfferingCharacteristicItem) {
    if (this.productOfferingCharacteristic == null) {
      this.productOfferingCharacteristic = new ArrayList<>();
    }
    this.productOfferingCharacteristic.add(productOfferingCharacteristicItem);
    return this;
  }

  /**
   * A characteristic quality or distinctive feature of a ProductOffering. The characteristic can take on a discrete value fixed at design (catalog authoring) time, such as Mobile Plan Rank, and is not generally modifiable at inventory level.
   * @return productOfferingCharacteristic
  */
  @Valid 
  @Schema(name = "productOfferingCharacteristic", description = "A characteristic quality or distinctive feature of a ProductOffering. The characteristic can take on a discrete value fixed at design (catalog authoring) time, such as Mobile Plan Rank, and is not generally modifiable at inventory level.", required = false)
  public List<CharacteristicSpecificationMVO> getProductOfferingCharacteristic() {
    return productOfferingCharacteristic;
  }

  public void setProductOfferingCharacteristic(List<CharacteristicSpecificationMVO> productOfferingCharacteristic) {
    this.productOfferingCharacteristic = productOfferingCharacteristic;
  }

  public ProductOfferingMVO prodSpecCharValueUse(List<ProductSpecificationCharacteristicValueUseMVO> prodSpecCharValueUse) {
    this.prodSpecCharValueUse = prodSpecCharValueUse;
    return this;
  }

  public ProductOfferingMVO addProdSpecCharValueUseItem(ProductSpecificationCharacteristicValueUseMVO prodSpecCharValueUseItem) {
    if (this.prodSpecCharValueUse == null) {
      this.prodSpecCharValueUse = new ArrayList<>();
    }
    this.prodSpecCharValueUse.add(prodSpecCharValueUseItem);
    return this;
  }

  /**
   * A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.
   * @return prodSpecCharValueUse
  */
  @Valid 
  @Schema(name = "prodSpecCharValueUse", description = "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.", required = false)
  public List<ProductSpecificationCharacteristicValueUseMVO> getProdSpecCharValueUse() {
    return prodSpecCharValueUse;
  }

  public void setProdSpecCharValueUse(List<ProductSpecificationCharacteristicValueUseMVO> prodSpecCharValueUse) {
    this.prodSpecCharValueUse = prodSpecCharValueUse;
  }

  public ProductOfferingMVO policy(List<PolicyRefMVO> policy) {
    this.policy = policy;
    return this;
  }

  public ProductOfferingMVO addPolicyItem(PolicyRefMVO policyItem) {
    if (this.policy == null) {
      this.policy = new ArrayList<>();
    }
    this.policy.add(policyItem);
    return this;
  }

  /**
   * The Policy resource represents a policy/rule applied to ProductOffering.
   * @return policy
  */
  @Valid 
  @Schema(name = "policy", description = "The Policy resource represents a policy/rule applied to ProductOffering.", required = false)
  public List<PolicyRefMVO> getPolicy() {
    return policy;
  }

  public void setPolicy(List<PolicyRefMVO> policy) {
    this.policy = policy;
  }

  public ProductOfferingMVO allowedAction(List<AllowedProductActionMVO> allowedAction) {
    this.allowedAction = allowedAction;
    return this;
  }

  public ProductOfferingMVO addAllowedActionItem(AllowedProductActionMVO allowedActionItem) {
    if (this.allowedAction == null) {
      this.allowedAction = new ArrayList<>();
    }
    this.allowedAction.add(allowedActionItem);
    return this;
  }

  /**
   * List of actions that can be executed (in context of a product order) on products instantiated from this offering
   * @return allowedAction
  */
  @Valid 
  @Schema(name = "allowedAction", description = "List of actions that can be executed (in context of a product order) on products instantiated from this offering", required = false)
  public List<AllowedProductActionMVO> getAllowedAction() {
    return allowedAction;
  }

  public void setAllowedAction(List<AllowedProductActionMVO> allowedAction) {
    this.allowedAction = allowedAction;
  }

  public ProductOfferingMVO lifecycleStatus(String lifecycleStatus) {
    this.lifecycleStatus = lifecycleStatus;
    return this;
  }

  /**
   * Used to indicate the current lifecycle status
   * @return lifecycleStatus
  */
  
  @Schema(name = "lifecycleStatus", description = "Used to indicate the current lifecycle status", required = false)
  public String getLifecycleStatus() {
    return lifecycleStatus;
  }

  public void setLifecycleStatus(String lifecycleStatus) {
    this.lifecycleStatus = lifecycleStatus;
  }

  public ProductOfferingMVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the productOffering
   * @return name
  */
  
  @Schema(name = "name", description = "Name of the productOffering", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProductOfferingMVO productSpecification(ProductSpecificationRefMVO productSpecification) {
    this.productSpecification = productSpecification;
    return this;
  }

  /**
   * Get productSpecification
   * @return productSpecification
  */
  @Valid 
  @Schema(name = "productSpecification", required = false)
  public ProductSpecificationRefMVO getProductSpecification() {
    return productSpecification;
  }

  public void setProductSpecification(ProductSpecificationRefMVO productSpecification) {
    this.productSpecification = productSpecification;
  }

  public ProductOfferingMVO externalIdentifier(List<ExternalIdentifierMVO> externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
    return this;
  }

  public ProductOfferingMVO addExternalIdentifierItem(ExternalIdentifierMVO externalIdentifierItem) {
    if (this.externalIdentifier == null) {
      this.externalIdentifier = new ArrayList<>();
    }
    this.externalIdentifier.add(externalIdentifierItem);
    return this;
  }

  /**
   * List of external identifieers for the offering, e.g. identifier in source catalog
   * @return externalIdentifier
  */
  @Valid 
  @Schema(name = "externalIdentifier", description = "List of external identifieers for the offering, e.g. identifier in source catalog", required = false)
  public List<ExternalIdentifierMVO> getExternalIdentifier() {
    return externalIdentifier;
  }

  public void setExternalIdentifier(List<ExternalIdentifierMVO> externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }

  public ProductOfferingMVO accessProbability(Integer accessProbability) {
    this.accessProbability = accessProbability;
    return this;
  }

  /**
   * Probability that an order of this offering can be fulfilled (in %).
   * minimum: 0
   * maximum: 1
   * @return accessProbability
  */
  @Min(0) @Max(1) 
  @Schema(name = "accessProbability", description = "Probability that an order of this offering can be fulfilled (in %).", required = false)
  public Integer getAccessProbability() {
    return accessProbability;
  }

  public void setAccessProbability(Integer accessProbability) {
    this.accessProbability = accessProbability;
  }

  public ProductOfferingMVO relatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public ProductOfferingMVO addRelatedPartyItem(RelatedPartyRefOrPartyRoleRef relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

  /**
   * A related party defines party or party role linked to a specific entity.
   * @return relatedParty
  */
  @Valid 
  @Schema(name = "relatedParty", description = "A related party defines party or party role linked to a specific entity.", required = false)
  public List<RelatedPartyRefOrPartyRoleRef> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    this.relatedParty = relatedParty;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductOfferingMVO productOfferingMVO = (ProductOfferingMVO) o;
    return Objects.equals(this.atType, productOfferingMVO.atType) &&
        Objects.equals(this.atBaseType, productOfferingMVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, productOfferingMVO.atSchemaLocation) &&
        Objects.equals(this.description, productOfferingMVO.description) &&
        Objects.equals(this.isBundle, productOfferingMVO.isBundle) &&
        Objects.equals(this.isSellable, productOfferingMVO.isSellable) &&
        Objects.equals(this.statusReason, productOfferingMVO.statusReason) &&
        Objects.equals(this.validFor, productOfferingMVO.validFor) &&
        Objects.equals(this.version, productOfferingMVO.version) &&
        Objects.equals(this.place, productOfferingMVO.place) &&
        Objects.equals(this.serviceLevelSpecification, productOfferingMVO.serviceLevelSpecification) &&
        Objects.equals(this.channel, productOfferingMVO.channel) &&
        Objects.equals(this.serviceCandidate, productOfferingMVO.serviceCandidate) &&
        Objects.equals(this.category, productOfferingMVO.category) &&
        Objects.equals(this.resourceCandidate, productOfferingMVO.resourceCandidate) &&
        Objects.equals(this.productOfferingTerm, productOfferingMVO.productOfferingTerm) &&
        Objects.equals(this.productOfferingPrice, productOfferingMVO.productOfferingPrice) &&
        Objects.equals(this.agreement, productOfferingMVO.agreement) &&
        Objects.equals(this.bundledProductOffering, productOfferingMVO.bundledProductOffering) &&
        Objects.equals(this.bundledGroupProductOffering, productOfferingMVO.bundledGroupProductOffering) &&
        Objects.equals(this.attachment, productOfferingMVO.attachment) &&
        Objects.equals(this.marketSegment, productOfferingMVO.marketSegment) &&
        Objects.equals(this.productOfferingRelationship, productOfferingMVO.productOfferingRelationship) &&
        Objects.equals(this.productOfferingCharacteristic, productOfferingMVO.productOfferingCharacteristic) &&
        Objects.equals(this.prodSpecCharValueUse, productOfferingMVO.prodSpecCharValueUse) &&
        Objects.equals(this.policy, productOfferingMVO.policy) &&
        Objects.equals(this.allowedAction, productOfferingMVO.allowedAction) &&
        Objects.equals(this.lifecycleStatus, productOfferingMVO.lifecycleStatus) &&
        Objects.equals(this.name, productOfferingMVO.name) &&
        Objects.equals(this.productSpecification, productOfferingMVO.productSpecification) &&
        Objects.equals(this.externalIdentifier, productOfferingMVO.externalIdentifier) &&
        Objects.equals(this.accessProbability, productOfferingMVO.accessProbability) &&
        Objects.equals(this.relatedParty, productOfferingMVO.relatedParty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, description, isBundle, isSellable, statusReason, validFor, version, place, serviceLevelSpecification, channel, serviceCandidate, category, resourceCandidate, productOfferingTerm, productOfferingPrice, agreement, bundledProductOffering, bundledGroupProductOffering, attachment, marketSegment, productOfferingRelationship, productOfferingCharacteristic, prodSpecCharValueUse, policy, allowedAction, lifecycleStatus, name, productSpecification, externalIdentifier, accessProbability, relatedParty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductOfferingMVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isBundle: ").append(toIndentedString(isBundle)).append("\n");
    sb.append("    isSellable: ").append(toIndentedString(isSellable)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    validFor: ").append(toIndentedString(validFor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    serviceLevelSpecification: ").append(toIndentedString(serviceLevelSpecification)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    serviceCandidate: ").append(toIndentedString(serviceCandidate)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    resourceCandidate: ").append(toIndentedString(resourceCandidate)).append("\n");
    sb.append("    productOfferingTerm: ").append(toIndentedString(productOfferingTerm)).append("\n");
    sb.append("    productOfferingPrice: ").append(toIndentedString(productOfferingPrice)).append("\n");
    sb.append("    agreement: ").append(toIndentedString(agreement)).append("\n");
    sb.append("    bundledProductOffering: ").append(toIndentedString(bundledProductOffering)).append("\n");
    sb.append("    bundledGroupProductOffering: ").append(toIndentedString(bundledGroupProductOffering)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    marketSegment: ").append(toIndentedString(marketSegment)).append("\n");
    sb.append("    productOfferingRelationship: ").append(toIndentedString(productOfferingRelationship)).append("\n");
    sb.append("    productOfferingCharacteristic: ").append(toIndentedString(productOfferingCharacteristic)).append("\n");
    sb.append("    prodSpecCharValueUse: ").append(toIndentedString(prodSpecCharValueUse)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    allowedAction: ").append(toIndentedString(allowedAction)).append("\n");
    sb.append("    lifecycleStatus: ").append(toIndentedString(lifecycleStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productSpecification: ").append(toIndentedString(productSpecification)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    accessProbability: ").append(toIndentedString(accessProbability)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

