package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.ConnectionPointSpecificationRef;
import com.cgi.space.psi.common.model.EndpointSpecificationRef;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * EndpointSpecificationRef
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EndpointSpecificationRef.class, name = "EndpointSpecificationRef")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class EndpointSpecificationRef {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("href")
  private URI href;

  @JsonProperty("id")
  private String id;

  @JsonProperty("name")
  private String name;

  @JsonProperty("@referredType")
  private String atReferredType;

  @JsonProperty("role")
  private String role;

  @JsonProperty("isRoot")
  private Boolean isRoot = true;

  @JsonProperty("connectionPointSpecification")
  private ConnectionPointSpecificationRef connectionPointSpecification;

  public EndpointSpecificationRef atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public EndpointSpecificationRef atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public EndpointSpecificationRef atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public EndpointSpecificationRef href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * The URI of the referred entity.
   * @return href
  */
  @Valid 
  @Schema(name = "href", description = "The URI of the referred entity.", required = false)
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }

  public EndpointSpecificationRef id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the referred entity.
   * @return id
  */
  @NotNull 
  @Schema(name = "id", description = "The identifier of the referred entity.", required = true)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EndpointSpecificationRef name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the referred entity.
   * @return name
  */
  
  @Schema(name = "name", description = "Name of the referred entity.", required = false)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EndpointSpecificationRef atReferredType(String atReferredType) {
    this.atReferredType = atReferredType;
    return this;
  }

  /**
   * The actual type of the target instance when needed for disambiguation.
   * @return atReferredType
  */
  
  @Schema(name = "@referredType", description = "The actual type of the target instance when needed for disambiguation.", required = false)
  public String getAtReferredType() {
    return atReferredType;
  }

  public void setAtReferredType(String atReferredType) {
    this.atReferredType = atReferredType;
  }

  public EndpointSpecificationRef role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Role of the Resource Function.
   * @return role
  */
  
  @Schema(name = "role", description = "Role of the Resource Function.", required = false)
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public EndpointSpecificationRef isRoot(Boolean isRoot) {
    this.isRoot = isRoot;
    return this;
  }

  /**
   * Directionality: true when endpoint is a source, false when a sink. If true for all endpoints connectivity is bidirectional. Default is true.
   * @return isRoot
  */
  
  @Schema(name = "isRoot", description = "Directionality: true when endpoint is a source, false when a sink. If true for all endpoints connectivity is bidirectional. Default is true.", required = false)
  public Boolean getIsRoot() {
    return isRoot;
  }

  public void setIsRoot(Boolean isRoot) {
    this.isRoot = isRoot;
  }

  public EndpointSpecificationRef connectionPointSpecification(ConnectionPointSpecificationRef connectionPointSpecification) {
    this.connectionPointSpecification = connectionPointSpecification;
    return this;
  }

  /**
   * Get connectionPointSpecification
   * @return connectionPointSpecification
  */
  @Valid 
  @Schema(name = "connectionPointSpecification", required = false)
  public ConnectionPointSpecificationRef getConnectionPointSpecification() {
    return connectionPointSpecification;
  }

  public void setConnectionPointSpecification(ConnectionPointSpecificationRef connectionPointSpecification) {
    this.connectionPointSpecification = connectionPointSpecification;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointSpecificationRef endpointSpecificationRef = (EndpointSpecificationRef) o;
    return Objects.equals(this.atType, endpointSpecificationRef.atType) &&
        Objects.equals(this.atBaseType, endpointSpecificationRef.atBaseType) &&
        Objects.equals(this.atSchemaLocation, endpointSpecificationRef.atSchemaLocation) &&
        Objects.equals(this.href, endpointSpecificationRef.href) &&
        Objects.equals(this.id, endpointSpecificationRef.id) &&
        Objects.equals(this.name, endpointSpecificationRef.name) &&
        Objects.equals(this.atReferredType, endpointSpecificationRef.atReferredType) &&
        Objects.equals(this.role, endpointSpecificationRef.role) &&
        Objects.equals(this.isRoot, endpointSpecificationRef.isRoot) &&
        Objects.equals(this.connectionPointSpecification, endpointSpecificationRef.connectionPointSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, href, id, name, atReferredType, role, isRoot, connectionPointSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointSpecificationRef {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    atReferredType: ").append(toIndentedString(atReferredType)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    isRoot: ").append(toIndentedString(isRoot)).append("\n");
    sb.append("    connectionPointSpecification: ").append(toIndentedString(connectionPointSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

