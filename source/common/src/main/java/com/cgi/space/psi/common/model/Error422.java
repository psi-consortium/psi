package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.Error;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@Schema(name = "Error422", description = "Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)")
@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Error.class, name = "Error")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class Error422 extends Error {

  @JsonProperty("propertyPath")
  private String propertyPath;

  public Error422 propertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
    return this;
  }

  /**
   * A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used. Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).
   * @return propertyPath
  */
  
  @Schema(name = "propertyPath", description = "A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used. Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).", required = false)
  public String getPropertyPath() {
    return propertyPath;
  }

  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }

  public Error422 atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public Error422 atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public Error422 atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public Error422 code(String code) {
    super.setCode(code);
    return this;
  }

  public Error422 reason(String reason) {
    super.setReason(reason);
    return this;
  }

  public Error422 message(String message) {
    super.setMessage(message);
    return this;
  }

  public Error422 status(String status) {
    super.setStatus(status);
    return this;
  }

  public Error422 referenceError(String referenceError) {
    super.setReferenceError(referenceError);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error422 error422 = (Error422) o;
    return Objects.equals(this.propertyPath, error422.propertyPath) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyPath, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error422 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

