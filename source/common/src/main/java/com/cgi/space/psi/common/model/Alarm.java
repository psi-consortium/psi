package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.Alarm;
import com.cgi.space.psi.common.model.AlarmRef;
import com.cgi.space.psi.common.model.AlarmType;
import com.cgi.space.psi.common.model.AlarmedObjectRef;
import com.cgi.space.psi.common.model.Comment;
import com.cgi.space.psi.common.model.CrossedThresholdInformation;
import com.cgi.space.psi.common.model.PerceivedSeverity;
import com.cgi.space.psi.common.model.RelatedPlaceRef;
import com.cgi.space.psi.common.model.ServiceRef;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Alarm
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Alarm.class, name = "Alarm")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class Alarm {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("href")
  private URI href;

  @JsonProperty("id")
  private String id;

  @JsonProperty("externalAlarmId")
  private String externalAlarmId;

  /**
   * Defines the alarm state during its life cycle (raised, updated, cleared).
   */
  public enum StateEnum {
    RAISED("raised"),
    
    UPDATED("updated"),
    
    CLEARED("cleared");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("state")
  private StateEnum state;

  @JsonProperty("alarmType")
  private AlarmType alarmType;

  @JsonProperty("perceivedSeverity")
  private PerceivedSeverity perceivedSeverity;

  @JsonProperty("probableCause")
  private String probableCause;

  @JsonProperty("specificProblem")
  private String specificProblem;

  @JsonProperty("alarmedObjectType")
  private String alarmedObjectType;

  @JsonProperty("alarmedObject")
  private AlarmedObjectRef alarmedObject;

  @JsonProperty("reportingSystemId")
  private String reportingSystemId;

  @JsonProperty("sourceSystemId")
  private String sourceSystemId;

  @JsonProperty("alarmDetails")
  private String alarmDetails;

  @JsonProperty("alarmRaisedTime")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime alarmRaisedTime;

  @JsonProperty("alarmChangedTime")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime alarmChangedTime;

  @JsonProperty("alarmClearedTime")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime alarmClearedTime;

  @JsonProperty("alarmReportingTime")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime alarmReportingTime;

  /**
   * Provides the Acknowledgement State of the alarm (unacknowledged, acknowledged).
   */
  public enum AckStateEnum {
    UNACKNOWLEDGED("unacknowledged"),
    
    ACKNOWLEDGED("acknowledged");

    private String value;

    AckStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AckStateEnum fromValue(String value) {
      for (AckStateEnum b : AckStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("ackState")
  private AckStateEnum ackState;

  @JsonProperty("ackSystemId")
  private String ackSystemId;

  @JsonProperty("ackUserId")
  private String ackUserId;

  @JsonProperty("affectedService")
  @Valid
  private List<ServiceRef> affectedService = null;

  @JsonProperty("alarmEscalation")
  private Boolean alarmEscalation;

  @JsonProperty("clearSystemId")
  private String clearSystemId;

  @JsonProperty("clearUserId")
  private String clearUserId;

  @JsonProperty("comment")
  @Valid
  private List<Comment> comment = null;

  @JsonProperty("correlatedAlarm")
  @Valid
  private List<AlarmRef> correlatedAlarm = null;

  @JsonProperty("crossedThresholdInformation")
  private CrossedThresholdInformation crossedThresholdInformation;

  @JsonProperty("isRootCause")
  private Boolean isRootCause;

  @JsonProperty("parentAlarm")
  @Valid
  private List<AlarmRef> parentAlarm = null;

  /**
   * Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). 
   */
  public enum PlannedOutageIndicatorEnum {
    INSERVICE("InService"),
    
    OUTOFSERVICE("OutOfService");

    private String value;

    PlannedOutageIndicatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlannedOutageIndicatorEnum fromValue(String value) {
      for (PlannedOutageIndicatorEnum b : PlannedOutageIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("plannedOutageIndicator")
  private PlannedOutageIndicatorEnum plannedOutageIndicator;

  @JsonProperty("proposedRepairedActions")
  private String proposedRepairedActions;

  @JsonProperty("serviceAffecting")
  private Boolean serviceAffecting;

  @JsonProperty("place")
  @Valid
  private List<RelatedPlaceRef> place = null;

  public Alarm atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public Alarm atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public Alarm atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public Alarm href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * Hyperlink reference
   * @return href
  */
  @Valid 
  @Schema(name = "href", description = "Hyperlink reference", required = false)
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }

  public Alarm id(String id) {
    this.id = id;
    return this;
  }

  /**
   * unique identifier
   * @return id
  */
  
  @Schema(name = "id", description = "unique identifier", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Alarm externalAlarmId(String externalAlarmId) {
    this.externalAlarmId = externalAlarmId;
    return this;
  }

  /**
   * An identifier of the alarm in the source system.
   * @return externalAlarmId
  */
  
  @Schema(name = "externalAlarmId", description = "An identifier of the alarm in the source system.", required = false)
  public String getExternalAlarmId() {
    return externalAlarmId;
  }

  public void setExternalAlarmId(String externalAlarmId) {
    this.externalAlarmId = externalAlarmId;
  }

  public Alarm state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Defines the alarm state during its life cycle (raised, updated, cleared).
   * @return state
  */
  
  @Schema(name = "state", description = "Defines the alarm state during its life cycle (raised, updated, cleared).", required = false)
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public Alarm alarmType(AlarmType alarmType) {
    this.alarmType = alarmType;
    return this;
  }

  /**
   * Get alarmType
   * @return alarmType
  */
  @Valid 
  @Schema(name = "alarmType", required = false)
  public AlarmType getAlarmType() {
    return alarmType;
  }

  public void setAlarmType(AlarmType alarmType) {
    this.alarmType = alarmType;
  }

  public Alarm perceivedSeverity(PerceivedSeverity perceivedSeverity) {
    this.perceivedSeverity = perceivedSeverity;
    return this;
  }

  /**
   * Get perceivedSeverity
   * @return perceivedSeverity
  */
  @Valid 
  @Schema(name = "perceivedSeverity", required = false)
  public PerceivedSeverity getPerceivedSeverity() {
    return perceivedSeverity;
  }

  public void setPerceivedSeverity(PerceivedSeverity perceivedSeverity) {
    this.perceivedSeverity = perceivedSeverity;
  }

  public Alarm probableCause(String probableCause) {
    this.probableCause = probableCause;
    return this;
  }

  /**
   * Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B.
   * @return probableCause
  */
  
  @Schema(name = "probableCause", description = "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B.", required = false)
  public String getProbableCause() {
    return probableCause;
  }

  public void setProbableCause(String probableCause) {
    this.probableCause = probableCause;
  }

  public Alarm specificProblem(String specificProblem) {
    this.specificProblem = specificProblem;
    return this;
  }

  /**
   * Provides more specific information about the alarm.
   * @return specificProblem
  */
  
  @Schema(name = "specificProblem", description = "Provides more specific information about the alarm.", required = false)
  public String getSpecificProblem() {
    return specificProblem;
  }

  public void setSpecificProblem(String specificProblem) {
    this.specificProblem = specificProblem;
  }

  public Alarm alarmedObjectType(String alarmedObjectType) {
    this.alarmedObjectType = alarmedObjectType;
    return this;
  }

  /**
   * The type (class) of the managed object associated with the event.
   * @return alarmedObjectType
  */
  
  @Schema(name = "alarmedObjectType", description = "The type (class) of the managed object associated with the event.", required = false)
  public String getAlarmedObjectType() {
    return alarmedObjectType;
  }

  public void setAlarmedObjectType(String alarmedObjectType) {
    this.alarmedObjectType = alarmedObjectType;
  }

  public Alarm alarmedObject(AlarmedObjectRef alarmedObject) {
    this.alarmedObject = alarmedObject;
    return this;
  }

  /**
   * Get alarmedObject
   * @return alarmedObject
  */
  @Valid 
  @Schema(name = "alarmedObject", required = false)
  public AlarmedObjectRef getAlarmedObject() {
    return alarmedObject;
  }

  public void setAlarmedObject(AlarmedObjectRef alarmedObject) {
    this.alarmedObject = alarmedObject;
  }

  public Alarm reportingSystemId(String reportingSystemId) {
    this.reportingSystemId = reportingSystemId;
    return this;
  }

  /**
   * Reporting system identity.
   * @return reportingSystemId
  */
  
  @Schema(name = "reportingSystemId", description = "Reporting system identity.", required = false)
  public String getReportingSystemId() {
    return reportingSystemId;
  }

  public void setReportingSystemId(String reportingSystemId) {
    this.reportingSystemId = reportingSystemId;
  }

  public Alarm sourceSystemId(String sourceSystemId) {
    this.sourceSystemId = sourceSystemId;
    return this;
  }

  /**
   * Source system identity.
   * @return sourceSystemId
  */
  
  @Schema(name = "sourceSystemId", description = "Source system identity.", required = false)
  public String getSourceSystemId() {
    return sourceSystemId;
  }

  public void setSourceSystemId(String sourceSystemId) {
    this.sourceSystemId = sourceSystemId;
  }

  public Alarm alarmDetails(String alarmDetails) {
    this.alarmDetails = alarmDetails;
    return this;
  }

  /**
   * Contains further information on the alarm.
   * @return alarmDetails
  */
  
  @Schema(name = "alarmDetails", description = "Contains further information on the alarm.", required = false)
  public String getAlarmDetails() {
    return alarmDetails;
  }

  public void setAlarmDetails(String alarmDetails) {
    this.alarmDetails = alarmDetails;
  }

  public Alarm alarmRaisedTime(OffsetDateTime alarmRaisedTime) {
    this.alarmRaisedTime = alarmRaisedTime;
    return this;
  }

  /**
   * Indicates the time (as a date + time) at which the alarm occurred at its source.
   * @return alarmRaisedTime
  */
  @Valid 
  @Schema(name = "alarmRaisedTime", description = "Indicates the time (as a date + time) at which the alarm occurred at its source.", required = false)
  public OffsetDateTime getAlarmRaisedTime() {
    return alarmRaisedTime;
  }

  public void setAlarmRaisedTime(OffsetDateTime alarmRaisedTime) {
    this.alarmRaisedTime = alarmRaisedTime;
  }

  public Alarm alarmChangedTime(OffsetDateTime alarmChangedTime) {
    this.alarmChangedTime = alarmChangedTime;
    return this;
  }

  /**
   * Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time.
   * @return alarmChangedTime
  */
  @Valid 
  @Schema(name = "alarmChangedTime", description = "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time.", required = false)
  public OffsetDateTime getAlarmChangedTime() {
    return alarmChangedTime;
  }

  public void setAlarmChangedTime(OffsetDateTime alarmChangedTime) {
    this.alarmChangedTime = alarmChangedTime;
  }

  public Alarm alarmClearedTime(OffsetDateTime alarmClearedTime) {
    this.alarmClearedTime = alarmClearedTime;
    return this;
  }

  /**
   * Indicates the time (as a date + time) at which the alarm is cleared at the source. 
   * @return alarmClearedTime
  */
  @Valid 
  @Schema(name = "alarmClearedTime", description = "Indicates the time (as a date + time) at which the alarm is cleared at the source. ", required = false)
  public OffsetDateTime getAlarmClearedTime() {
    return alarmClearedTime;
  }

  public void setAlarmClearedTime(OffsetDateTime alarmClearedTime) {
    this.alarmClearedTime = alarmClearedTime;
  }

  public Alarm alarmReportingTime(OffsetDateTime alarmReportingTime) {
    this.alarmReportingTime = alarmReportingTime;
    return this;
  }

  /**
   * Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm   was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS.
   * @return alarmReportingTime
  */
  @Valid 
  @Schema(name = "alarmReportingTime", description = "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm   was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS.", required = false)
  public OffsetDateTime getAlarmReportingTime() {
    return alarmReportingTime;
  }

  public void setAlarmReportingTime(OffsetDateTime alarmReportingTime) {
    this.alarmReportingTime = alarmReportingTime;
  }

  public Alarm ackState(AckStateEnum ackState) {
    this.ackState = ackState;
    return this;
  }

  /**
   * Provides the Acknowledgement State of the alarm (unacknowledged, acknowledged).
   * @return ackState
  */
  
  @Schema(name = "ackState", description = "Provides the Acknowledgement State of the alarm (unacknowledged, acknowledged).", required = false)
  public AckStateEnum getAckState() {
    return ackState;
  }

  public void setAckState(AckStateEnum ackState) {
    this.ackState = ackState;
  }

  public Alarm ackSystemId(String ackSystemId) {
    this.ackSystemId = ackSystemId;
    return this;
  }

  /**
   * Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm.
   * @return ackSystemId
  */
  
  @Schema(name = "ackSystemId", description = "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm.", required = false)
  public String getAckSystemId() {
    return ackSystemId;
  }

  public void setAckSystemId(String ackSystemId) {
    this.ackSystemId = ackSystemId;
  }

  public Alarm ackUserId(String ackUserId) {
    this.ackUserId = ackUserId;
    return this;
  }

  /**
   * Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm.
   * @return ackUserId
  */
  
  @Schema(name = "ackUserId", description = "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm.", required = false)
  public String getAckUserId() {
    return ackUserId;
  }

  public void setAckUserId(String ackUserId) {
    this.ackUserId = ackUserId;
  }

  public Alarm affectedService(List<ServiceRef> affectedService) {
    this.affectedService = affectedService;
    return this;
  }

  public Alarm addAffectedServiceItem(ServiceRef affectedServiceItem) {
    if (this.affectedService == null) {
      this.affectedService = new ArrayList<>();
    }
    this.affectedService.add(affectedServiceItem);
    return this;
  }

  /**
   * Provides list of affected services.
   * @return affectedService
  */
  @Valid 
  @Schema(name = "affectedService", description = "Provides list of affected services.", required = false)
  public List<ServiceRef> getAffectedService() {
    return affectedService;
  }

  public void setAffectedService(List<ServiceRef> affectedService) {
    this.affectedService = affectedService;
  }

  public Alarm alarmEscalation(Boolean alarmEscalation) {
    this.alarmEscalation = alarmEscalation;
    return this;
  }

  /**
   * Indicates if this alarm has been escalated or not. 
   * @return alarmEscalation
  */
  
  @Schema(name = "alarmEscalation", description = "Indicates if this alarm has been escalated or not. ", required = false)
  public Boolean getAlarmEscalation() {
    return alarmEscalation;
  }

  public void setAlarmEscalation(Boolean alarmEscalation) {
    this.alarmEscalation = alarmEscalation;
  }

  public Alarm clearSystemId(String clearSystemId) {
    this.clearSystemId = clearSystemId;
    return this;
  }

  /**
   * Provides the id of the system where the user who invoked the alarmCleared operation is located. 
   * @return clearSystemId
  */
  
  @Schema(name = "clearSystemId", description = "Provides the id of the system where the user who invoked the alarmCleared operation is located. ", required = false)
  public String getClearSystemId() {
    return clearSystemId;
  }

  public void setClearSystemId(String clearSystemId) {
    this.clearSystemId = clearSystemId;
  }

  public Alarm clearUserId(String clearUserId) {
    this.clearUserId = clearUserId;
    return this;
  }

  /**
   * Provides the id of the user who invoked the alarmCleared operation
   * @return clearUserId
  */
  
  @Schema(name = "clearUserId", description = "Provides the id of the user who invoked the alarmCleared operation", required = false)
  public String getClearUserId() {
    return clearUserId;
  }

  public void setClearUserId(String clearUserId) {
    this.clearUserId = clearUserId;
  }

  public Alarm comment(List<Comment> comment) {
    this.comment = comment;
    return this;
  }

  public Alarm addCommentItem(Comment commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

  /**
   * Provides list of Comments regards Alarm.
   * @return comment
  */
  @Valid 
  @Schema(name = "comment", description = "Provides list of Comments regards Alarm.", required = false)
  public List<Comment> getComment() {
    return comment;
  }

  public void setComment(List<Comment> comment) {
    this.comment = comment;
  }

  public Alarm correlatedAlarm(List<AlarmRef> correlatedAlarm) {
    this.correlatedAlarm = correlatedAlarm;
    return this;
  }

  public Alarm addCorrelatedAlarmItem(AlarmRef correlatedAlarmItem) {
    if (this.correlatedAlarm == null) {
      this.correlatedAlarm = new ArrayList<>();
    }
    this.correlatedAlarm.add(correlatedAlarmItem);
    return this;
  }

  /**
   * Provides list of correlated Alarms.
   * @return correlatedAlarm
  */
  @Valid 
  @Schema(name = "correlatedAlarm", description = "Provides list of correlated Alarms.", required = false)
  public List<AlarmRef> getCorrelatedAlarm() {
    return correlatedAlarm;
  }

  public void setCorrelatedAlarm(List<AlarmRef> correlatedAlarm) {
    this.correlatedAlarm = correlatedAlarm;
  }

  public Alarm crossedThresholdInformation(CrossedThresholdInformation crossedThresholdInformation) {
    this.crossedThresholdInformation = crossedThresholdInformation;
    return this;
  }

  /**
   * Get crossedThresholdInformation
   * @return crossedThresholdInformation
  */
  @Valid 
  @Schema(name = "crossedThresholdInformation", required = false)
  public CrossedThresholdInformation getCrossedThresholdInformation() {
    return crossedThresholdInformation;
  }

  public void setCrossedThresholdInformation(CrossedThresholdInformation crossedThresholdInformation) {
    this.crossedThresholdInformation = crossedThresholdInformation;
  }

  public Alarm isRootCause(Boolean isRootCause) {
    this.isRootCause = isRootCause;
    return this;
  }

  /**
   * Indicates whether the alarm is a root cause alarm.. 
   * @return isRootCause
  */
  
  @Schema(name = "isRootCause", description = "Indicates whether the alarm is a root cause alarm.. ", required = false)
  public Boolean getIsRootCause() {
    return isRootCause;
  }

  public void setIsRootCause(Boolean isRootCause) {
    this.isRootCause = isRootCause;
  }

  public Alarm parentAlarm(List<AlarmRef> parentAlarm) {
    this.parentAlarm = parentAlarm;
    return this;
  }

  public Alarm addParentAlarmItem(AlarmRef parentAlarmItem) {
    if (this.parentAlarm == null) {
      this.parentAlarm = new ArrayList<>();
    }
    this.parentAlarm.add(parentAlarmItem);
    return this;
  }

  /**
   * Provides list of parrent Alarms.
   * @return parentAlarm
  */
  @Valid 
  @Schema(name = "parentAlarm", description = "Provides list of parrent Alarms.", required = false)
  public List<AlarmRef> getParentAlarm() {
    return parentAlarm;
  }

  public void setParentAlarm(List<AlarmRef> parentAlarm) {
    this.parentAlarm = parentAlarm;
  }

  public Alarm plannedOutageIndicator(PlannedOutageIndicatorEnum plannedOutageIndicator) {
    this.plannedOutageIndicator = plannedOutageIndicator;
    return this;
  }

  /**
   * Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). 
   * @return plannedOutageIndicator
  */
  
  @Schema(name = "plannedOutageIndicator", description = "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). ", required = false)
  public PlannedOutageIndicatorEnum getPlannedOutageIndicator() {
    return plannedOutageIndicator;
  }

  public void setPlannedOutageIndicator(PlannedOutageIndicatorEnum plannedOutageIndicator) {
    this.plannedOutageIndicator = plannedOutageIndicator;
  }

  public Alarm proposedRepairedActions(String proposedRepairedActions) {
    this.proposedRepairedActions = proposedRepairedActions;
    return this;
  }

  /**
   * Indicates proposed repair actions, if known to the system emitting the alarm.
   * @return proposedRepairedActions
  */
  
  @Schema(name = "proposedRepairedActions", description = "Indicates proposed repair actions, if known to the system emitting the alarm.", required = false)
  public String getProposedRepairedActions() {
    return proposedRepairedActions;
  }

  public void setProposedRepairedActions(String proposedRepairedActions) {
    this.proposedRepairedActions = proposedRepairedActions;
  }

  public Alarm serviceAffecting(Boolean serviceAffecting) {
    this.serviceAffecting = serviceAffecting;
    return this;
  }

  /**
   * Indicates whether the alarm affects service or not.
   * @return serviceAffecting
  */
  
  @Schema(name = "serviceAffecting", description = "Indicates whether the alarm affects service or not.", required = false)
  public Boolean getServiceAffecting() {
    return serviceAffecting;
  }

  public void setServiceAffecting(Boolean serviceAffecting) {
    this.serviceAffecting = serviceAffecting;
  }

  public Alarm place(List<RelatedPlaceRef> place) {
    this.place = place;
    return this;
  }

  public Alarm addPlaceItem(RelatedPlaceRef placeItem) {
    if (this.place == null) {
      this.place = new ArrayList<>();
    }
    this.place.add(placeItem);
    return this;
  }

  /**
   * List of related places, which are affected by Alarm.
   * @return place
  */
  @Valid 
  @Schema(name = "place", description = "List of related places, which are affected by Alarm.", required = false)
  public List<RelatedPlaceRef> getPlace() {
    return place;
  }

  public void setPlace(List<RelatedPlaceRef> place) {
    this.place = place;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alarm alarm = (Alarm) o;
    return Objects.equals(this.atType, alarm.atType) &&
        Objects.equals(this.atBaseType, alarm.atBaseType) &&
        Objects.equals(this.atSchemaLocation, alarm.atSchemaLocation) &&
        Objects.equals(this.href, alarm.href) &&
        Objects.equals(this.id, alarm.id) &&
        Objects.equals(this.externalAlarmId, alarm.externalAlarmId) &&
        Objects.equals(this.state, alarm.state) &&
        Objects.equals(this.alarmType, alarm.alarmType) &&
        Objects.equals(this.perceivedSeverity, alarm.perceivedSeverity) &&
        Objects.equals(this.probableCause, alarm.probableCause) &&
        Objects.equals(this.specificProblem, alarm.specificProblem) &&
        Objects.equals(this.alarmedObjectType, alarm.alarmedObjectType) &&
        Objects.equals(this.alarmedObject, alarm.alarmedObject) &&
        Objects.equals(this.reportingSystemId, alarm.reportingSystemId) &&
        Objects.equals(this.sourceSystemId, alarm.sourceSystemId) &&
        Objects.equals(this.alarmDetails, alarm.alarmDetails) &&
        Objects.equals(this.alarmRaisedTime, alarm.alarmRaisedTime) &&
        Objects.equals(this.alarmChangedTime, alarm.alarmChangedTime) &&
        Objects.equals(this.alarmClearedTime, alarm.alarmClearedTime) &&
        Objects.equals(this.alarmReportingTime, alarm.alarmReportingTime) &&
        Objects.equals(this.ackState, alarm.ackState) &&
        Objects.equals(this.ackSystemId, alarm.ackSystemId) &&
        Objects.equals(this.ackUserId, alarm.ackUserId) &&
        Objects.equals(this.affectedService, alarm.affectedService) &&
        Objects.equals(this.alarmEscalation, alarm.alarmEscalation) &&
        Objects.equals(this.clearSystemId, alarm.clearSystemId) &&
        Objects.equals(this.clearUserId, alarm.clearUserId) &&
        Objects.equals(this.comment, alarm.comment) &&
        Objects.equals(this.correlatedAlarm, alarm.correlatedAlarm) &&
        Objects.equals(this.crossedThresholdInformation, alarm.crossedThresholdInformation) &&
        Objects.equals(this.isRootCause, alarm.isRootCause) &&
        Objects.equals(this.parentAlarm, alarm.parentAlarm) &&
        Objects.equals(this.plannedOutageIndicator, alarm.plannedOutageIndicator) &&
        Objects.equals(this.proposedRepairedActions, alarm.proposedRepairedActions) &&
        Objects.equals(this.serviceAffecting, alarm.serviceAffecting) &&
        Objects.equals(this.place, alarm.place);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, href, id, externalAlarmId, state, alarmType, perceivedSeverity, probableCause, specificProblem, alarmedObjectType, alarmedObject, reportingSystemId, sourceSystemId, alarmDetails, alarmRaisedTime, alarmChangedTime, alarmClearedTime, alarmReportingTime, ackState, ackSystemId, ackUserId, affectedService, alarmEscalation, clearSystemId, clearUserId, comment, correlatedAlarm, crossedThresholdInformation, isRootCause, parentAlarm, plannedOutageIndicator, proposedRepairedActions, serviceAffecting, place);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alarm {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalAlarmId: ").append(toIndentedString(externalAlarmId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    alarmType: ").append(toIndentedString(alarmType)).append("\n");
    sb.append("    perceivedSeverity: ").append(toIndentedString(perceivedSeverity)).append("\n");
    sb.append("    probableCause: ").append(toIndentedString(probableCause)).append("\n");
    sb.append("    specificProblem: ").append(toIndentedString(specificProblem)).append("\n");
    sb.append("    alarmedObjectType: ").append(toIndentedString(alarmedObjectType)).append("\n");
    sb.append("    alarmedObject: ").append(toIndentedString(alarmedObject)).append("\n");
    sb.append("    reportingSystemId: ").append(toIndentedString(reportingSystemId)).append("\n");
    sb.append("    sourceSystemId: ").append(toIndentedString(sourceSystemId)).append("\n");
    sb.append("    alarmDetails: ").append(toIndentedString(alarmDetails)).append("\n");
    sb.append("    alarmRaisedTime: ").append(toIndentedString(alarmRaisedTime)).append("\n");
    sb.append("    alarmChangedTime: ").append(toIndentedString(alarmChangedTime)).append("\n");
    sb.append("    alarmClearedTime: ").append(toIndentedString(alarmClearedTime)).append("\n");
    sb.append("    alarmReportingTime: ").append(toIndentedString(alarmReportingTime)).append("\n");
    sb.append("    ackState: ").append(toIndentedString(ackState)).append("\n");
    sb.append("    ackSystemId: ").append(toIndentedString(ackSystemId)).append("\n");
    sb.append("    ackUserId: ").append(toIndentedString(ackUserId)).append("\n");
    sb.append("    affectedService: ").append(toIndentedString(affectedService)).append("\n");
    sb.append("    alarmEscalation: ").append(toIndentedString(alarmEscalation)).append("\n");
    sb.append("    clearSystemId: ").append(toIndentedString(clearSystemId)).append("\n");
    sb.append("    clearUserId: ").append(toIndentedString(clearUserId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    correlatedAlarm: ").append(toIndentedString(correlatedAlarm)).append("\n");
    sb.append("    crossedThresholdInformation: ").append(toIndentedString(crossedThresholdInformation)).append("\n");
    sb.append("    isRootCause: ").append(toIndentedString(isRootCause)).append("\n");
    sb.append("    parentAlarm: ").append(toIndentedString(parentAlarm)).append("\n");
    sb.append("    plannedOutageIndicator: ").append(toIndentedString(plannedOutageIndicator)).append("\n");
    sb.append("    proposedRepairedActions: ").append(toIndentedString(proposedRepairedActions)).append("\n");
    sb.append("    serviceAffecting: ").append(toIndentedString(serviceAffecting)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

