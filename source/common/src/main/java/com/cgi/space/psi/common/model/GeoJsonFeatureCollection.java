package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.GeoJson;
import com.cgi.space.psi.common.model.GeoJsonFeature;
import com.cgi.space.psi.common.model.GeoJsonFeatureCollection;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * The GeoJSon FeatureCollection.
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@Schema(name = "GeoJsonFeatureCollection", description = "The GeoJSon FeatureCollection.")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = GeoJsonFeature.class, name = "Feature"),
  @JsonSubTypes.Type(value = GeoJsonFeatureCollection.class, name = "FeatureCollection")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class GeoJsonFeatureCollection extends GeoJson {

  @JsonProperty("features")
  @Valid
  private List<GeoJsonFeature> features = null;

  public GeoJsonFeatureCollection features(List<GeoJsonFeature> features) {
    this.features = features;
    return this;
  }

  public GeoJsonFeatureCollection addFeaturesItem(GeoJsonFeature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * This is a list of GeoJson Features.
   * @return features
  */
  @Valid 
  @Schema(name = "features", description = "This is a list of GeoJson Features.", required = false)
  public List<GeoJsonFeature> getFeatures() {
    return features;
  }

  public void setFeatures(List<GeoJsonFeature> features) {
    this.features = features;
  }

  public GeoJsonFeatureCollection type(TypeEnum type) {
    super.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoJsonFeatureCollection geoJsonFeatureCollection = (GeoJsonFeatureCollection) o;
    return Objects.equals(this.features, geoJsonFeatureCollection.features) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(features, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoJsonFeatureCollection {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

