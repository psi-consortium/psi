package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.GeographicAddress;
import com.cgi.space.psi.common.model.GeographicLocation;
import com.cgi.space.psi.common.model.GeographicSite;
import com.cgi.space.psi.common.model.Geometry;
import com.cgi.space.psi.common.model.Place;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * GeographicLocation
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = GeographicAddress.class, name = "GeographicAddress"),
  @JsonSubTypes.Type(value = GeographicLocation.class, name = "GeographicLocation"),
  @JsonSubTypes.Type(value = GeographicSite.class, name = "GeographicSite"),
  @JsonSubTypes.Type(value = Place.class, name = "Place")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class GeographicLocation extends Place implements GeographicLocationRefOrValue, PlaceRefOrValue {

  @JsonProperty("geoJson")
  private Geometry geoJson;

  @JsonProperty("bbox")
  @Valid
  private List<BigDecimal> bbox = null;

  public GeographicLocation geoJson(Geometry geoJson) {
    this.geoJson = geoJson;
    return this;
  }

  /**
   * Get geoJson
   * @return geoJson
  */
  @Valid 
  @Schema(name = "geoJson", required = false)
  public Geometry getGeoJson() {
    return geoJson;
  }

  public void setGeoJson(Geometry geoJson) {
    this.geoJson = geoJson;
  }

  public GeographicLocation bbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
    return this;
  }

  public GeographicLocation addBboxItem(BigDecimal bboxItem) {
    if (this.bbox == null) {
      this.bbox = new ArrayList<>();
    }
    this.bbox.add(bboxItem);
    return this;
  }

  /**
   * A bounding box array that contains the geometry. The axes order follows the axes order of the geometry
   * @return bbox
  */
  @Valid @Size(min = 4) 
  @Schema(name = "bbox", description = "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry", required = false)
  public List<BigDecimal> getBbox() {
    return bbox;
  }

  public void setBbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
  }

  public GeographicLocation atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public GeographicLocation atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public GeographicLocation atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public GeographicLocation href(URI href) {
    super.setHref(href);
    return this;
  }

  public GeographicLocation id(String id) {
    super.setId(id);
    return this;
  }

  public GeographicLocation name(String name) {
    super.setName(name);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeographicLocation geographicLocation = (GeographicLocation) o;
    return Objects.equals(this.geoJson, geographicLocation.geoJson) &&
        Objects.equals(this.bbox, geographicLocation.bbox) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geoJson, bbox, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeographicLocation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    geoJson: ").append(toIndentedString(geoJson)).append("\n");
    sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

