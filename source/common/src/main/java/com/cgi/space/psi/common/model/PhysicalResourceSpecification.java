package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.CharacteristicSpecification;
import com.cgi.space.psi.common.model.ExternalIdentifier;
import com.cgi.space.psi.common.model.FeatureSpecification;
import com.cgi.space.psi.common.model.IntentSpecificationRef;
import com.cgi.space.psi.common.model.LogicalResourceSpecification;
import com.cgi.space.psi.common.model.PhysicalResourceSpecification;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRef;
import com.cgi.space.psi.common.model.ResourceFunctionSpecification;
import com.cgi.space.psi.common.model.ResourceSpecification;
import com.cgi.space.psi.common.model.ResourceSpecificationRelationship;
import com.cgi.space.psi.common.model.TargetResourceSchema;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * PhysicalResourceSpecification
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = LogicalResourceSpecification.class, name = "LogicalResourceSpecification"),
  @JsonSubTypes.Type(value = PhysicalResourceSpecification.class, name = "PhysicalResourceSpecification"),
  @JsonSubTypes.Type(value = ResourceFunctionSpecification.class, name = "ResourceFunctionSpecification"),
  @JsonSubTypes.Type(value = ResourceSpecification.class, name = "ResourceSpecification")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class PhysicalResourceSpecification extends ResourceSpecification {

  @JsonProperty("model")
  private String model;

  @JsonProperty("part")
  private String part;

  @JsonProperty("sku")
  private String sku;

  @JsonProperty("vendor")
  private String vendor;

  public PhysicalResourceSpecification model(String model) {
    this.model = model;
    return this;
  }

  /**
   * This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute.
   * @return model
  */
  
  @Schema(name = "model", description = "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute.", required = false)
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public PhysicalResourceSpecification part(String part) {
    this.part = part;
    return this;
  }

  /**
   * This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute.
   * @return part
  */
  
  @Schema(name = "part", description = "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute.", required = false)
  public String getPart() {
    return part;
  }

  public void setPart(String part) {
    this.part = part;
  }

  public PhysicalResourceSpecification sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute.
   * @return sku
  */
  
  @Schema(name = "sku", description = "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute.", required = false)
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }

  public PhysicalResourceSpecification vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource.
   * @return vendor
  */
  
  @Schema(name = "vendor", description = "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource.", required = false)
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  public PhysicalResourceSpecification atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public PhysicalResourceSpecification atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public PhysicalResourceSpecification atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public PhysicalResourceSpecification href(URI href) {
    super.setHref(href);
    return this;
  }

  public PhysicalResourceSpecification id(String id) {
    super.setId(id);
    return this;
  }

  public PhysicalResourceSpecification description(String description) {
    super.setDescription(description);
    return this;
  }

  public PhysicalResourceSpecification version(String version) {
    super.setVersion(version);
    return this;
  }

  public PhysicalResourceSpecification validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  public PhysicalResourceSpecification isBundle(Boolean isBundle) {
    super.setIsBundle(isBundle);
    return this;
  }

  public PhysicalResourceSpecification lastUpdate(OffsetDateTime lastUpdate) {
    super.setLastUpdate(lastUpdate);
    return this;
  }

  public PhysicalResourceSpecification lifecycleStatus(String lifecycleStatus) {
    super.setLifecycleStatus(lifecycleStatus);
    return this;
  }

  public PhysicalResourceSpecification name(String name) {
    super.setName(name);
    return this;
  }

  public PhysicalResourceSpecification category(String category) {
    super.setCategory(category);
    return this;
  }

  public PhysicalResourceSpecification targetResourceSchema(TargetResourceSchema targetResourceSchema) {
    super.setTargetResourceSchema(targetResourceSchema);
    return this;
  }

  public PhysicalResourceSpecification featureSpecification(List<FeatureSpecification> featureSpecification) {
    super.setFeatureSpecification(featureSpecification);
    return this;
  }

  public PhysicalResourceSpecification addFeatureSpecificationItem(FeatureSpecification featureSpecificationItem) {
    super.addFeatureSpecificationItem(featureSpecificationItem);
    return this;
  }

  public PhysicalResourceSpecification attachment(List<AttachmentOrDocumentRef> attachment) {
    super.setAttachment(attachment);
    return this;
  }

  public PhysicalResourceSpecification addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    super.addAttachmentItem(attachmentItem);
    return this;
  }

  public PhysicalResourceSpecification relatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public PhysicalResourceSpecification addRelatedPartyItem(RelatedPartyRefOrPartyRoleRef relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public PhysicalResourceSpecification resourceSpecCharacteristic(List<CharacteristicSpecification> resourceSpecCharacteristic) {
    super.setResourceSpecCharacteristic(resourceSpecCharacteristic);
    return this;
  }

  public PhysicalResourceSpecification addResourceSpecCharacteristicItem(CharacteristicSpecification resourceSpecCharacteristicItem) {
    super.addResourceSpecCharacteristicItem(resourceSpecCharacteristicItem);
    return this;
  }

  public PhysicalResourceSpecification resourceSpecRelationship(List<ResourceSpecificationRelationship> resourceSpecRelationship) {
    super.setResourceSpecRelationship(resourceSpecRelationship);
    return this;
  }

  public PhysicalResourceSpecification addResourceSpecRelationshipItem(ResourceSpecificationRelationship resourceSpecRelationshipItem) {
    super.addResourceSpecRelationshipItem(resourceSpecRelationshipItem);
    return this;
  }

  public PhysicalResourceSpecification intentSpecification(IntentSpecificationRef intentSpecification) {
    super.setIntentSpecification(intentSpecification);
    return this;
  }

  public PhysicalResourceSpecification externalIdentifier(List<ExternalIdentifier> externalIdentifier) {
    super.setExternalIdentifier(externalIdentifier);
    return this;
  }

  public PhysicalResourceSpecification addExternalIdentifierItem(ExternalIdentifier externalIdentifierItem) {
    super.addExternalIdentifierItem(externalIdentifierItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalResourceSpecification physicalResourceSpecification = (PhysicalResourceSpecification) o;
    return Objects.equals(this.model, physicalResourceSpecification.model) &&
        Objects.equals(this.part, physicalResourceSpecification.part) &&
        Objects.equals(this.sku, physicalResourceSpecification.sku) &&
        Objects.equals(this.vendor, physicalResourceSpecification.vendor) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, part, sku, vendor, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalResourceSpecification {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

