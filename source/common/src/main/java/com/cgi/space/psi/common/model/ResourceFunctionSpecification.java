package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AttachmentOrDocumentRef;
import com.cgi.space.psi.common.model.CharacteristicSpecification;
import com.cgi.space.psi.common.model.ConnectionPointSpecificationRef;
import com.cgi.space.psi.common.model.ExternalIdentifier;
import com.cgi.space.psi.common.model.FeatureSpecification;
import com.cgi.space.psi.common.model.IntentSpecificationRef;
import com.cgi.space.psi.common.model.LogicalResourceSpecification;
import com.cgi.space.psi.common.model.PhysicalResourceSpecification;
import com.cgi.space.psi.common.model.RelatedPartyRefOrPartyRoleRef;
import com.cgi.space.psi.common.model.ResourceFunctionSpecification;
import com.cgi.space.psi.common.model.ResourceGraphSpecification;
import com.cgi.space.psi.common.model.ResourceSpecification;
import com.cgi.space.psi.common.model.ResourceSpecificationRelationship;
import com.cgi.space.psi.common.model.TargetResourceSchema;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ResourceFunctionSpecification
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = LogicalResourceSpecification.class, name = "LogicalResourceSpecification"),
  @JsonSubTypes.Type(value = PhysicalResourceSpecification.class, name = "PhysicalResourceSpecification"),
  @JsonSubTypes.Type(value = ResourceFunctionSpecification.class, name = "ResourceFunctionSpecification"),
  @JsonSubTypes.Type(value = ResourceSpecification.class, name = "ResourceSpecification")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ResourceFunctionSpecification extends LogicalResourceSpecification {

  @JsonProperty("connectionPointSpecification")
  @Valid
  private List<ConnectionPointSpecificationRef> connectionPointSpecification = null;

  @JsonProperty("connectivitySpecification")
  @Valid
  private List<ResourceGraphSpecification> connectivitySpecification = null;

  public ResourceFunctionSpecification connectionPointSpecification(List<ConnectionPointSpecificationRef> connectionPointSpecification) {
    this.connectionPointSpecification = connectionPointSpecification;
    return this;
  }

  public ResourceFunctionSpecification addConnectionPointSpecificationItem(ConnectionPointSpecificationRef connectionPointSpecificationItem) {
    if (this.connectionPointSpecification == null) {
      this.connectionPointSpecification = new ArrayList<>();
    }
    this.connectionPointSpecification.add(connectionPointSpecificationItem);
    return this;
  }

  /**
   * External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.
   * @return connectionPointSpecification
  */
  @Valid 
  @Schema(name = "connectionPointSpecification", description = "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.", required = false)
  public List<ConnectionPointSpecificationRef> getConnectionPointSpecification() {
    return connectionPointSpecification;
  }

  public void setConnectionPointSpecification(List<ConnectionPointSpecificationRef> connectionPointSpecification) {
    this.connectionPointSpecification = connectionPointSpecification;
  }

  public ResourceFunctionSpecification connectivitySpecification(List<ResourceGraphSpecification> connectivitySpecification) {
    this.connectivitySpecification = connectivitySpecification;
    return this;
  }

  public ResourceFunctionSpecification addConnectivitySpecificationItem(ResourceGraphSpecification connectivitySpecificationItem) {
    if (this.connectivitySpecification == null) {
      this.connectivitySpecification = new ArrayList<>();
    }
    this.connectivitySpecification.add(connectivitySpecificationItem);
    return this;
  }

  /**
   * Internal connectivity potential specifications.
   * @return connectivitySpecification
  */
  @Valid 
  @Schema(name = "connectivitySpecification", description = "Internal connectivity potential specifications.", required = false)
  public List<ResourceGraphSpecification> getConnectivitySpecification() {
    return connectivitySpecification;
  }

  public void setConnectivitySpecification(List<ResourceGraphSpecification> connectivitySpecification) {
    this.connectivitySpecification = connectivitySpecification;
  }

  public ResourceFunctionSpecification atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public ResourceFunctionSpecification atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public ResourceFunctionSpecification atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public ResourceFunctionSpecification href(URI href) {
    super.setHref(href);
    return this;
  }

  public ResourceFunctionSpecification id(String id) {
    super.setId(id);
    return this;
  }

  public ResourceFunctionSpecification description(String description) {
    super.setDescription(description);
    return this;
  }

  public ResourceFunctionSpecification version(String version) {
    super.setVersion(version);
    return this;
  }

  public ResourceFunctionSpecification validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  public ResourceFunctionSpecification isBundle(Boolean isBundle) {
    super.setIsBundle(isBundle);
    return this;
  }

  public ResourceFunctionSpecification lastUpdate(OffsetDateTime lastUpdate) {
    super.setLastUpdate(lastUpdate);
    return this;
  }

  public ResourceFunctionSpecification lifecycleStatus(String lifecycleStatus) {
    super.setLifecycleStatus(lifecycleStatus);
    return this;
  }

  public ResourceFunctionSpecification name(String name) {
    super.setName(name);
    return this;
  }

  public ResourceFunctionSpecification category(String category) {
    super.setCategory(category);
    return this;
  }

  public ResourceFunctionSpecification targetResourceSchema(TargetResourceSchema targetResourceSchema) {
    super.setTargetResourceSchema(targetResourceSchema);
    return this;
  }

  public ResourceFunctionSpecification featureSpecification(List<FeatureSpecification> featureSpecification) {
    super.setFeatureSpecification(featureSpecification);
    return this;
  }

  public ResourceFunctionSpecification addFeatureSpecificationItem(FeatureSpecification featureSpecificationItem) {
    super.addFeatureSpecificationItem(featureSpecificationItem);
    return this;
  }

  public ResourceFunctionSpecification attachment(List<AttachmentOrDocumentRef> attachment) {
    super.setAttachment(attachment);
    return this;
  }

  public ResourceFunctionSpecification addAttachmentItem(AttachmentOrDocumentRef attachmentItem) {
    super.addAttachmentItem(attachmentItem);
    return this;
  }

  public ResourceFunctionSpecification relatedParty(List<RelatedPartyRefOrPartyRoleRef> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public ResourceFunctionSpecification addRelatedPartyItem(RelatedPartyRefOrPartyRoleRef relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public ResourceFunctionSpecification resourceSpecCharacteristic(List<CharacteristicSpecification> resourceSpecCharacteristic) {
    super.setResourceSpecCharacteristic(resourceSpecCharacteristic);
    return this;
  }

  public ResourceFunctionSpecification addResourceSpecCharacteristicItem(CharacteristicSpecification resourceSpecCharacteristicItem) {
    super.addResourceSpecCharacteristicItem(resourceSpecCharacteristicItem);
    return this;
  }

  public ResourceFunctionSpecification resourceSpecRelationship(List<ResourceSpecificationRelationship> resourceSpecRelationship) {
    super.setResourceSpecRelationship(resourceSpecRelationship);
    return this;
  }

  public ResourceFunctionSpecification addResourceSpecRelationshipItem(ResourceSpecificationRelationship resourceSpecRelationshipItem) {
    super.addResourceSpecRelationshipItem(resourceSpecRelationshipItem);
    return this;
  }

  public ResourceFunctionSpecification intentSpecification(IntentSpecificationRef intentSpecification) {
    super.setIntentSpecification(intentSpecification);
    return this;
  }

  public ResourceFunctionSpecification externalIdentifier(List<ExternalIdentifier> externalIdentifier) {
    super.setExternalIdentifier(externalIdentifier);
    return this;
  }

  public ResourceFunctionSpecification addExternalIdentifierItem(ExternalIdentifier externalIdentifierItem) {
    super.addExternalIdentifierItem(externalIdentifierItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceFunctionSpecification resourceFunctionSpecification = (ResourceFunctionSpecification) o;
    return Objects.equals(this.connectionPointSpecification, resourceFunctionSpecification.connectionPointSpecification) &&
        Objects.equals(this.connectivitySpecification, resourceFunctionSpecification.connectivitySpecification) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionPointSpecification, connectivitySpecification, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceFunctionSpecification {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    connectionPointSpecification: ").append(toIndentedString(connectionPointSpecification)).append("\n");
    sb.append("    connectivitySpecification: ").append(toIndentedString(connectivitySpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

