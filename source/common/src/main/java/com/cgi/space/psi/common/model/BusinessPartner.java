package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AccountRef;
import com.cgi.space.psi.common.model.AgreementRef;
import com.cgi.space.psi.common.model.BusinessPartner;
import com.cgi.space.psi.common.model.Characteristic;
import com.cgi.space.psi.common.model.Consumer;
import com.cgi.space.psi.common.model.ContactMedium;
import com.cgi.space.psi.common.model.CreditProfile;
import com.cgi.space.psi.common.model.PartyRef;
import com.cgi.space.psi.common.model.PartyRole;
import com.cgi.space.psi.common.model.PartyRoleSpecificationRef;
import com.cgi.space.psi.common.model.PaymentMethodRef;
import com.cgi.space.psi.common.model.Producer;
import com.cgi.space.psi.common.model.RelatedPartyOrPartyRole;
import com.cgi.space.psi.common.model.Supplier;
import com.cgi.space.psi.common.model.TimePeriod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * When business partner is the BusinessPartner 
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@Schema(name = "BusinessPartner", description = "When business partner is the BusinessPartner ")
@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BusinessPartner.class, name = "BusinessPartner"),
  @JsonSubTypes.Type(value = Consumer.class, name = "Consumer"),
  @JsonSubTypes.Type(value = PartyRole.class, name = "PartyRole"),
  @JsonSubTypes.Type(value = Producer.class, name = "Producer"),
  @JsonSubTypes.Type(value = Supplier.class, name = "Supplier")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class BusinessPartner extends PartyRole implements PartyOrPartyRole {

  public BusinessPartner atType(String atType) {
    super.setAtType(atType);
    return this;
  }

  public BusinessPartner atBaseType(String atBaseType) {
    super.setAtBaseType(atBaseType);
    return this;
  }

  public BusinessPartner atSchemaLocation(String atSchemaLocation) {
    super.setAtSchemaLocation(atSchemaLocation);
    return this;
  }

  public BusinessPartner href(URI href) {
    super.setHref(href);
    return this;
  }

  public BusinessPartner id(String id) {
    super.setId(id);
    return this;
  }

  public BusinessPartner name(String name) {
    super.setName(name);
    return this;
  }

  public BusinessPartner description(String description) {
    super.setDescription(description);
    return this;
  }

  public BusinessPartner role(String role) {
    super.setRole(role);
    return this;
  }

  public BusinessPartner engagedParty(PartyRef engagedParty) {
    super.setEngagedParty(engagedParty);
    return this;
  }

  public BusinessPartner partyRoleSpecification(PartyRoleSpecificationRef partyRoleSpecification) {
    super.setPartyRoleSpecification(partyRoleSpecification);
    return this;
  }

  public BusinessPartner characteristic(List<Characteristic> characteristic) {
    super.setCharacteristic(characteristic);
    return this;
  }

  public BusinessPartner addCharacteristicItem(Characteristic characteristicItem) {
    super.addCharacteristicItem(characteristicItem);
    return this;
  }

  public BusinessPartner account(List<AccountRef> account) {
    super.setAccount(account);
    return this;
  }

  public BusinessPartner addAccountItem(AccountRef accountItem) {
    super.addAccountItem(accountItem);
    return this;
  }

  public BusinessPartner agreement(List<AgreementRef> agreement) {
    super.setAgreement(agreement);
    return this;
  }

  public BusinessPartner addAgreementItem(AgreementRef agreementItem) {
    super.addAgreementItem(agreementItem);
    return this;
  }

  public BusinessPartner contactMedium(List<ContactMedium> contactMedium) {
    super.setContactMedium(contactMedium);
    return this;
  }

  public BusinessPartner addContactMediumItem(ContactMedium contactMediumItem) {
    super.addContactMediumItem(contactMediumItem);
    return this;
  }

  public BusinessPartner paymentMethod(List<PaymentMethodRef> paymentMethod) {
    super.setPaymentMethod(paymentMethod);
    return this;
  }

  public BusinessPartner addPaymentMethodItem(PaymentMethodRef paymentMethodItem) {
    super.addPaymentMethodItem(paymentMethodItem);
    return this;
  }

  public BusinessPartner creditProfile(List<CreditProfile> creditProfile) {
    super.setCreditProfile(creditProfile);
    return this;
  }

  public BusinessPartner addCreditProfileItem(CreditProfile creditProfileItem) {
    super.addCreditProfileItem(creditProfileItem);
    return this;
  }

  public BusinessPartner relatedParty(List<RelatedPartyOrPartyRole> relatedParty) {
    super.setRelatedParty(relatedParty);
    return this;
  }

  public BusinessPartner addRelatedPartyItem(RelatedPartyOrPartyRole relatedPartyItem) {
    super.addRelatedPartyItem(relatedPartyItem);
    return this;
  }

  public BusinessPartner status(String status) {
    super.setStatus(status);
    return this;
  }

  public BusinessPartner statusReason(String statusReason) {
    super.setStatusReason(statusReason);
    return this;
  }

  public BusinessPartner validFor(TimePeriod validFor) {
    super.setValidFor(validFor);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessPartner {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

