package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.CalendarPeriodFVO;
import com.cgi.space.psi.common.model.HourPeriodFVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * CalendarPeriodFVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CalendarPeriodFVO.class, name = "CalendarPeriod")
})

@JsonTypeName("CalendarPeriod_FVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class CalendarPeriodFVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("day")
  private String day;

  @JsonProperty("timeZone")
  private String timeZone;

  @JsonProperty("hourPeriod")
  @Valid
  private List<HourPeriodFVO> hourPeriod = null;

  @JsonProperty("status")
  private String status;

  public CalendarPeriodFVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public CalendarPeriodFVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public CalendarPeriodFVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public CalendarPeriodFVO day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)
   * @return day
  */
  
  @Schema(name = "day", description = "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)", required = false)
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }

  public CalendarPeriodFVO timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)
   * @return timeZone
  */
  
  @Schema(name = "timeZone", description = "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)", required = false)
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public CalendarPeriodFVO hourPeriod(List<HourPeriodFVO> hourPeriod) {
    this.hourPeriod = hourPeriod;
    return this;
  }

  public CalendarPeriodFVO addHourPeriodItem(HourPeriodFVO hourPeriodItem) {
    if (this.hourPeriod == null) {
      this.hourPeriod = new ArrayList<>();
    }
    this.hourPeriod.add(hourPeriodItem);
    return this;
  }

  /**
   * Get hourPeriod
   * @return hourPeriod
  */
  @Valid 
  @Schema(name = "hourPeriod", required = false)
  public List<HourPeriodFVO> getHourPeriod() {
    return hourPeriod;
  }

  public void setHourPeriod(List<HourPeriodFVO> hourPeriod) {
    this.hourPeriod = hourPeriod;
  }

  public CalendarPeriodFVO status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Indication of the availability of the caledar period (e.g.: available, booked, etc.)
   * @return status
  */
  @NotNull 
  @Schema(name = "status", description = "Indication of the availability of the caledar period (e.g.: available, booked, etc.)", required = true)
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalendarPeriodFVO calendarPeriodFVO = (CalendarPeriodFVO) o;
    return Objects.equals(this.atType, calendarPeriodFVO.atType) &&
        Objects.equals(this.atBaseType, calendarPeriodFVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, calendarPeriodFVO.atSchemaLocation) &&
        Objects.equals(this.day, calendarPeriodFVO.day) &&
        Objects.equals(this.timeZone, calendarPeriodFVO.timeZone) &&
        Objects.equals(this.hourPeriod, calendarPeriodFVO.hourPeriod) &&
        Objects.equals(this.status, calendarPeriodFVO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, day, timeZone, hourPeriod, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalendarPeriodFVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    hourPeriod: ").append(toIndentedString(hourPeriod)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

