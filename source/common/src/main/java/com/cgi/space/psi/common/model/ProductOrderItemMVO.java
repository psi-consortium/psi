package com.cgi.space.psi.common.model;

import java.net.URI;
import java.util.Objects;
import com.cgi.space.psi.common.model.AppointmentRefMVO;
import com.cgi.space.psi.common.model.BillingAccountRefMVO;
import com.cgi.space.psi.common.model.ItemActionType;
import com.cgi.space.psi.common.model.NoteMVO;
import com.cgi.space.psi.common.model.OrderItemRelationshipMVO;
import com.cgi.space.psi.common.model.OrderPriceMVO;
import com.cgi.space.psi.common.model.OrderTermMVO;
import com.cgi.space.psi.common.model.PaymentRefMVO;
import com.cgi.space.psi.common.model.ProductOfferingQualificationItemRefMVO;
import com.cgi.space.psi.common.model.ProductOfferingQualificationRefMVO;
import com.cgi.space.psi.common.model.ProductOfferingRefMVO;
import com.cgi.space.psi.common.model.ProductOrderItemStateType;
import com.cgi.space.psi.common.model.ProductRefOrValueMVO;
import com.cgi.space.psi.common.model.QuoteItemRefMVO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ProductOrderItemMVO
 */
@com.fasterxml.jackson.annotation.JsonFilter(com.cgi.space.psi.common.config.DynamicJacksonFilterProvider.NAME)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProductOrderItemMVO.class, name = "ProductOrderItem")
})

@JsonTypeName("ProductOrderItem_MVO")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class ProductOrderItemMVO {

  @JsonProperty("@type")
  private String atType;

  @JsonProperty("@baseType")
  private String atBaseType;

  @JsonProperty("@schemaLocation")
  private String atSchemaLocation;

  @JsonProperty("quantity")
  private Integer quantity;

  @JsonProperty("action")
  private ItemActionType action;

  @JsonProperty("appointment")
  private AppointmentRefMVO appointment;

  @JsonProperty("billingAccount")
  private BillingAccountRefMVO billingAccount;

  @JsonProperty("itemPrice")
  @Valid
  private List<OrderPriceMVO> itemPrice = null;

  @JsonProperty("itemTerm")
  @Valid
  private List<OrderTermMVO> itemTerm = null;

  @JsonProperty("itemTotalPrice")
  @Valid
  private List<OrderPriceMVO> itemTotalPrice = null;

  @JsonProperty("note")
  @Valid
  private List<NoteMVO> note = null;

  @JsonProperty("payment")
  @Valid
  private List<PaymentRefMVO> payment = null;

  @JsonProperty("product")
  private ProductRefOrValueMVO product;

  @JsonProperty("productOffering")
  private ProductOfferingRefMVO productOffering;

  @JsonProperty("productOfferingQualificationItem")
  private ProductOfferingQualificationItemRefMVO productOfferingQualificationItem;

  @JsonProperty("quoteItem")
  private QuoteItemRefMVO quoteItem;

  @JsonProperty("productOrderItem")
  @Valid
  private List<ProductOrderItemMVO> productOrderItem = null;

  @JsonProperty("productOrderItemRelationship")
  @Valid
  private List<OrderItemRelationshipMVO> productOrderItemRelationship = null;

  @JsonProperty("state")
  private ProductOrderItemStateType state;

  @JsonProperty("qualification")
  @Valid
  private List<ProductOfferingQualificationRefMVO> qualification = null;

  @JsonProperty("id")
  private String id;

  @JsonProperty("requestedStartDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime requestedStartDate;

  @JsonProperty("requestedEndDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime requestedEndDate;

  public ProductOrderItemMVO atType(String atType) {
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
  */
  @NotNull 
  @Schema(name = "@type", description = "When sub-classing, this defines the sub-class Extensible name", required = true)
  public String getAtType() {
    return atType;
  }

  public void setAtType(String atType) {
    this.atType = atType;
  }

  public ProductOrderItemMVO atBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
  */
  
  @Schema(name = "@baseType", description = "When sub-classing, this defines the super-class", required = false)
  public String getAtBaseType() {
    return atBaseType;
  }

  public void setAtBaseType(String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public ProductOrderItemMVO atSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
  */
  
  @Schema(name = "@schemaLocation", description = "A URI to a JSON-Schema file that defines additional attributes and relationships", required = false)
  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }

  public void setAtSchemaLocation(String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public ProductOrderItemMVO quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity ordered
   * @return quantity
  */
  
  @Schema(name = "quantity", description = "Quantity ordered", required = false)
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public ProductOrderItemMVO action(ItemActionType action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
  */
  @Valid 
  @Schema(name = "action", required = false)
  public ItemActionType getAction() {
    return action;
  }

  public void setAction(ItemActionType action) {
    this.action = action;
  }

  public ProductOrderItemMVO appointment(AppointmentRefMVO appointment) {
    this.appointment = appointment;
    return this;
  }

  /**
   * Get appointment
   * @return appointment
  */
  @Valid 
  @Schema(name = "appointment", required = false)
  public AppointmentRefMVO getAppointment() {
    return appointment;
  }

  public void setAppointment(AppointmentRefMVO appointment) {
    this.appointment = appointment;
  }

  public ProductOrderItemMVO billingAccount(BillingAccountRefMVO billingAccount) {
    this.billingAccount = billingAccount;
    return this;
  }

  /**
   * Get billingAccount
   * @return billingAccount
  */
  @Valid 
  @Schema(name = "billingAccount", required = false)
  public BillingAccountRefMVO getBillingAccount() {
    return billingAccount;
  }

  public void setBillingAccount(BillingAccountRefMVO billingAccount) {
    this.billingAccount = billingAccount;
  }

  public ProductOrderItemMVO itemPrice(List<OrderPriceMVO> itemPrice) {
    this.itemPrice = itemPrice;
    return this;
  }

  public ProductOrderItemMVO addItemPriceItem(OrderPriceMVO itemPriceItem) {
    if (this.itemPrice == null) {
      this.itemPrice = new ArrayList<>();
    }
    this.itemPrice.add(itemPriceItem);
    return this;
  }

  /**
   * Get itemPrice
   * @return itemPrice
  */
  @Valid 
  @Schema(name = "itemPrice", required = false)
  public List<OrderPriceMVO> getItemPrice() {
    return itemPrice;
  }

  public void setItemPrice(List<OrderPriceMVO> itemPrice) {
    this.itemPrice = itemPrice;
  }

  public ProductOrderItemMVO itemTerm(List<OrderTermMVO> itemTerm) {
    this.itemTerm = itemTerm;
    return this;
  }

  public ProductOrderItemMVO addItemTermItem(OrderTermMVO itemTermItem) {
    if (this.itemTerm == null) {
      this.itemTerm = new ArrayList<>();
    }
    this.itemTerm.add(itemTermItem);
    return this;
  }

  /**
   * Get itemTerm
   * @return itemTerm
  */
  @Valid 
  @Schema(name = "itemTerm", required = false)
  public List<OrderTermMVO> getItemTerm() {
    return itemTerm;
  }

  public void setItemTerm(List<OrderTermMVO> itemTerm) {
    this.itemTerm = itemTerm;
  }

  public ProductOrderItemMVO itemTotalPrice(List<OrderPriceMVO> itemTotalPrice) {
    this.itemTotalPrice = itemTotalPrice;
    return this;
  }

  public ProductOrderItemMVO addItemTotalPriceItem(OrderPriceMVO itemTotalPriceItem) {
    if (this.itemTotalPrice == null) {
      this.itemTotalPrice = new ArrayList<>();
    }
    this.itemTotalPrice.add(itemTotalPriceItem);
    return this;
  }

  /**
   * Get itemTotalPrice
   * @return itemTotalPrice
  */
  @Valid 
  @Schema(name = "itemTotalPrice", required = false)
  public List<OrderPriceMVO> getItemTotalPrice() {
    return itemTotalPrice;
  }

  public void setItemTotalPrice(List<OrderPriceMVO> itemTotalPrice) {
    this.itemTotalPrice = itemTotalPrice;
  }

  public ProductOrderItemMVO note(List<NoteMVO> note) {
    this.note = note;
    return this;
  }

  public ProductOrderItemMVO addNoteItem(NoteMVO noteItem) {
    if (this.note == null) {
      this.note = new ArrayList<>();
    }
    this.note.add(noteItem);
    return this;
  }

  /**
   * Get note
   * @return note
  */
  @Valid 
  @Schema(name = "note", required = false)
  public List<NoteMVO> getNote() {
    return note;
  }

  public void setNote(List<NoteMVO> note) {
    this.note = note;
  }

  public ProductOrderItemMVO payment(List<PaymentRefMVO> payment) {
    this.payment = payment;
    return this;
  }

  public ProductOrderItemMVO addPaymentItem(PaymentRefMVO paymentItem) {
    if (this.payment == null) {
      this.payment = new ArrayList<>();
    }
    this.payment.add(paymentItem);
    return this;
  }

  /**
   * Get payment
   * @return payment
  */
  @Valid 
  @Schema(name = "payment", required = false)
  public List<PaymentRefMVO> getPayment() {
    return payment;
  }

  public void setPayment(List<PaymentRefMVO> payment) {
    this.payment = payment;
  }

  public ProductOrderItemMVO product(ProductRefOrValueMVO product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
  */
  @Valid 
  @Schema(name = "product", required = false)
  public ProductRefOrValueMVO getProduct() {
    return product;
  }

  public void setProduct(ProductRefOrValueMVO product) {
    this.product = product;
  }

  public ProductOrderItemMVO productOffering(ProductOfferingRefMVO productOffering) {
    this.productOffering = productOffering;
    return this;
  }

  /**
   * Get productOffering
   * @return productOffering
  */
  @Valid 
  @Schema(name = "productOffering", required = false)
  public ProductOfferingRefMVO getProductOffering() {
    return productOffering;
  }

  public void setProductOffering(ProductOfferingRefMVO productOffering) {
    this.productOffering = productOffering;
  }

  public ProductOrderItemMVO productOfferingQualificationItem(ProductOfferingQualificationItemRefMVO productOfferingQualificationItem) {
    this.productOfferingQualificationItem = productOfferingQualificationItem;
    return this;
  }

  /**
   * Get productOfferingQualificationItem
   * @return productOfferingQualificationItem
  */
  @Valid 
  @Schema(name = "productOfferingQualificationItem", required = false)
  public ProductOfferingQualificationItemRefMVO getProductOfferingQualificationItem() {
    return productOfferingQualificationItem;
  }

  public void setProductOfferingQualificationItem(ProductOfferingQualificationItemRefMVO productOfferingQualificationItem) {
    this.productOfferingQualificationItem = productOfferingQualificationItem;
  }

  public ProductOrderItemMVO quoteItem(QuoteItemRefMVO quoteItem) {
    this.quoteItem = quoteItem;
    return this;
  }

  /**
   * Get quoteItem
   * @return quoteItem
  */
  @Valid 
  @Schema(name = "quoteItem", required = false)
  public QuoteItemRefMVO getQuoteItem() {
    return quoteItem;
  }

  public void setQuoteItem(QuoteItemRefMVO quoteItem) {
    this.quoteItem = quoteItem;
  }

  public ProductOrderItemMVO productOrderItem(List<ProductOrderItemMVO> productOrderItem) {
    this.productOrderItem = productOrderItem;
    return this;
  }

  public ProductOrderItemMVO addProductOrderItemItem(ProductOrderItemMVO productOrderItemItem) {
    if (this.productOrderItem == null) {
      this.productOrderItem = new ArrayList<>();
    }
    this.productOrderItem.add(productOrderItemItem);
    return this;
  }

  /**
   * Get productOrderItem
   * @return productOrderItem
  */
  @Valid 
  @Schema(name = "productOrderItem", required = false)
  public List<ProductOrderItemMVO> getProductOrderItem() {
    return productOrderItem;
  }

  public void setProductOrderItem(List<ProductOrderItemMVO> productOrderItem) {
    this.productOrderItem = productOrderItem;
  }

  public ProductOrderItemMVO productOrderItemRelationship(List<OrderItemRelationshipMVO> productOrderItemRelationship) {
    this.productOrderItemRelationship = productOrderItemRelationship;
    return this;
  }

  public ProductOrderItemMVO addProductOrderItemRelationshipItem(OrderItemRelationshipMVO productOrderItemRelationshipItem) {
    if (this.productOrderItemRelationship == null) {
      this.productOrderItemRelationship = new ArrayList<>();
    }
    this.productOrderItemRelationship.add(productOrderItemRelationshipItem);
    return this;
  }

  /**
   * Get productOrderItemRelationship
   * @return productOrderItemRelationship
  */
  @Valid 
  @Schema(name = "productOrderItemRelationship", required = false)
  public List<OrderItemRelationshipMVO> getProductOrderItemRelationship() {
    return productOrderItemRelationship;
  }

  public void setProductOrderItemRelationship(List<OrderItemRelationshipMVO> productOrderItemRelationship) {
    this.productOrderItemRelationship = productOrderItemRelationship;
  }

  public ProductOrderItemMVO state(ProductOrderItemStateType state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
  */
  @Valid 
  @Schema(name = "state", required = false)
  public ProductOrderItemStateType getState() {
    return state;
  }

  public void setState(ProductOrderItemStateType state) {
    this.state = state;
  }

  public ProductOrderItemMVO qualification(List<ProductOfferingQualificationRefMVO> qualification) {
    this.qualification = qualification;
    return this;
  }

  public ProductOrderItemMVO addQualificationItem(ProductOfferingQualificationRefMVO qualificationItem) {
    if (this.qualification == null) {
      this.qualification = new ArrayList<>();
    }
    this.qualification.add(qualificationItem);
    return this;
  }

  /**
   * Get qualification
   * @return qualification
  */
  @Valid 
  @Schema(name = "qualification", required = false)
  public List<ProductOfferingQualificationRefMVO> getQualification() {
    return qualification;
  }

  public void setQualification(List<ProductOfferingQualificationRefMVO> qualification) {
    this.qualification = qualification;
  }

  public ProductOrderItemMVO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the ProductOrder item (generally it is a sequence number 01, 02, 03, ...)
   * @return id
  */
  
  @Schema(name = "id", description = "Identifier of the ProductOrder item (generally it is a sequence number 01, 02, 03, ...)", required = false)
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProductOrderItemMVO requestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
    return this;
  }

  /**
   * Order fulfillment start date wished by the requestor. This is used when, for any reason, the requestor cannot allow the seller to operationally begin the fulfillment before a date. 
   * @return requestedStartDate
  */
  @Valid 
  @Schema(name = "requestedStartDate", description = "Order fulfillment start date wished by the requestor. This is used when, for any reason, the requestor cannot allow the seller to operationally begin the fulfillment before a date. ", required = false)
  public OffsetDateTime getRequestedStartDate() {
    return requestedStartDate;
  }

  public void setRequestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
  }

  public ProductOrderItemMVO requestedEndDate(OffsetDateTime requestedEndDate) {
    this.requestedEndDate = requestedEndDate;
    return this;
  }

  /**
   * Order fulfillment end date wished by the requestor. This is used when, for any reason, the requestor cannot allow the seller to operationally shutdown before a date.
   * @return requestedEndDate
  */
  @Valid 
  @Schema(name = "requestedEndDate", description = "Order fulfillment end date wished by the requestor. This is used when, for any reason, the requestor cannot allow the seller to operationally shutdown before a date.", required = false)
  public OffsetDateTime getRequestedEndDate() {
    return requestedEndDate;
  }

  public void setRequestedEndDate(OffsetDateTime requestedEndDate) {
    this.requestedEndDate = requestedEndDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductOrderItemMVO productOrderItemMVO = (ProductOrderItemMVO) o;
    return Objects.equals(this.atType, productOrderItemMVO.atType) &&
        Objects.equals(this.atBaseType, productOrderItemMVO.atBaseType) &&
        Objects.equals(this.atSchemaLocation, productOrderItemMVO.atSchemaLocation) &&
        Objects.equals(this.quantity, productOrderItemMVO.quantity) &&
        Objects.equals(this.action, productOrderItemMVO.action) &&
        Objects.equals(this.appointment, productOrderItemMVO.appointment) &&
        Objects.equals(this.billingAccount, productOrderItemMVO.billingAccount) &&
        Objects.equals(this.itemPrice, productOrderItemMVO.itemPrice) &&
        Objects.equals(this.itemTerm, productOrderItemMVO.itemTerm) &&
        Objects.equals(this.itemTotalPrice, productOrderItemMVO.itemTotalPrice) &&
        Objects.equals(this.note, productOrderItemMVO.note) &&
        Objects.equals(this.payment, productOrderItemMVO.payment) &&
        Objects.equals(this.product, productOrderItemMVO.product) &&
        Objects.equals(this.productOffering, productOrderItemMVO.productOffering) &&
        Objects.equals(this.productOfferingQualificationItem, productOrderItemMVO.productOfferingQualificationItem) &&
        Objects.equals(this.quoteItem, productOrderItemMVO.quoteItem) &&
        Objects.equals(this.productOrderItem, productOrderItemMVO.productOrderItem) &&
        Objects.equals(this.productOrderItemRelationship, productOrderItemMVO.productOrderItemRelationship) &&
        Objects.equals(this.state, productOrderItemMVO.state) &&
        Objects.equals(this.qualification, productOrderItemMVO.qualification) &&
        Objects.equals(this.id, productOrderItemMVO.id) &&
        Objects.equals(this.requestedStartDate, productOrderItemMVO.requestedStartDate) &&
        Objects.equals(this.requestedEndDate, productOrderItemMVO.requestedEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atType, atBaseType, atSchemaLocation, quantity, action, appointment, billingAccount, itemPrice, itemTerm, itemTotalPrice, note, payment, product, productOffering, productOfferingQualificationItem, quoteItem, productOrderItem, productOrderItemRelationship, state, qualification, id, requestedStartDate, requestedEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductOrderItemMVO {\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    appointment: ").append(toIndentedString(appointment)).append("\n");
    sb.append("    billingAccount: ").append(toIndentedString(billingAccount)).append("\n");
    sb.append("    itemPrice: ").append(toIndentedString(itemPrice)).append("\n");
    sb.append("    itemTerm: ").append(toIndentedString(itemTerm)).append("\n");
    sb.append("    itemTotalPrice: ").append(toIndentedString(itemTotalPrice)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productOffering: ").append(toIndentedString(productOffering)).append("\n");
    sb.append("    productOfferingQualificationItem: ").append(toIndentedString(productOfferingQualificationItem)).append("\n");
    sb.append("    quoteItem: ").append(toIndentedString(quoteItem)).append("\n");
    sb.append("    productOrderItem: ").append(toIndentedString(productOrderItem)).append("\n");
    sb.append("    productOrderItemRelationship: ").append(toIndentedString(productOrderItemRelationship)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    qualification: ").append(toIndentedString(qualification)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
    sb.append("    requestedEndDate: ").append(toIndentedString(requestedEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

